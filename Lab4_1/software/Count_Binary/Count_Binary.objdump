
Count_Binary.elf:     file format elf32-littlenios2
Count_Binary.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002294 memsz 0x00002294 flags r-x
    LOAD off    0x000032b4 vaddr 0x0000a2b4 paddr 0x0000a588 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x0000385c vaddr 0x0000a85c paddr 0x0000a85c align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00003588  2**0
                  CONTENTS
  2 .text         0000217c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000118  0000a19c  0000a19c  0000319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  0000a2b4  0000a588  000032b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  0000a85c  0000a85c  0000385c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000a874  0000a874  00003588  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003588  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000520  00000000  00000000  000035b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008251  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000288a  00000000  00000000  0000bd21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002da3  00000000  00000000  0000e5ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ac8  00000000  00000000  00011350  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000181b  00000000  00000000  00011e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001515  00000000  00000000  00013633  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00014b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  00014b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000165ee  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000165f1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000165fd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000165fe  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000165ff  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00016603  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00016607  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001660b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00016616  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00016621  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001662c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000029  00000000  00000000  00016637  2**0
                  CONTENTS, READONLY
 29 .jdi          00004239  00000000  00000000  00016660  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003f33f  00000000  00000000  0001a899  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000a19c l    d  .rodata	00000000 .rodata
0000a2b4 l    d  .rwdata	00000000 .rwdata
0000a85c l    d  .bss	00000000 .bss
0000a874 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Count_Binary_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 count_binary.c
0000a85c l     O .bss	00000001 count
0000805c l     F .text	00000024 lcd_init
00008080 l     F .text	00000058 initial_message
000080d8 l     F .text	00000020 count_led
000080f8 l     F .text	00000020 count_sevenseg
00008118 l     F .text	0000002c count_lcd
00008144 l     F .text	00000054 count_all
00008198 l     F .text	0000016c handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000872c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a2b4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008ec4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000904c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000919c l     F .text	00000038 alt_dev_reg
0000a394 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000095dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009724 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009750 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009864 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000099c4 l     F .text	00000050 alt_get_errno
00009a14 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008660 g     F .text	0000001c putchar
00008fb0 g     F .text	0000006c alt_main
0000867c g     F .text	00000080 _puts_r
0000a588 g       *ABS*	00000000 __flash_rwdata_start
0000860c g     F .text	0000004c printf
00009cec g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
0000a860 g     O .bss	00000004 edge_capture
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a864 g     O .bss	00000004 errno
0000a86c g     O .bss	00000004 alt_argv
00012568 g       *ABS*	00000000 _gp
0000901c g     F .text	00000030 usleep
0000a3e8 g     O .rwdata	00000180 alt_fd_list
00008658 g     F .text	00000008 _putchar_r
00009d10 g     F .text	00000090 alt_find_dev
00009948 g     F .text	0000007c alt_io_redirect
000086fc g     F .text	00000014 puts
00009304 g     F .text	000000ec altera_avalon_jtag_uart_read
000085d0 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008514 g     F .text	00000064 .hidden __udivsi3
0000a580 g     O .rwdata	00000004 alt_max_fd
0000a568 g     O .rwdata	00000004 _global_impure_ptr
0000a874 g       *ABS*	00000000 __bss_end
0000a3c0 g     O .rwdata	00000028 alt_dev_null
00009704 g     F .text	00000020 alt_dcache_flush_all
0000a588 g       *ABS*	00000000 __ram_rwdata_end
0000a578 g     O .rwdata	00000008 alt_dev_list
0000909c g     F .text	00000100 write
00008dec g     F .text	00000058 _putc_r
0000a2b4 g       *ABS*	00000000 __ram_rodata_end
00008578 g     F .text	00000058 .hidden __umodsi3
0000a874 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000093f0 g     F .text	00000094 altera_avalon_jtag_uart_write
00008798 g     F .text	0000052c ___vfprintf_internal_r
00009fd8 g     F .text	00000190 __call_exitprocs
00008020 g     F .text	0000003c _start
0000920c g     F .text	00000038 alt_sys_init
00008e9c g     F .text	00000028 .hidden __mulsi3
0000a2b4 g       *ABS*	00000000 __ram_rwdata_start
0000a19c g       *ABS*	00000000 __ram_rodata_start
00009244 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009eb4 g     F .text	000000d4 alt_get_fd
00009484 g     F .text	00000158 alt_busy_sleep
00009fa8 g     F .text	00000030 memcmp
0000a874 g       *ABS*	00000000 __alt_stack_base
00009da0 g     F .text	00000114 alt_find_file
000097a0 g     F .text	000000a4 alt_dev_llist_insert
00008ce0 g     F .text	000000b8 __sfvwrite_small_dev
0000a85c g       *ABS*	00000000 __bss_start
00008304 g     F .text	00000118 main
0000a870 g     O .bss	00000004 alt_envp
000092a4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a584 g     O .rwdata	00000004 alt_errno
00008d98 g     F .text	00000054 putc
0000841c g     F .text	00000084 .hidden __divsi3
0000a19c g       *ABS*	00000000 __flash_rodata_start
000091d4 g     F .text	00000038 alt_irq_init
00009c68 g     F .text	00000084 alt_release_fd
00008e44 g     F .text	00000058 _write_r
0000a56c g     O .rwdata	00000004 _impure_ptr
0000a868 g     O .bss	00000004 alt_argc
0000a570 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a588 g       *ABS*	00000000 _edata
0000a874 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009f88 g     F .text	00000020 exit
000084a0 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000a168 g     F .text	00000034 _exit
00008710 g     F .text	0000001c strlen
00009b08 g     F .text	00000160 open
00009844 g     F .text	00000020 alt_icache_flush_all
00008cc4 g     F .text	0000001c __vfprintf_internal
0000962c g     F .text	000000d8 close
00008f2c g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6895a14 	ori	gp,gp,9576
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10aa1714 	ori	r2,r2,43100

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18ea1d14 	ori	r3,r3,43124

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff5adc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008f2c0 	call	8f2c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008fb00 	call	8fb0 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff5af0>

0000805c <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
    805c:	defffe04 	addi	sp,sp,-8
    8060:	df000115 	stw	fp,4(sp)
    8064:	df000104 	addi	fp,sp,4
    8068:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
    806c:	0001883a 	nop
    8070:	e037883a 	mov	sp,fp
    8074:	df000017 	ldw	fp,0(sp)
    8078:	dec00104 	addi	sp,sp,4
    807c:	f800283a 	ret

00008080 <initial_message>:

static void initial_message()
{
    8080:	defffe04 	addi	sp,sp,-8
    8084:	dfc00115 	stw	ra,4(sp)
    8088:	df000015 	stw	fp,0(sp)
    808c:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
    8090:	01000074 	movhi	r4,1
    8094:	21286704 	addi	r4,r4,-24164
    8098:	00086fc0 	call	86fc <puts>
    printf("* Hello from Nios II!    *\n");
    809c:	01000074 	movhi	r4,1
    80a0:	21286f04 	addi	r4,r4,-24132
    80a4:	00086fc0 	call	86fc <puts>
    printf("* Counting from 00 to ff *\n");
    80a8:	01000074 	movhi	r4,1
    80ac:	21287604 	addi	r4,r4,-24104
    80b0:	00086fc0 	call	86fc <puts>
    printf("**************************\n");
    80b4:	01000074 	movhi	r4,1
    80b8:	21287d04 	addi	r4,r4,-24076
    80bc:	00086fc0 	call	86fc <puts>
}
    80c0:	0001883a 	nop
    80c4:	e037883a 	mov	sp,fp
    80c8:	dfc00117 	ldw	ra,4(sp)
    80cc:	df000017 	ldw	fp,0(sp)
    80d0:	dec00204 	addi	sp,sp,8
    80d4:	f800283a 	ret

000080d8 <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
    80d8:	deffff04 	addi	sp,sp,-4
    80dc:	df000015 	stw	fp,0(sp)
    80e0:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(
        LED_PIO_BASE,
        count
        );
#endif
}
    80e4:	0001883a 	nop
    80e8:	e037883a 	mov	sp,fp
    80ec:	df000017 	ldw	fp,0(sp)
    80f0:	dec00104 	addi	sp,sp,4
    80f4:	f800283a 	ret

000080f8 <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
    80f8:	deffff04 	addi	sp,sp,-4
    80fc:	df000015 	stw	fp,0(sp)
    8100:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
    8104:	0001883a 	nop
    8108:	e037883a 	mov	sp,fp
    810c:	df000017 	ldw	fp,0(sp)
    8110:	dec00104 	addi	sp,sp,4
    8114:	f800283a 	ret

00008118 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
    8118:	defffd04 	addi	sp,sp,-12
    811c:	df000215 	stw	fp,8(sp)
    8120:	df000204 	addi	fp,sp,8
    8124:	e13fff15 	stw	r4,-4(fp)
    FILE* __attribute__ ((unused))  lcd;  /* Attribute suppresses "unused variable" warning. */
    lcd = (FILE*) arg;
    8128:	e0bfff17 	ldw	r2,-4(fp)
    812c:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
    8130:	0001883a 	nop
    8134:	e037883a 	mov	sp,fp
    8138:	df000017 	ldw	fp,0(sp)
    813c:	dec00104 	addi	sp,sp,4
    8140:	f800283a 	ret

00008144 <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
    8144:	defffd04 	addi	sp,sp,-12
    8148:	dfc00215 	stw	ra,8(sp)
    814c:	df000115 	stw	fp,4(sp)
    8150:	df000104 	addi	fp,sp,4
    8154:	e13fff15 	stw	r4,-4(fp)
    count_led();
    8158:	00080d80 	call	80d8 <count_led>
    count_sevenseg();
    815c:	00080f80 	call	80f8 <count_sevenseg>
    count_lcd( arg );
    8160:	e13fff17 	ldw	r4,-4(fp)
    8164:	00081180 	call	8118 <count_lcd>
    printf("%02x,  ", count);
    8168:	d0a0bd03 	ldbu	r2,-32012(gp)
    816c:	10803fcc 	andi	r2,r2,255
    8170:	100b883a 	mov	r5,r2
    8174:	01000074 	movhi	r4,1
    8178:	21288404 	addi	r4,r4,-24048
    817c:	000860c0 	call	860c <printf>
}
    8180:	0001883a 	nop
    8184:	e037883a 	mov	sp,fp
    8188:	dfc00117 	ldw	ra,4(sp)
    818c:	df000017 	ldw	fp,0(sp)
    8190:	dec00204 	addi	sp,sp,8
    8194:	f800283a 	ret

00008198 <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
    8198:	defffc04 	addi	sp,sp,-16
    819c:	dfc00315 	stw	ra,12(sp)
    81a0:	df000215 	stw	fp,8(sp)
    81a4:	df000204 	addi	fp,sp,8
    81a8:	2005883a 	mov	r2,r4
    81ac:	e17fff15 	stw	r5,-4(fp)
    81b0:	e0bffe05 	stb	r2,-8(fp)
    /* Button press actions while counting. */
    if (type == 'c')
    81b4:	e0bffe03 	ldbu	r2,-8(fp)
    81b8:	108018d8 	cmpnei	r2,r2,99
    81bc:	10001d1e 	bne	r2,zero,8234 <handle_button_press+0x9c>
    {
        switch (edge_capture) 
    81c0:	00800074 	movhi	r2,1
    81c4:	10aa1804 	addi	r2,r2,-22432
    81c8:	10800017 	ldw	r2,0(r2)
    81cc:	10c000a0 	cmpeqi	r3,r2,2
    81d0:	18000c1e 	bne	r3,zero,8204 <handle_button_press+0x6c>
    81d4:	10c000c8 	cmpgei	r3,r2,3
    81d8:	1800031e 	bne	r3,zero,81e8 <handle_button_press+0x50>
    81dc:	10800060 	cmpeqi	r2,r2,1
    81e0:	1000061e 	bne	r2,zero,81fc <handle_button_press+0x64>
    81e4:	00000f06 	br	8224 <handle_button_press+0x8c>
    81e8:	10c00120 	cmpeqi	r3,r2,4
    81ec:	1800071e 	bne	r3,zero,820c <handle_button_press+0x74>
    81f0:	10800220 	cmpeqi	r2,r2,8
    81f4:	1000081e 	bne	r2,zero,8218 <handle_button_press+0x80>
    81f8:	00000a06 	br	8224 <handle_button_press+0x8c>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
    81fc:	00080d80 	call	80d8 <count_led>
            break;
    8200:	00003a06 	br	82ec <handle_button_press+0x154>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
    8204:	00080f80 	call	80f8 <count_sevenseg>
            break;
    8208:	00003806 	br	82ec <handle_button_press+0x154>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
    820c:	e13fff17 	ldw	r4,-4(fp)
    8210:	00081180 	call	8118 <count_lcd>
            break;
    8214:	00003506 	br	82ec <handle_button_press+0x154>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
    8218:	e13fff17 	ldw	r4,-4(fp)
    821c:	00081440 	call	8144 <count_all>
            break;
    8220:	00003206 	br	82ec <handle_button_press+0x154>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
    8224:	e13fff17 	ldw	r4,-4(fp)
    8228:	00081440 	call	8144 <count_all>
            break;
    822c:	0001883a 	nop
    8230:	00002e06 	br	82ec <handle_button_press+0x154>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
    8234:	00800074 	movhi	r2,1
    8238:	10aa1804 	addi	r2,r2,-22432
    823c:	10800017 	ldw	r2,0(r2)
    8240:	10c000a0 	cmpeqi	r3,r2,2
    8244:	1800111e 	bne	r3,zero,828c <handle_button_press+0xf4>
    8248:	10c000c8 	cmpgei	r3,r2,3
    824c:	1800031e 	bne	r3,zero,825c <handle_button_press+0xc4>
    8250:	10800060 	cmpeqi	r2,r2,1
    8254:	1000061e 	bne	r2,zero,8270 <handle_button_press+0xd8>
    8258:	00002106 	br	82e0 <handle_button_press+0x148>
    825c:	10c00120 	cmpeqi	r3,r2,4
    8260:	1800111e 	bne	r3,zero,82a8 <handle_button_press+0x110>
    8264:	10800220 	cmpeqi	r2,r2,8
    8268:	1000161e 	bne	r2,zero,82c4 <handle_button_press+0x12c>
    826c:	00001c06 	br	82e0 <handle_button_press+0x148>
        {
        case 0x1:
            printf( "Button 1\n");
    8270:	01000074 	movhi	r4,1
    8274:	21288604 	addi	r4,r4,-24040
    8278:	00086fc0 	call	86fc <puts>
            edge_capture = 0;
    827c:	00800074 	movhi	r2,1
    8280:	10aa1804 	addi	r2,r2,-22432
    8284:	10000015 	stw	zero,0(r2)
            break;
    8288:	00001806 	br	82ec <handle_button_press+0x154>
        case 0x2:
            printf( "Button 2\n");
    828c:	01000074 	movhi	r4,1
    8290:	21288904 	addi	r4,r4,-24028
    8294:	00086fc0 	call	86fc <puts>
            edge_capture = 0;
    8298:	00800074 	movhi	r2,1
    829c:	10aa1804 	addi	r2,r2,-22432
    82a0:	10000015 	stw	zero,0(r2)
            break;
    82a4:	00001106 	br	82ec <handle_button_press+0x154>
        case 0x4:
            printf( "Button 3\n");
    82a8:	01000074 	movhi	r4,1
    82ac:	21288c04 	addi	r4,r4,-24016
    82b0:	00086fc0 	call	86fc <puts>
            edge_capture = 0;
    82b4:	00800074 	movhi	r2,1
    82b8:	10aa1804 	addi	r2,r2,-22432
    82bc:	10000015 	stw	zero,0(r2)
            break;
    82c0:	00000a06 	br	82ec <handle_button_press+0x154>
        case 0x8:
            printf( "Button 4\n");
    82c4:	01000074 	movhi	r4,1
    82c8:	21288f04 	addi	r4,r4,-24004
    82cc:	00086fc0 	call	86fc <puts>
            edge_capture = 0;
    82d0:	00800074 	movhi	r2,1
    82d4:	10aa1804 	addi	r2,r2,-22432
    82d8:	10000015 	stw	zero,0(r2)
            break;
    82dc:	00000306 	br	82ec <handle_button_press+0x154>
        default:
            printf( "Button press UNKNOWN!!\n");
    82e0:	01000074 	movhi	r4,1
    82e4:	21289204 	addi	r4,r4,-23992
    82e8:	00086fc0 	call	86fc <puts>
        }
    }
}
    82ec:	0001883a 	nop
    82f0:	e037883a 	mov	sp,fp
    82f4:	dfc00117 	ldw	ra,4(sp)
    82f8:	df000017 	ldw	fp,0(sp)
    82fc:	dec00204 	addi	sp,sp,8
    8300:	f800283a 	ret

00008304 <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
    8304:	defffb04 	addi	sp,sp,-20
    8308:	dfc00415 	stw	ra,16(sp)
    830c:	df000315 	stw	fp,12(sp)
    8310:	df000304 	addi	fp,sp,12
    int i;
    int  __attribute__ ((unused))  wait_time;  /* Attribute suppresses "var set but not used" warning. */
    FILE * lcd;

    count = 0;
    8314:	d020bd05 	stb	zero,-32012(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
    8318:	e03ffe15 	stw	zero,-8(fp)
    if(lcd != NULL) {lcd_init( lcd );}
    831c:	e0bffe17 	ldw	r2,-8(fp)
    8320:	10000226 	beq	r2,zero,832c <main+0x28>
    8324:	e13ffe17 	ldw	r4,-8(fp)
    8328:	000805c0 	call	805c <lcd_init>
    init_button_pio();
#endif

/* Initial message to output. */

    initial_message();
    832c:	00080800 	call	8080 <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
    8330:	010000b4 	movhi	r4,2
    8334:	2121a804 	addi	r4,r4,-31072
    8338:	000901c0 	call	901c <usleep>
        if (edge_capture != 0)
    833c:	00800074 	movhi	r2,1
    8340:	10aa1804 	addi	r2,r2,-22432
    8344:	10800017 	ldw	r2,0(r2)
    8348:	10000426 	beq	r2,zero,835c <main+0x58>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
    834c:	e17ffe17 	ldw	r5,-8(fp)
    8350:	010018c4 	movi	r4,99
    8354:	00081980 	call	8198 <handle_button_press>
    8358:	00000206 	br	8364 <main+0x60>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
    835c:	e13ffe17 	ldw	r4,-8(fp)
    8360:	00081440 	call	8144 <count_all>
        }
        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
    8364:	d0a0bd03 	ldbu	r2,-32012(gp)
    8368:	10803fcc 	andi	r2,r2,255
    836c:	10803fd8 	cmpnei	r2,r2,255
    8370:	1000261e 	bne	r2,zero,840c <main+0x108>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
    8374:	01000074 	movhi	r4,1
    8378:	21289804 	addi	r4,r4,-23968
    837c:	000860c0 	call	860c <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
    8380:	00800074 	movhi	r2,1
    8384:	10aa1804 	addi	r2,r2,-22432
    8388:	10000015 	stw	zero,0(r2)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
    838c:	e03fff15 	stw	zero,-4(fp)
            for (i = 0; i<70; ++i)
    8390:	e03ffd15 	stw	zero,-12(fp)
    8394:	00001706 	br	83f4 <main+0xf0>
            {
                printf(".");
    8398:	01000b84 	movi	r4,46
    839c:	00086600 	call	8660 <putchar>
                wait_time = i/10;
    83a0:	e0bffd17 	ldw	r2,-12(fp)
    83a4:	01400284 	movi	r5,10
    83a8:	1009883a 	mov	r4,r2
    83ac:	000841c0 	call	841c <__divsi3>
    83b0:	e0bfff15 	stw	r2,-4(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
                    wait_time+1);

                if (edge_capture != 0) 
    83b4:	00800074 	movhi	r2,1
    83b8:	10aa1804 	addi	r2,r2,-22432
    83bc:	10800017 	ldw	r2,0(r2)
    83c0:	10000626 	beq	r2,zero,83dc <main+0xd8>
                {
                    printf( "\nYou pushed:  " );
    83c4:	01000074 	movhi	r4,1
    83c8:	21289b04 	addi	r4,r4,-23956
    83cc:	000860c0 	call	860c <printf>
                    handle_button_press('w', lcd);
    83d0:	e17ffe17 	ldw	r5,-8(fp)
    83d4:	01001dc4 	movi	r4,119
    83d8:	00081980 	call	8198 <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
    83dc:	010000b4 	movhi	r4,2
    83e0:	2121a804 	addi	r4,r4,-31072
    83e4:	000901c0 	call	901c <usleep>

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
    83e8:	e0bffd17 	ldw	r2,-12(fp)
    83ec:	10800044 	addi	r2,r2,1
    83f0:	e0bffd15 	stw	r2,-12(fp)
    83f4:	e0bffd17 	ldw	r2,-12(fp)
    83f8:	10801190 	cmplti	r2,r2,70
    83fc:	103fe61e 	bne	r2,zero,8398 <_gp+0xffff5e30>
                }
                usleep(100000); /* Sleep for 0.1s. */
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
    8400:	00080800 	call	8080 <initial_message>
            lcd_init( lcd );
    8404:	e13ffe17 	ldw	r4,-8(fp)
    8408:	000805c0 	call	805c <lcd_init>
        }
        count++;
    840c:	d0a0bd03 	ldbu	r2,-32012(gp)
    8410:	10800044 	addi	r2,r2,1
    8414:	d0a0bd05 	stb	r2,-32012(gp)
    }
    8418:	003fc506 	br	8330 <_gp+0xffff5dc8>

0000841c <__divsi3>:
    841c:	20001b16 	blt	r4,zero,848c <__divsi3+0x70>
    8420:	000f883a 	mov	r7,zero
    8424:	28001616 	blt	r5,zero,8480 <__divsi3+0x64>
    8428:	200d883a 	mov	r6,r4
    842c:	29001a2e 	bgeu	r5,r4,8498 <__divsi3+0x7c>
    8430:	00800804 	movi	r2,32
    8434:	00c00044 	movi	r3,1
    8438:	00000106 	br	8440 <__divsi3+0x24>
    843c:	10000d26 	beq	r2,zero,8474 <__divsi3+0x58>
    8440:	294b883a 	add	r5,r5,r5
    8444:	10bfffc4 	addi	r2,r2,-1
    8448:	18c7883a 	add	r3,r3,r3
    844c:	293ffb36 	bltu	r5,r4,843c <_gp+0xffff5ed4>
    8450:	0005883a 	mov	r2,zero
    8454:	18000726 	beq	r3,zero,8474 <__divsi3+0x58>
    8458:	0005883a 	mov	r2,zero
    845c:	31400236 	bltu	r6,r5,8468 <__divsi3+0x4c>
    8460:	314dc83a 	sub	r6,r6,r5
    8464:	10c4b03a 	or	r2,r2,r3
    8468:	1806d07a 	srli	r3,r3,1
    846c:	280ad07a 	srli	r5,r5,1
    8470:	183ffa1e 	bne	r3,zero,845c <_gp+0xffff5ef4>
    8474:	38000126 	beq	r7,zero,847c <__divsi3+0x60>
    8478:	0085c83a 	sub	r2,zero,r2
    847c:	f800283a 	ret
    8480:	014bc83a 	sub	r5,zero,r5
    8484:	39c0005c 	xori	r7,r7,1
    8488:	003fe706 	br	8428 <_gp+0xffff5ec0>
    848c:	0109c83a 	sub	r4,zero,r4
    8490:	01c00044 	movi	r7,1
    8494:	003fe306 	br	8424 <_gp+0xffff5ebc>
    8498:	00c00044 	movi	r3,1
    849c:	003fee06 	br	8458 <_gp+0xffff5ef0>

000084a0 <__modsi3>:
    84a0:	20001716 	blt	r4,zero,8500 <__modsi3+0x60>
    84a4:	000f883a 	mov	r7,zero
    84a8:	2005883a 	mov	r2,r4
    84ac:	28001216 	blt	r5,zero,84f8 <__modsi3+0x58>
    84b0:	2900162e 	bgeu	r5,r4,850c <__modsi3+0x6c>
    84b4:	01800804 	movi	r6,32
    84b8:	00c00044 	movi	r3,1
    84bc:	00000106 	br	84c4 <__modsi3+0x24>
    84c0:	30000a26 	beq	r6,zero,84ec <__modsi3+0x4c>
    84c4:	294b883a 	add	r5,r5,r5
    84c8:	31bfffc4 	addi	r6,r6,-1
    84cc:	18c7883a 	add	r3,r3,r3
    84d0:	293ffb36 	bltu	r5,r4,84c0 <_gp+0xffff5f58>
    84d4:	18000526 	beq	r3,zero,84ec <__modsi3+0x4c>
    84d8:	1806d07a 	srli	r3,r3,1
    84dc:	11400136 	bltu	r2,r5,84e4 <__modsi3+0x44>
    84e0:	1145c83a 	sub	r2,r2,r5
    84e4:	280ad07a 	srli	r5,r5,1
    84e8:	183ffb1e 	bne	r3,zero,84d8 <_gp+0xffff5f70>
    84ec:	38000126 	beq	r7,zero,84f4 <__modsi3+0x54>
    84f0:	0085c83a 	sub	r2,zero,r2
    84f4:	f800283a 	ret
    84f8:	014bc83a 	sub	r5,zero,r5
    84fc:	003fec06 	br	84b0 <_gp+0xffff5f48>
    8500:	0109c83a 	sub	r4,zero,r4
    8504:	01c00044 	movi	r7,1
    8508:	003fe706 	br	84a8 <_gp+0xffff5f40>
    850c:	00c00044 	movi	r3,1
    8510:	003ff106 	br	84d8 <_gp+0xffff5f70>

00008514 <__udivsi3>:
    8514:	200d883a 	mov	r6,r4
    8518:	2900152e 	bgeu	r5,r4,8570 <__udivsi3+0x5c>
    851c:	28001416 	blt	r5,zero,8570 <__udivsi3+0x5c>
    8520:	00800804 	movi	r2,32
    8524:	00c00044 	movi	r3,1
    8528:	00000206 	br	8534 <__udivsi3+0x20>
    852c:	10000e26 	beq	r2,zero,8568 <__udivsi3+0x54>
    8530:	28000516 	blt	r5,zero,8548 <__udivsi3+0x34>
    8534:	294b883a 	add	r5,r5,r5
    8538:	10bfffc4 	addi	r2,r2,-1
    853c:	18c7883a 	add	r3,r3,r3
    8540:	293ffa36 	bltu	r5,r4,852c <_gp+0xffff5fc4>
    8544:	18000826 	beq	r3,zero,8568 <__udivsi3+0x54>
    8548:	0005883a 	mov	r2,zero
    854c:	31400236 	bltu	r6,r5,8558 <__udivsi3+0x44>
    8550:	314dc83a 	sub	r6,r6,r5
    8554:	10c4b03a 	or	r2,r2,r3
    8558:	1806d07a 	srli	r3,r3,1
    855c:	280ad07a 	srli	r5,r5,1
    8560:	183ffa1e 	bne	r3,zero,854c <_gp+0xffff5fe4>
    8564:	f800283a 	ret
    8568:	0005883a 	mov	r2,zero
    856c:	f800283a 	ret
    8570:	00c00044 	movi	r3,1
    8574:	003ff406 	br	8548 <_gp+0xffff5fe0>

00008578 <__umodsi3>:
    8578:	2005883a 	mov	r2,r4
    857c:	2900122e 	bgeu	r5,r4,85c8 <__umodsi3+0x50>
    8580:	28001116 	blt	r5,zero,85c8 <__umodsi3+0x50>
    8584:	01800804 	movi	r6,32
    8588:	00c00044 	movi	r3,1
    858c:	00000206 	br	8598 <__umodsi3+0x20>
    8590:	30000c26 	beq	r6,zero,85c4 <__umodsi3+0x4c>
    8594:	28000516 	blt	r5,zero,85ac <__umodsi3+0x34>
    8598:	294b883a 	add	r5,r5,r5
    859c:	31bfffc4 	addi	r6,r6,-1
    85a0:	18c7883a 	add	r3,r3,r3
    85a4:	293ffa36 	bltu	r5,r4,8590 <_gp+0xffff6028>
    85a8:	18000626 	beq	r3,zero,85c4 <__umodsi3+0x4c>
    85ac:	1806d07a 	srli	r3,r3,1
    85b0:	11400136 	bltu	r2,r5,85b8 <__umodsi3+0x40>
    85b4:	1145c83a 	sub	r2,r2,r5
    85b8:	280ad07a 	srli	r5,r5,1
    85bc:	183ffb1e 	bne	r3,zero,85ac <_gp+0xffff6044>
    85c0:	f800283a 	ret
    85c4:	f800283a 	ret
    85c8:	00c00044 	movi	r3,1
    85cc:	003ff706 	br	85ac <_gp+0xffff6044>

000085d0 <_printf_r>:
    85d0:	defffd04 	addi	sp,sp,-12
    85d4:	dfc00015 	stw	ra,0(sp)
    85d8:	d9800115 	stw	r6,4(sp)
    85dc:	d9c00215 	stw	r7,8(sp)
    85e0:	20c00217 	ldw	r3,8(r4)
    85e4:	01800074 	movhi	r6,1
    85e8:	31a33804 	addi	r6,r6,-29472
    85ec:	19800115 	stw	r6,4(r3)
    85f0:	280d883a 	mov	r6,r5
    85f4:	21400217 	ldw	r5,8(r4)
    85f8:	d9c00104 	addi	r7,sp,4
    85fc:	00087980 	call	8798 <___vfprintf_internal_r>
    8600:	dfc00017 	ldw	ra,0(sp)
    8604:	dec00304 	addi	sp,sp,12
    8608:	f800283a 	ret

0000860c <printf>:
    860c:	defffc04 	addi	sp,sp,-16
    8610:	dfc00015 	stw	ra,0(sp)
    8614:	d9400115 	stw	r5,4(sp)
    8618:	d9800215 	stw	r6,8(sp)
    861c:	d9c00315 	stw	r7,12(sp)
    8620:	00800074 	movhi	r2,1
    8624:	10a95b04 	addi	r2,r2,-23188
    8628:	10800017 	ldw	r2,0(r2)
    862c:	01400074 	movhi	r5,1
    8630:	29633804 	addi	r5,r5,-29472
    8634:	10c00217 	ldw	r3,8(r2)
    8638:	d9800104 	addi	r6,sp,4
    863c:	19400115 	stw	r5,4(r3)
    8640:	200b883a 	mov	r5,r4
    8644:	11000217 	ldw	r4,8(r2)
    8648:	0008cc40 	call	8cc4 <__vfprintf_internal>
    864c:	dfc00017 	ldw	ra,0(sp)
    8650:	dec00404 	addi	sp,sp,16
    8654:	f800283a 	ret

00008658 <_putchar_r>:
    8658:	21800217 	ldw	r6,8(r4)
    865c:	0008dec1 	jmpi	8dec <_putc_r>

00008660 <putchar>:
    8660:	00800074 	movhi	r2,1
    8664:	10a95b04 	addi	r2,r2,-23188
    8668:	10800017 	ldw	r2,0(r2)
    866c:	200b883a 	mov	r5,r4
    8670:	11800217 	ldw	r6,8(r2)
    8674:	1009883a 	mov	r4,r2
    8678:	0008dec1 	jmpi	8dec <_putc_r>

0000867c <_puts_r>:
    867c:	defffd04 	addi	sp,sp,-12
    8680:	dc000015 	stw	r16,0(sp)
    8684:	2021883a 	mov	r16,r4
    8688:	2809883a 	mov	r4,r5
    868c:	dfc00215 	stw	ra,8(sp)
    8690:	dc400115 	stw	r17,4(sp)
    8694:	2823883a 	mov	r17,r5
    8698:	00087100 	call	8710 <strlen>
    869c:	81400217 	ldw	r5,8(r16)
    86a0:	01000074 	movhi	r4,1
    86a4:	21233804 	addi	r4,r4,-29472
    86a8:	29000115 	stw	r4,4(r5)
    86ac:	100f883a 	mov	r7,r2
    86b0:	880d883a 	mov	r6,r17
    86b4:	8009883a 	mov	r4,r16
    86b8:	0008ce00 	call	8ce0 <__sfvwrite_small_dev>
    86bc:	00ffffc4 	movi	r3,-1
    86c0:	10c00926 	beq	r2,r3,86e8 <_puts_r+0x6c>
    86c4:	81400217 	ldw	r5,8(r16)
    86c8:	01800074 	movhi	r6,1
    86cc:	01c00044 	movi	r7,1
    86d0:	28800117 	ldw	r2,4(r5)
    86d4:	31a89f04 	addi	r6,r6,-23940
    86d8:	8009883a 	mov	r4,r16
    86dc:	103ee83a 	callr	r2
    86e0:	10bfffe0 	cmpeqi	r2,r2,-1
    86e4:	0085c83a 	sub	r2,zero,r2
    86e8:	dfc00217 	ldw	ra,8(sp)
    86ec:	dc400117 	ldw	r17,4(sp)
    86f0:	dc000017 	ldw	r16,0(sp)
    86f4:	dec00304 	addi	sp,sp,12
    86f8:	f800283a 	ret

000086fc <puts>:
    86fc:	00800074 	movhi	r2,1
    8700:	10a95b04 	addi	r2,r2,-23188
    8704:	200b883a 	mov	r5,r4
    8708:	11000017 	ldw	r4,0(r2)
    870c:	000867c1 	jmpi	867c <_puts_r>

00008710 <strlen>:
    8710:	2005883a 	mov	r2,r4
    8714:	10c00007 	ldb	r3,0(r2)
    8718:	18000226 	beq	r3,zero,8724 <strlen+0x14>
    871c:	10800044 	addi	r2,r2,1
    8720:	003ffc06 	br	8714 <_gp+0xffff61ac>
    8724:	1105c83a 	sub	r2,r2,r4
    8728:	f800283a 	ret

0000872c <print_repeat>:
    872c:	defffb04 	addi	sp,sp,-20
    8730:	dc800315 	stw	r18,12(sp)
    8734:	dc400215 	stw	r17,8(sp)
    8738:	dc000115 	stw	r16,4(sp)
    873c:	dfc00415 	stw	ra,16(sp)
    8740:	2025883a 	mov	r18,r4
    8744:	2823883a 	mov	r17,r5
    8748:	d9800005 	stb	r6,0(sp)
    874c:	3821883a 	mov	r16,r7
    8750:	04000a0e 	bge	zero,r16,877c <print_repeat+0x50>
    8754:	88800117 	ldw	r2,4(r17)
    8758:	01c00044 	movi	r7,1
    875c:	d80d883a 	mov	r6,sp
    8760:	880b883a 	mov	r5,r17
    8764:	9009883a 	mov	r4,r18
    8768:	103ee83a 	callr	r2
    876c:	843fffc4 	addi	r16,r16,-1
    8770:	103ff726 	beq	r2,zero,8750 <_gp+0xffff61e8>
    8774:	00bfffc4 	movi	r2,-1
    8778:	00000106 	br	8780 <print_repeat+0x54>
    877c:	0005883a 	mov	r2,zero
    8780:	dfc00417 	ldw	ra,16(sp)
    8784:	dc800317 	ldw	r18,12(sp)
    8788:	dc400217 	ldw	r17,8(sp)
    878c:	dc000117 	ldw	r16,4(sp)
    8790:	dec00504 	addi	sp,sp,20
    8794:	f800283a 	ret

00008798 <___vfprintf_internal_r>:
    8798:	deffe504 	addi	sp,sp,-108
    879c:	d8c00804 	addi	r3,sp,32
    87a0:	ddc01815 	stw	r23,96(sp)
    87a4:	dd801715 	stw	r22,92(sp)
    87a8:	dd401615 	stw	r21,88(sp)
    87ac:	dd001515 	stw	r20,84(sp)
    87b0:	dcc01415 	stw	r19,80(sp)
    87b4:	dc801315 	stw	r18,76(sp)
    87b8:	dc401215 	stw	r17,72(sp)
    87bc:	dc001115 	stw	r16,68(sp)
    87c0:	dfc01a15 	stw	ra,104(sp)
    87c4:	df001915 	stw	fp,100(sp)
    87c8:	2029883a 	mov	r20,r4
    87cc:	2823883a 	mov	r17,r5
    87d0:	382d883a 	mov	r22,r7
    87d4:	d9800f15 	stw	r6,60(sp)
    87d8:	0021883a 	mov	r16,zero
    87dc:	d8000e15 	stw	zero,56(sp)
    87e0:	d8000a15 	stw	zero,40(sp)
    87e4:	002b883a 	mov	r21,zero
    87e8:	0027883a 	mov	r19,zero
    87ec:	0025883a 	mov	r18,zero
    87f0:	d8000c15 	stw	zero,48(sp)
    87f4:	d8000b15 	stw	zero,44(sp)
    87f8:	002f883a 	mov	r23,zero
    87fc:	d8c00915 	stw	r3,36(sp)
    8800:	d8c00f17 	ldw	r3,60(sp)
    8804:	19000003 	ldbu	r4,0(r3)
    8808:	20803fcc 	andi	r2,r4,255
    880c:	1080201c 	xori	r2,r2,128
    8810:	10bfe004 	addi	r2,r2,-128
    8814:	10011e26 	beq	r2,zero,8c90 <___vfprintf_internal_r+0x4f8>
    8818:	00c00044 	movi	r3,1
    881c:	b8c01426 	beq	r23,r3,8870 <___vfprintf_internal_r+0xd8>
    8820:	1dc00216 	blt	r3,r23,882c <___vfprintf_internal_r+0x94>
    8824:	b8000626 	beq	r23,zero,8840 <___vfprintf_internal_r+0xa8>
    8828:	00011506 	br	8c80 <___vfprintf_internal_r+0x4e8>
    882c:	01400084 	movi	r5,2
    8830:	b9401d26 	beq	r23,r5,88a8 <___vfprintf_internal_r+0x110>
    8834:	014000c4 	movi	r5,3
    8838:	b9402b26 	beq	r23,r5,88e8 <___vfprintf_internal_r+0x150>
    883c:	00011006 	br	8c80 <___vfprintf_internal_r+0x4e8>
    8840:	01400944 	movi	r5,37
    8844:	1140fc26 	beq	r2,r5,8c38 <___vfprintf_internal_r+0x4a0>
    8848:	88800117 	ldw	r2,4(r17)
    884c:	d9000005 	stb	r4,0(sp)
    8850:	01c00044 	movi	r7,1
    8854:	d80d883a 	mov	r6,sp
    8858:	880b883a 	mov	r5,r17
    885c:	a009883a 	mov	r4,r20
    8860:	103ee83a 	callr	r2
    8864:	1000d81e 	bne	r2,zero,8bc8 <___vfprintf_internal_r+0x430>
    8868:	84000044 	addi	r16,r16,1
    886c:	00010406 	br	8c80 <___vfprintf_internal_r+0x4e8>
    8870:	01400c04 	movi	r5,48
    8874:	1140fa26 	beq	r2,r5,8c60 <___vfprintf_internal_r+0x4c8>
    8878:	01400944 	movi	r5,37
    887c:	11400a1e 	bne	r2,r5,88a8 <___vfprintf_internal_r+0x110>
    8880:	d8800005 	stb	r2,0(sp)
    8884:	88800117 	ldw	r2,4(r17)
    8888:	b80f883a 	mov	r7,r23
    888c:	d80d883a 	mov	r6,sp
    8890:	880b883a 	mov	r5,r17
    8894:	a009883a 	mov	r4,r20
    8898:	103ee83a 	callr	r2
    889c:	1000ca1e 	bne	r2,zero,8bc8 <___vfprintf_internal_r+0x430>
    88a0:	84000044 	addi	r16,r16,1
    88a4:	0000f506 	br	8c7c <___vfprintf_internal_r+0x4e4>
    88a8:	25fff404 	addi	r23,r4,-48
    88ac:	bdc03fcc 	andi	r23,r23,255
    88b0:	00c00244 	movi	r3,9
    88b4:	1dc00936 	bltu	r3,r23,88dc <___vfprintf_internal_r+0x144>
    88b8:	00bfffc4 	movi	r2,-1
    88bc:	90800426 	beq	r18,r2,88d0 <___vfprintf_internal_r+0x138>
    88c0:	01400284 	movi	r5,10
    88c4:	9009883a 	mov	r4,r18
    88c8:	0008e9c0 	call	8e9c <__mulsi3>
    88cc:	00000106 	br	88d4 <___vfprintf_internal_r+0x13c>
    88d0:	0005883a 	mov	r2,zero
    88d4:	b8a5883a 	add	r18,r23,r2
    88d8:	0000e206 	br	8c64 <___vfprintf_internal_r+0x4cc>
    88dc:	01400b84 	movi	r5,46
    88e0:	1140e426 	beq	r2,r5,8c74 <___vfprintf_internal_r+0x4dc>
    88e4:	05c00084 	movi	r23,2
    88e8:	213ff404 	addi	r4,r4,-48
    88ec:	27003fcc 	andi	fp,r4,255
    88f0:	00c00244 	movi	r3,9
    88f4:	1f000936 	bltu	r3,fp,891c <___vfprintf_internal_r+0x184>
    88f8:	00bfffc4 	movi	r2,-1
    88fc:	98800426 	beq	r19,r2,8910 <___vfprintf_internal_r+0x178>
    8900:	01400284 	movi	r5,10
    8904:	9809883a 	mov	r4,r19
    8908:	0008e9c0 	call	8e9c <__mulsi3>
    890c:	00000106 	br	8914 <___vfprintf_internal_r+0x17c>
    8910:	0005883a 	mov	r2,zero
    8914:	e0a7883a 	add	r19,fp,r2
    8918:	0000d906 	br	8c80 <___vfprintf_internal_r+0x4e8>
    891c:	00c01b04 	movi	r3,108
    8920:	10c0d226 	beq	r2,r3,8c6c <___vfprintf_internal_r+0x4d4>
    8924:	013fffc4 	movi	r4,-1
    8928:	99000226 	beq	r19,r4,8934 <___vfprintf_internal_r+0x19c>
    892c:	d8000b15 	stw	zero,44(sp)
    8930:	00000106 	br	8938 <___vfprintf_internal_r+0x1a0>
    8934:	04c00044 	movi	r19,1
    8938:	01001a44 	movi	r4,105
    893c:	11001626 	beq	r2,r4,8998 <___vfprintf_internal_r+0x200>
    8940:	20800916 	blt	r4,r2,8968 <___vfprintf_internal_r+0x1d0>
    8944:	010018c4 	movi	r4,99
    8948:	11008826 	beq	r2,r4,8b6c <___vfprintf_internal_r+0x3d4>
    894c:	01001904 	movi	r4,100
    8950:	11001126 	beq	r2,r4,8998 <___vfprintf_internal_r+0x200>
    8954:	01001604 	movi	r4,88
    8958:	1100c81e 	bne	r2,r4,8c7c <___vfprintf_internal_r+0x4e4>
    895c:	00c00044 	movi	r3,1
    8960:	d8c00e15 	stw	r3,56(sp)
    8964:	00001506 	br	89bc <___vfprintf_internal_r+0x224>
    8968:	01001cc4 	movi	r4,115
    896c:	11009826 	beq	r2,r4,8bd0 <___vfprintf_internal_r+0x438>
    8970:	20800416 	blt	r4,r2,8984 <___vfprintf_internal_r+0x1ec>
    8974:	01001bc4 	movi	r4,111
    8978:	1100c01e 	bne	r2,r4,8c7c <___vfprintf_internal_r+0x4e4>
    897c:	05400204 	movi	r21,8
    8980:	00000f06 	br	89c0 <___vfprintf_internal_r+0x228>
    8984:	01001d44 	movi	r4,117
    8988:	11000d26 	beq	r2,r4,89c0 <___vfprintf_internal_r+0x228>
    898c:	01001e04 	movi	r4,120
    8990:	11000a26 	beq	r2,r4,89bc <___vfprintf_internal_r+0x224>
    8994:	0000b906 	br	8c7c <___vfprintf_internal_r+0x4e4>
    8998:	d8c00a17 	ldw	r3,40(sp)
    899c:	b7000104 	addi	fp,r22,4
    89a0:	18000726 	beq	r3,zero,89c0 <___vfprintf_internal_r+0x228>
    89a4:	df000d15 	stw	fp,52(sp)
    89a8:	b5c00017 	ldw	r23,0(r22)
    89ac:	b800080e 	bge	r23,zero,89d0 <___vfprintf_internal_r+0x238>
    89b0:	05efc83a 	sub	r23,zero,r23
    89b4:	02400044 	movi	r9,1
    89b8:	00000606 	br	89d4 <___vfprintf_internal_r+0x23c>
    89bc:	05400404 	movi	r21,16
    89c0:	b0c00104 	addi	r3,r22,4
    89c4:	d8c00d15 	stw	r3,52(sp)
    89c8:	b5c00017 	ldw	r23,0(r22)
    89cc:	d8000a15 	stw	zero,40(sp)
    89d0:	0013883a 	mov	r9,zero
    89d4:	d839883a 	mov	fp,sp
    89d8:	b8001726 	beq	r23,zero,8a38 <___vfprintf_internal_r+0x2a0>
    89dc:	a80b883a 	mov	r5,r21
    89e0:	b809883a 	mov	r4,r23
    89e4:	da401015 	stw	r9,64(sp)
    89e8:	00085140 	call	8514 <__udivsi3>
    89ec:	a80b883a 	mov	r5,r21
    89f0:	1009883a 	mov	r4,r2
    89f4:	102d883a 	mov	r22,r2
    89f8:	0008e9c0 	call	8e9c <__mulsi3>
    89fc:	b885c83a 	sub	r2,r23,r2
    8a00:	00c00244 	movi	r3,9
    8a04:	da401017 	ldw	r9,64(sp)
    8a08:	18800216 	blt	r3,r2,8a14 <___vfprintf_internal_r+0x27c>
    8a0c:	10800c04 	addi	r2,r2,48
    8a10:	00000506 	br	8a28 <___vfprintf_internal_r+0x290>
    8a14:	d8c00e17 	ldw	r3,56(sp)
    8a18:	18000226 	beq	r3,zero,8a24 <___vfprintf_internal_r+0x28c>
    8a1c:	10800dc4 	addi	r2,r2,55
    8a20:	00000106 	br	8a28 <___vfprintf_internal_r+0x290>
    8a24:	108015c4 	addi	r2,r2,87
    8a28:	e0800005 	stb	r2,0(fp)
    8a2c:	b02f883a 	mov	r23,r22
    8a30:	e7000044 	addi	fp,fp,1
    8a34:	003fe806 	br	89d8 <_gp+0xffff6470>
    8a38:	e6efc83a 	sub	r23,fp,sp
    8a3c:	9dc5c83a 	sub	r2,r19,r23
    8a40:	0080090e 	bge	zero,r2,8a68 <___vfprintf_internal_r+0x2d0>
    8a44:	e085883a 	add	r2,fp,r2
    8a48:	01400c04 	movi	r5,48
    8a4c:	d8c00917 	ldw	r3,36(sp)
    8a50:	e009883a 	mov	r4,fp
    8a54:	e0c0032e 	bgeu	fp,r3,8a64 <___vfprintf_internal_r+0x2cc>
    8a58:	e7000044 	addi	fp,fp,1
    8a5c:	21400005 	stb	r5,0(r4)
    8a60:	e0bffa1e 	bne	fp,r2,8a4c <_gp+0xffff64e4>
    8a64:	e6efc83a 	sub	r23,fp,sp
    8a68:	d8c00b17 	ldw	r3,44(sp)
    8a6c:	4dd1883a 	add	r8,r9,r23
    8a70:	922dc83a 	sub	r22,r18,r8
    8a74:	18001626 	beq	r3,zero,8ad0 <___vfprintf_internal_r+0x338>
    8a78:	48000a26 	beq	r9,zero,8aa4 <___vfprintf_internal_r+0x30c>
    8a7c:	00800b44 	movi	r2,45
    8a80:	d8800805 	stb	r2,32(sp)
    8a84:	88800117 	ldw	r2,4(r17)
    8a88:	01c00044 	movi	r7,1
    8a8c:	d9800804 	addi	r6,sp,32
    8a90:	880b883a 	mov	r5,r17
    8a94:	a009883a 	mov	r4,r20
    8a98:	103ee83a 	callr	r2
    8a9c:	10004a1e 	bne	r2,zero,8bc8 <___vfprintf_internal_r+0x430>
    8aa0:	84000044 	addi	r16,r16,1
    8aa4:	0580070e 	bge	zero,r22,8ac4 <___vfprintf_internal_r+0x32c>
    8aa8:	b00f883a 	mov	r7,r22
    8aac:	01800c04 	movi	r6,48
    8ab0:	880b883a 	mov	r5,r17
    8ab4:	a009883a 	mov	r4,r20
    8ab8:	000872c0 	call	872c <print_repeat>
    8abc:	1000421e 	bne	r2,zero,8bc8 <___vfprintf_internal_r+0x430>
    8ac0:	85a1883a 	add	r16,r16,r22
    8ac4:	e02d883a 	mov	r22,fp
    8ac8:	bf2fc83a 	sub	r23,r23,fp
    8acc:	00002006 	br	8b50 <___vfprintf_internal_r+0x3b8>
    8ad0:	0580090e 	bge	zero,r22,8af8 <___vfprintf_internal_r+0x360>
    8ad4:	b00f883a 	mov	r7,r22
    8ad8:	01800804 	movi	r6,32
    8adc:	880b883a 	mov	r5,r17
    8ae0:	a009883a 	mov	r4,r20
    8ae4:	da401015 	stw	r9,64(sp)
    8ae8:	000872c0 	call	872c <print_repeat>
    8aec:	da401017 	ldw	r9,64(sp)
    8af0:	1000351e 	bne	r2,zero,8bc8 <___vfprintf_internal_r+0x430>
    8af4:	85a1883a 	add	r16,r16,r22
    8af8:	483ff226 	beq	r9,zero,8ac4 <_gp+0xffff655c>
    8afc:	00800b44 	movi	r2,45
    8b00:	d8800805 	stb	r2,32(sp)
    8b04:	88800117 	ldw	r2,4(r17)
    8b08:	01c00044 	movi	r7,1
    8b0c:	d9800804 	addi	r6,sp,32
    8b10:	880b883a 	mov	r5,r17
    8b14:	a009883a 	mov	r4,r20
    8b18:	103ee83a 	callr	r2
    8b1c:	10002a1e 	bne	r2,zero,8bc8 <___vfprintf_internal_r+0x430>
    8b20:	84000044 	addi	r16,r16,1
    8b24:	003fe706 	br	8ac4 <_gp+0xffff655c>
    8b28:	b5bfffc4 	addi	r22,r22,-1
    8b2c:	b0800003 	ldbu	r2,0(r22)
    8b30:	01c00044 	movi	r7,1
    8b34:	d9800804 	addi	r6,sp,32
    8b38:	d8800805 	stb	r2,32(sp)
    8b3c:	88800117 	ldw	r2,4(r17)
    8b40:	880b883a 	mov	r5,r17
    8b44:	a009883a 	mov	r4,r20
    8b48:	103ee83a 	callr	r2
    8b4c:	10001e1e 	bne	r2,zero,8bc8 <___vfprintf_internal_r+0x430>
    8b50:	8585c83a 	sub	r2,r16,r22
    8b54:	b5c9883a 	add	r4,r22,r23
    8b58:	e085883a 	add	r2,fp,r2
    8b5c:	013ff216 	blt	zero,r4,8b28 <_gp+0xffff65c0>
    8b60:	1021883a 	mov	r16,r2
    8b64:	dd800d17 	ldw	r22,52(sp)
    8b68:	00004406 	br	8c7c <___vfprintf_internal_r+0x4e4>
    8b6c:	00800044 	movi	r2,1
    8b70:	1480080e 	bge	r2,r18,8b94 <___vfprintf_internal_r+0x3fc>
    8b74:	95ffffc4 	addi	r23,r18,-1
    8b78:	b80f883a 	mov	r7,r23
    8b7c:	01800804 	movi	r6,32
    8b80:	880b883a 	mov	r5,r17
    8b84:	a009883a 	mov	r4,r20
    8b88:	000872c0 	call	872c <print_repeat>
    8b8c:	10000e1e 	bne	r2,zero,8bc8 <___vfprintf_internal_r+0x430>
    8b90:	85e1883a 	add	r16,r16,r23
    8b94:	b0800017 	ldw	r2,0(r22)
    8b98:	01c00044 	movi	r7,1
    8b9c:	d80d883a 	mov	r6,sp
    8ba0:	d8800005 	stb	r2,0(sp)
    8ba4:	88800117 	ldw	r2,4(r17)
    8ba8:	880b883a 	mov	r5,r17
    8bac:	a009883a 	mov	r4,r20
    8bb0:	b5c00104 	addi	r23,r22,4
    8bb4:	103ee83a 	callr	r2
    8bb8:	1000031e 	bne	r2,zero,8bc8 <___vfprintf_internal_r+0x430>
    8bbc:	84000044 	addi	r16,r16,1
    8bc0:	b82d883a 	mov	r22,r23
    8bc4:	00002d06 	br	8c7c <___vfprintf_internal_r+0x4e4>
    8bc8:	00bfffc4 	movi	r2,-1
    8bcc:	00003106 	br	8c94 <___vfprintf_internal_r+0x4fc>
    8bd0:	b5c00017 	ldw	r23,0(r22)
    8bd4:	b7000104 	addi	fp,r22,4
    8bd8:	b809883a 	mov	r4,r23
    8bdc:	00087100 	call	8710 <strlen>
    8be0:	9091c83a 	sub	r8,r18,r2
    8be4:	102d883a 	mov	r22,r2
    8be8:	0200090e 	bge	zero,r8,8c10 <___vfprintf_internal_r+0x478>
    8bec:	400f883a 	mov	r7,r8
    8bf0:	01800804 	movi	r6,32
    8bf4:	880b883a 	mov	r5,r17
    8bf8:	a009883a 	mov	r4,r20
    8bfc:	da001015 	stw	r8,64(sp)
    8c00:	000872c0 	call	872c <print_repeat>
    8c04:	da001017 	ldw	r8,64(sp)
    8c08:	103fef1e 	bne	r2,zero,8bc8 <_gp+0xffff6660>
    8c0c:	8221883a 	add	r16,r16,r8
    8c10:	88800117 	ldw	r2,4(r17)
    8c14:	b00f883a 	mov	r7,r22
    8c18:	b80d883a 	mov	r6,r23
    8c1c:	880b883a 	mov	r5,r17
    8c20:	a009883a 	mov	r4,r20
    8c24:	103ee83a 	callr	r2
    8c28:	103fe71e 	bne	r2,zero,8bc8 <_gp+0xffff6660>
    8c2c:	85a1883a 	add	r16,r16,r22
    8c30:	e02d883a 	mov	r22,fp
    8c34:	00001106 	br	8c7c <___vfprintf_internal_r+0x4e4>
    8c38:	00c00044 	movi	r3,1
    8c3c:	04ffffc4 	movi	r19,-1
    8c40:	d8000e15 	stw	zero,56(sp)
    8c44:	d8c00a15 	stw	r3,40(sp)
    8c48:	05400284 	movi	r21,10
    8c4c:	9825883a 	mov	r18,r19
    8c50:	d8000c15 	stw	zero,48(sp)
    8c54:	d8000b15 	stw	zero,44(sp)
    8c58:	182f883a 	mov	r23,r3
    8c5c:	00000806 	br	8c80 <___vfprintf_internal_r+0x4e8>
    8c60:	ddc00b15 	stw	r23,44(sp)
    8c64:	05c00084 	movi	r23,2
    8c68:	00000506 	br	8c80 <___vfprintf_internal_r+0x4e8>
    8c6c:	00c00044 	movi	r3,1
    8c70:	d8c00c15 	stw	r3,48(sp)
    8c74:	05c000c4 	movi	r23,3
    8c78:	00000106 	br	8c80 <___vfprintf_internal_r+0x4e8>
    8c7c:	002f883a 	mov	r23,zero
    8c80:	d8c00f17 	ldw	r3,60(sp)
    8c84:	18c00044 	addi	r3,r3,1
    8c88:	d8c00f15 	stw	r3,60(sp)
    8c8c:	003edc06 	br	8800 <_gp+0xffff6298>
    8c90:	8005883a 	mov	r2,r16
    8c94:	dfc01a17 	ldw	ra,104(sp)
    8c98:	df001917 	ldw	fp,100(sp)
    8c9c:	ddc01817 	ldw	r23,96(sp)
    8ca0:	dd801717 	ldw	r22,92(sp)
    8ca4:	dd401617 	ldw	r21,88(sp)
    8ca8:	dd001517 	ldw	r20,84(sp)
    8cac:	dcc01417 	ldw	r19,80(sp)
    8cb0:	dc801317 	ldw	r18,76(sp)
    8cb4:	dc401217 	ldw	r17,72(sp)
    8cb8:	dc001117 	ldw	r16,68(sp)
    8cbc:	dec01b04 	addi	sp,sp,108
    8cc0:	f800283a 	ret

00008cc4 <__vfprintf_internal>:
    8cc4:	00800074 	movhi	r2,1
    8cc8:	10a95b04 	addi	r2,r2,-23188
    8ccc:	300f883a 	mov	r7,r6
    8cd0:	280d883a 	mov	r6,r5
    8cd4:	200b883a 	mov	r5,r4
    8cd8:	11000017 	ldw	r4,0(r2)
    8cdc:	00087981 	jmpi	8798 <___vfprintf_internal_r>

00008ce0 <__sfvwrite_small_dev>:
    8ce0:	2880000b 	ldhu	r2,0(r5)
    8ce4:	1080020c 	andi	r2,r2,8
    8ce8:	10002126 	beq	r2,zero,8d70 <__sfvwrite_small_dev+0x90>
    8cec:	2880008f 	ldh	r2,2(r5)
    8cf0:	defffa04 	addi	sp,sp,-24
    8cf4:	dc000015 	stw	r16,0(sp)
    8cf8:	dfc00515 	stw	ra,20(sp)
    8cfc:	dd000415 	stw	r20,16(sp)
    8d00:	dcc00315 	stw	r19,12(sp)
    8d04:	dc800215 	stw	r18,8(sp)
    8d08:	dc400115 	stw	r17,4(sp)
    8d0c:	2821883a 	mov	r16,r5
    8d10:	10001216 	blt	r2,zero,8d5c <__sfvwrite_small_dev+0x7c>
    8d14:	2027883a 	mov	r19,r4
    8d18:	3025883a 	mov	r18,r6
    8d1c:	3823883a 	mov	r17,r7
    8d20:	05010004 	movi	r20,1024
    8d24:	04400b0e 	bge	zero,r17,8d54 <__sfvwrite_small_dev+0x74>
    8d28:	880f883a 	mov	r7,r17
    8d2c:	a440010e 	bge	r20,r17,8d34 <__sfvwrite_small_dev+0x54>
    8d30:	01c10004 	movi	r7,1024
    8d34:	8140008f 	ldh	r5,2(r16)
    8d38:	900d883a 	mov	r6,r18
    8d3c:	9809883a 	mov	r4,r19
    8d40:	0008e440 	call	8e44 <_write_r>
    8d44:	0080050e 	bge	zero,r2,8d5c <__sfvwrite_small_dev+0x7c>
    8d48:	88a3c83a 	sub	r17,r17,r2
    8d4c:	90a5883a 	add	r18,r18,r2
    8d50:	003ff406 	br	8d24 <_gp+0xffff67bc>
    8d54:	0005883a 	mov	r2,zero
    8d58:	00000706 	br	8d78 <__sfvwrite_small_dev+0x98>
    8d5c:	8080000b 	ldhu	r2,0(r16)
    8d60:	10801014 	ori	r2,r2,64
    8d64:	8080000d 	sth	r2,0(r16)
    8d68:	00bfffc4 	movi	r2,-1
    8d6c:	00000206 	br	8d78 <__sfvwrite_small_dev+0x98>
    8d70:	00bfffc4 	movi	r2,-1
    8d74:	f800283a 	ret
    8d78:	dfc00517 	ldw	ra,20(sp)
    8d7c:	dd000417 	ldw	r20,16(sp)
    8d80:	dcc00317 	ldw	r19,12(sp)
    8d84:	dc800217 	ldw	r18,8(sp)
    8d88:	dc400117 	ldw	r17,4(sp)
    8d8c:	dc000017 	ldw	r16,0(sp)
    8d90:	dec00604 	addi	sp,sp,24
    8d94:	f800283a 	ret

00008d98 <putc>:
    8d98:	defffd04 	addi	sp,sp,-12
    8d9c:	00800074 	movhi	r2,1
    8da0:	dc000115 	stw	r16,4(sp)
    8da4:	dfc00215 	stw	ra,8(sp)
    8da8:	10a33804 	addi	r2,r2,-29472
    8dac:	28800115 	stw	r2,4(r5)
    8db0:	00800074 	movhi	r2,1
    8db4:	10a95b04 	addi	r2,r2,-23188
    8db8:	d9000005 	stb	r4,0(sp)
    8dbc:	2021883a 	mov	r16,r4
    8dc0:	11000017 	ldw	r4,0(r2)
    8dc4:	01c00044 	movi	r7,1
    8dc8:	d80d883a 	mov	r6,sp
    8dcc:	0008ce00 	call	8ce0 <__sfvwrite_small_dev>
    8dd0:	00ffffc4 	movi	r3,-1
    8dd4:	10c00126 	beq	r2,r3,8ddc <putc+0x44>
    8dd8:	8005883a 	mov	r2,r16
    8ddc:	dfc00217 	ldw	ra,8(sp)
    8de0:	dc000117 	ldw	r16,4(sp)
    8de4:	dec00304 	addi	sp,sp,12
    8de8:	f800283a 	ret

00008dec <_putc_r>:
    8dec:	defffd04 	addi	sp,sp,-12
    8df0:	00800074 	movhi	r2,1
    8df4:	dc000115 	stw	r16,4(sp)
    8df8:	dfc00215 	stw	ra,8(sp)
    8dfc:	10a33804 	addi	r2,r2,-29472
    8e00:	30800115 	stw	r2,4(r6)
    8e04:	00800074 	movhi	r2,1
    8e08:	10a95b04 	addi	r2,r2,-23188
    8e0c:	11000017 	ldw	r4,0(r2)
    8e10:	2821883a 	mov	r16,r5
    8e14:	01c00044 	movi	r7,1
    8e18:	300b883a 	mov	r5,r6
    8e1c:	d80d883a 	mov	r6,sp
    8e20:	dc000005 	stb	r16,0(sp)
    8e24:	0008ce00 	call	8ce0 <__sfvwrite_small_dev>
    8e28:	00ffffc4 	movi	r3,-1
    8e2c:	10c00126 	beq	r2,r3,8e34 <_putc_r+0x48>
    8e30:	8005883a 	mov	r2,r16
    8e34:	dfc00217 	ldw	ra,8(sp)
    8e38:	dc000117 	ldw	r16,4(sp)
    8e3c:	dec00304 	addi	sp,sp,12
    8e40:	f800283a 	ret

00008e44 <_write_r>:
    8e44:	defffd04 	addi	sp,sp,-12
    8e48:	dc000015 	stw	r16,0(sp)
    8e4c:	04000074 	movhi	r16,1
    8e50:	dc400115 	stw	r17,4(sp)
    8e54:	842a1904 	addi	r16,r16,-22428
    8e58:	2023883a 	mov	r17,r4
    8e5c:	2809883a 	mov	r4,r5
    8e60:	300b883a 	mov	r5,r6
    8e64:	380d883a 	mov	r6,r7
    8e68:	dfc00215 	stw	ra,8(sp)
    8e6c:	80000015 	stw	zero,0(r16)
    8e70:	000909c0 	call	909c <write>
    8e74:	00ffffc4 	movi	r3,-1
    8e78:	10c0031e 	bne	r2,r3,8e88 <_write_r+0x44>
    8e7c:	80c00017 	ldw	r3,0(r16)
    8e80:	18000126 	beq	r3,zero,8e88 <_write_r+0x44>
    8e84:	88c00015 	stw	r3,0(r17)
    8e88:	dfc00217 	ldw	ra,8(sp)
    8e8c:	dc400117 	ldw	r17,4(sp)
    8e90:	dc000017 	ldw	r16,0(sp)
    8e94:	dec00304 	addi	sp,sp,12
    8e98:	f800283a 	ret

00008e9c <__mulsi3>:
    8e9c:	0005883a 	mov	r2,zero
    8ea0:	20000726 	beq	r4,zero,8ec0 <__mulsi3+0x24>
    8ea4:	20c0004c 	andi	r3,r4,1
    8ea8:	2008d07a 	srli	r4,r4,1
    8eac:	18000126 	beq	r3,zero,8eb4 <__mulsi3+0x18>
    8eb0:	1145883a 	add	r2,r2,r5
    8eb4:	294b883a 	add	r5,r5,r5
    8eb8:	203ffa1e 	bne	r4,zero,8ea4 <_gp+0xffff693c>
    8ebc:	f800283a 	ret
    8ec0:	f800283a 	ret

00008ec4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8ec4:	defffc04 	addi	sp,sp,-16
    8ec8:	df000315 	stw	fp,12(sp)
    8ecc:	df000304 	addi	fp,sp,12
    8ed0:	e13ffd15 	stw	r4,-12(fp)
    8ed4:	e17ffe15 	stw	r5,-8(fp)
    8ed8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8edc:	e0fffe17 	ldw	r3,-8(fp)
    8ee0:	e0bffd17 	ldw	r2,-12(fp)
    8ee4:	18800c26 	beq	r3,r2,8f18 <alt_load_section+0x54>
  {
    while( to != end )
    8ee8:	00000806 	br	8f0c <alt_load_section+0x48>
    {
      *to++ = *from++;
    8eec:	e0bffe17 	ldw	r2,-8(fp)
    8ef0:	10c00104 	addi	r3,r2,4
    8ef4:	e0fffe15 	stw	r3,-8(fp)
    8ef8:	e0fffd17 	ldw	r3,-12(fp)
    8efc:	19000104 	addi	r4,r3,4
    8f00:	e13ffd15 	stw	r4,-12(fp)
    8f04:	18c00017 	ldw	r3,0(r3)
    8f08:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8f0c:	e0fffe17 	ldw	r3,-8(fp)
    8f10:	e0bfff17 	ldw	r2,-4(fp)
    8f14:	18bff51e 	bne	r3,r2,8eec <_gp+0xffff6984>
    {
      *to++ = *from++;
    }
  }
}
    8f18:	0001883a 	nop
    8f1c:	e037883a 	mov	sp,fp
    8f20:	df000017 	ldw	fp,0(sp)
    8f24:	dec00104 	addi	sp,sp,4
    8f28:	f800283a 	ret

00008f2c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8f2c:	defffe04 	addi	sp,sp,-8
    8f30:	dfc00115 	stw	ra,4(sp)
    8f34:	df000015 	stw	fp,0(sp)
    8f38:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8f3c:	01800074 	movhi	r6,1
    8f40:	31a96204 	addi	r6,r6,-23160
    8f44:	01400074 	movhi	r5,1
    8f48:	2968ad04 	addi	r5,r5,-23884
    8f4c:	01000074 	movhi	r4,1
    8f50:	21296204 	addi	r4,r4,-23160
    8f54:	0008ec40 	call	8ec4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8f58:	01800074 	movhi	r6,1
    8f5c:	31a00804 	addi	r6,r6,-32736
    8f60:	01400074 	movhi	r5,1
    8f64:	29600804 	addi	r5,r5,-32736
    8f68:	01000074 	movhi	r4,1
    8f6c:	21200804 	addi	r4,r4,-32736
    8f70:	0008ec40 	call	8ec4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8f74:	01800074 	movhi	r6,1
    8f78:	31a8ad04 	addi	r6,r6,-23884
    8f7c:	01400074 	movhi	r5,1
    8f80:	29686704 	addi	r5,r5,-24164
    8f84:	01000074 	movhi	r4,1
    8f88:	21286704 	addi	r4,r4,-24164
    8f8c:	0008ec40 	call	8ec4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8f90:	00097040 	call	9704 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8f94:	00098440 	call	9844 <alt_icache_flush_all>
}
    8f98:	0001883a 	nop
    8f9c:	e037883a 	mov	sp,fp
    8fa0:	dfc00117 	ldw	ra,4(sp)
    8fa4:	df000017 	ldw	fp,0(sp)
    8fa8:	dec00204 	addi	sp,sp,8
    8fac:	f800283a 	ret

00008fb0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8fb0:	defffd04 	addi	sp,sp,-12
    8fb4:	dfc00215 	stw	ra,8(sp)
    8fb8:	df000115 	stw	fp,4(sp)
    8fbc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8fc0:	0009883a 	mov	r4,zero
    8fc4:	00091d40 	call	91d4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8fc8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8fcc:	000920c0 	call	920c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8fd0:	01800074 	movhi	r6,1
    8fd4:	31a8a004 	addi	r6,r6,-23936
    8fd8:	01400074 	movhi	r5,1
    8fdc:	2968a004 	addi	r5,r5,-23936
    8fe0:	01000074 	movhi	r4,1
    8fe4:	2128a004 	addi	r4,r4,-23936
    8fe8:	00099480 	call	9948 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8fec:	d0a0c017 	ldw	r2,-32000(gp)
    8ff0:	d0e0c117 	ldw	r3,-31996(gp)
    8ff4:	d120c217 	ldw	r4,-31992(gp)
    8ff8:	200d883a 	mov	r6,r4
    8ffc:	180b883a 	mov	r5,r3
    9000:	1009883a 	mov	r4,r2
    9004:	00083040 	call	8304 <main>
    9008:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    900c:	01000044 	movi	r4,1
    9010:	000962c0 	call	962c <close>
  exit (result);
    9014:	e13fff17 	ldw	r4,-4(fp)
    9018:	0009f880 	call	9f88 <exit>

0000901c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    901c:	defffd04 	addi	sp,sp,-12
    9020:	dfc00215 	stw	ra,8(sp)
    9024:	df000115 	stw	fp,4(sp)
    9028:	df000104 	addi	fp,sp,4
    902c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    9030:	e13fff17 	ldw	r4,-4(fp)
    9034:	00094840 	call	9484 <alt_busy_sleep>
}
    9038:	e037883a 	mov	sp,fp
    903c:	dfc00117 	ldw	ra,4(sp)
    9040:	df000017 	ldw	fp,0(sp)
    9044:	dec00204 	addi	sp,sp,8
    9048:	f800283a 	ret

0000904c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    904c:	defffe04 	addi	sp,sp,-8
    9050:	dfc00115 	stw	ra,4(sp)
    9054:	df000015 	stw	fp,0(sp)
    9058:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    905c:	00800074 	movhi	r2,1
    9060:	10a96104 	addi	r2,r2,-23164
    9064:	10800017 	ldw	r2,0(r2)
    9068:	10000526 	beq	r2,zero,9080 <alt_get_errno+0x34>
    906c:	00800074 	movhi	r2,1
    9070:	10a96104 	addi	r2,r2,-23164
    9074:	10800017 	ldw	r2,0(r2)
    9078:	103ee83a 	callr	r2
    907c:	00000206 	br	9088 <alt_get_errno+0x3c>
    9080:	00800074 	movhi	r2,1
    9084:	10aa1904 	addi	r2,r2,-22428
}
    9088:	e037883a 	mov	sp,fp
    908c:	dfc00117 	ldw	ra,4(sp)
    9090:	df000017 	ldw	fp,0(sp)
    9094:	dec00204 	addi	sp,sp,8
    9098:	f800283a 	ret

0000909c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    909c:	defff904 	addi	sp,sp,-28
    90a0:	dfc00615 	stw	ra,24(sp)
    90a4:	df000515 	stw	fp,20(sp)
    90a8:	df000504 	addi	fp,sp,20
    90ac:	e13ffd15 	stw	r4,-12(fp)
    90b0:	e17ffe15 	stw	r5,-8(fp)
    90b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    90b8:	e0bffd17 	ldw	r2,-12(fp)
    90bc:	10000816 	blt	r2,zero,90e0 <write+0x44>
    90c0:	01400304 	movi	r5,12
    90c4:	e13ffd17 	ldw	r4,-12(fp)
    90c8:	0008e9c0 	call	8e9c <__mulsi3>
    90cc:	1007883a 	mov	r3,r2
    90d0:	00800074 	movhi	r2,1
    90d4:	10a8fa04 	addi	r2,r2,-23576
    90d8:	1885883a 	add	r2,r3,r2
    90dc:	00000106 	br	90e4 <write+0x48>
    90e0:	0005883a 	mov	r2,zero
    90e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    90e8:	e0bffb17 	ldw	r2,-20(fp)
    90ec:	10002126 	beq	r2,zero,9174 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    90f0:	e0bffb17 	ldw	r2,-20(fp)
    90f4:	10800217 	ldw	r2,8(r2)
    90f8:	108000cc 	andi	r2,r2,3
    90fc:	10001826 	beq	r2,zero,9160 <write+0xc4>
    9100:	e0bffb17 	ldw	r2,-20(fp)
    9104:	10800017 	ldw	r2,0(r2)
    9108:	10800617 	ldw	r2,24(r2)
    910c:	10001426 	beq	r2,zero,9160 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9110:	e0bffb17 	ldw	r2,-20(fp)
    9114:	10800017 	ldw	r2,0(r2)
    9118:	10800617 	ldw	r2,24(r2)
    911c:	e0ffff17 	ldw	r3,-4(fp)
    9120:	180d883a 	mov	r6,r3
    9124:	e17ffe17 	ldw	r5,-8(fp)
    9128:	e13ffb17 	ldw	r4,-20(fp)
    912c:	103ee83a 	callr	r2
    9130:	e0bffc15 	stw	r2,-16(fp)
    9134:	e0bffc17 	ldw	r2,-16(fp)
    9138:	1000070e 	bge	r2,zero,9158 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    913c:	000904c0 	call	904c <alt_get_errno>
    9140:	1007883a 	mov	r3,r2
    9144:	e0bffc17 	ldw	r2,-16(fp)
    9148:	0085c83a 	sub	r2,zero,r2
    914c:	18800015 	stw	r2,0(r3)
        return -1;
    9150:	00bfffc4 	movi	r2,-1
    9154:	00000c06 	br	9188 <write+0xec>
      }
      return rval;
    9158:	e0bffc17 	ldw	r2,-16(fp)
    915c:	00000a06 	br	9188 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9160:	000904c0 	call	904c <alt_get_errno>
    9164:	1007883a 	mov	r3,r2
    9168:	00800344 	movi	r2,13
    916c:	18800015 	stw	r2,0(r3)
    9170:	00000406 	br	9184 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9174:	000904c0 	call	904c <alt_get_errno>
    9178:	1007883a 	mov	r3,r2
    917c:	00801444 	movi	r2,81
    9180:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9184:	00bfffc4 	movi	r2,-1
}
    9188:	e037883a 	mov	sp,fp
    918c:	dfc00117 	ldw	ra,4(sp)
    9190:	df000017 	ldw	fp,0(sp)
    9194:	dec00204 	addi	sp,sp,8
    9198:	f800283a 	ret

0000919c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    919c:	defffd04 	addi	sp,sp,-12
    91a0:	dfc00215 	stw	ra,8(sp)
    91a4:	df000115 	stw	fp,4(sp)
    91a8:	df000104 	addi	fp,sp,4
    91ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    91b0:	01400074 	movhi	r5,1
    91b4:	29695e04 	addi	r5,r5,-23176
    91b8:	e13fff17 	ldw	r4,-4(fp)
    91bc:	00097a00 	call	97a0 <alt_dev_llist_insert>
}
    91c0:	e037883a 	mov	sp,fp
    91c4:	dfc00117 	ldw	ra,4(sp)
    91c8:	df000017 	ldw	fp,0(sp)
    91cc:	dec00204 	addi	sp,sp,8
    91d0:	f800283a 	ret

000091d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    91d4:	defffd04 	addi	sp,sp,-12
    91d8:	dfc00215 	stw	ra,8(sp)
    91dc:	df000115 	stw	fp,4(sp)
    91e0:	df000104 	addi	fp,sp,4
    91e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    91e8:	0009cec0 	call	9cec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    91ec:	00800044 	movi	r2,1
    91f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    91f4:	0001883a 	nop
    91f8:	e037883a 	mov	sp,fp
    91fc:	dfc00117 	ldw	ra,4(sp)
    9200:	df000017 	ldw	fp,0(sp)
    9204:	dec00204 	addi	sp,sp,8
    9208:	f800283a 	ret

0000920c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    920c:	defffe04 	addi	sp,sp,-8
    9210:	dfc00115 	stw	ra,4(sp)
    9214:	df000015 	stw	fp,0(sp)
    9218:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    921c:	01000074 	movhi	r4,1
    9220:	2128e504 	addi	r4,r4,-23660
    9224:	000919c0 	call	919c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    9228:	0001883a 	nop
}
    922c:	0001883a 	nop
    9230:	e037883a 	mov	sp,fp
    9234:	dfc00117 	ldw	ra,4(sp)
    9238:	df000017 	ldw	fp,0(sp)
    923c:	dec00204 	addi	sp,sp,8
    9240:	f800283a 	ret

00009244 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9244:	defffa04 	addi	sp,sp,-24
    9248:	dfc00515 	stw	ra,20(sp)
    924c:	df000415 	stw	fp,16(sp)
    9250:	df000404 	addi	fp,sp,16
    9254:	e13ffd15 	stw	r4,-12(fp)
    9258:	e17ffe15 	stw	r5,-8(fp)
    925c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9260:	e0bffd17 	ldw	r2,-12(fp)
    9264:	10800017 	ldw	r2,0(r2)
    9268:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    926c:	e0bffc17 	ldw	r2,-16(fp)
    9270:	10c00a04 	addi	r3,r2,40
    9274:	e0bffd17 	ldw	r2,-12(fp)
    9278:	10800217 	ldw	r2,8(r2)
    927c:	100f883a 	mov	r7,r2
    9280:	e1bfff17 	ldw	r6,-4(fp)
    9284:	e17ffe17 	ldw	r5,-8(fp)
    9288:	1809883a 	mov	r4,r3
    928c:	00093040 	call	9304 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9290:	e037883a 	mov	sp,fp
    9294:	dfc00117 	ldw	ra,4(sp)
    9298:	df000017 	ldw	fp,0(sp)
    929c:	dec00204 	addi	sp,sp,8
    92a0:	f800283a 	ret

000092a4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    92a4:	defffa04 	addi	sp,sp,-24
    92a8:	dfc00515 	stw	ra,20(sp)
    92ac:	df000415 	stw	fp,16(sp)
    92b0:	df000404 	addi	fp,sp,16
    92b4:	e13ffd15 	stw	r4,-12(fp)
    92b8:	e17ffe15 	stw	r5,-8(fp)
    92bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    92c0:	e0bffd17 	ldw	r2,-12(fp)
    92c4:	10800017 	ldw	r2,0(r2)
    92c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    92cc:	e0bffc17 	ldw	r2,-16(fp)
    92d0:	10c00a04 	addi	r3,r2,40
    92d4:	e0bffd17 	ldw	r2,-12(fp)
    92d8:	10800217 	ldw	r2,8(r2)
    92dc:	100f883a 	mov	r7,r2
    92e0:	e1bfff17 	ldw	r6,-4(fp)
    92e4:	e17ffe17 	ldw	r5,-8(fp)
    92e8:	1809883a 	mov	r4,r3
    92ec:	00093f00 	call	93f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    92f0:	e037883a 	mov	sp,fp
    92f4:	dfc00117 	ldw	ra,4(sp)
    92f8:	df000017 	ldw	fp,0(sp)
    92fc:	dec00204 	addi	sp,sp,8
    9300:	f800283a 	ret

00009304 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9304:	defff704 	addi	sp,sp,-36
    9308:	df000815 	stw	fp,32(sp)
    930c:	df000804 	addi	fp,sp,32
    9310:	e13ffc15 	stw	r4,-16(fp)
    9314:	e17ffd15 	stw	r5,-12(fp)
    9318:	e1bffe15 	stw	r6,-8(fp)
    931c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9320:	e0bffc17 	ldw	r2,-16(fp)
    9324:	10800017 	ldw	r2,0(r2)
    9328:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    932c:	e0bffd17 	ldw	r2,-12(fp)
    9330:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    9334:	e0bffe17 	ldw	r2,-8(fp)
    9338:	e0fffd17 	ldw	r3,-12(fp)
    933c:	1885883a 	add	r2,r3,r2
    9340:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9344:	00001206 	br	9390 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9348:	e0bff917 	ldw	r2,-28(fp)
    934c:	10800037 	ldwio	r2,0(r2)
    9350:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9354:	e0bffb17 	ldw	r2,-20(fp)
    9358:	10a0000c 	andi	r2,r2,32768
    935c:	10000626 	beq	r2,zero,9378 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9360:	e0bff817 	ldw	r2,-32(fp)
    9364:	10c00044 	addi	r3,r2,1
    9368:	e0fff815 	stw	r3,-32(fp)
    936c:	e0fffb17 	ldw	r3,-20(fp)
    9370:	10c00005 	stb	r3,0(r2)
    9374:	00000606 	br	9390 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    9378:	e0fff817 	ldw	r3,-32(fp)
    937c:	e0bffd17 	ldw	r2,-12(fp)
    9380:	1880071e 	bne	r3,r2,93a0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    9384:	e0bfff17 	ldw	r2,-4(fp)
    9388:	1090000c 	andi	r2,r2,16384
    938c:	1000061e 	bne	r2,zero,93a8 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9390:	e0fff817 	ldw	r3,-32(fp)
    9394:	e0bffa17 	ldw	r2,-24(fp)
    9398:	18bfeb36 	bltu	r3,r2,9348 <_gp+0xffff6de0>
    939c:	00000306 	br	93ac <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    93a0:	0001883a 	nop
    93a4:	00000106 	br	93ac <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    93a8:	0001883a 	nop
    
  }

  if (ptr != buffer)
    93ac:	e0fff817 	ldw	r3,-32(fp)
    93b0:	e0bffd17 	ldw	r2,-12(fp)
    93b4:	18800426 	beq	r3,r2,93c8 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    93b8:	e0fff817 	ldw	r3,-32(fp)
    93bc:	e0bffd17 	ldw	r2,-12(fp)
    93c0:	1885c83a 	sub	r2,r3,r2
    93c4:	00000606 	br	93e0 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    93c8:	e0bfff17 	ldw	r2,-4(fp)
    93cc:	1090000c 	andi	r2,r2,16384
    93d0:	10000226 	beq	r2,zero,93dc <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    93d4:	00bffd44 	movi	r2,-11
    93d8:	00000106 	br	93e0 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    93dc:	00bffec4 	movi	r2,-5
}
    93e0:	e037883a 	mov	sp,fp
    93e4:	df000017 	ldw	fp,0(sp)
    93e8:	dec00104 	addi	sp,sp,4
    93ec:	f800283a 	ret

000093f0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    93f0:	defff904 	addi	sp,sp,-28
    93f4:	df000615 	stw	fp,24(sp)
    93f8:	df000604 	addi	fp,sp,24
    93fc:	e13ffc15 	stw	r4,-16(fp)
    9400:	e17ffd15 	stw	r5,-12(fp)
    9404:	e1bffe15 	stw	r6,-8(fp)
    9408:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    940c:	e0bffc17 	ldw	r2,-16(fp)
    9410:	10800017 	ldw	r2,0(r2)
    9414:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9418:	e0bffe17 	ldw	r2,-8(fp)
    941c:	e0fffd17 	ldw	r3,-12(fp)
    9420:	1885883a 	add	r2,r3,r2
    9424:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    9428:	00000e06 	br	9464 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    942c:	e0bffa17 	ldw	r2,-24(fp)
    9430:	10800104 	addi	r2,r2,4
    9434:	10800037 	ldwio	r2,0(r2)
    9438:	10bfffec 	andhi	r2,r2,65535
    943c:	10000926 	beq	r2,zero,9464 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9440:	e0fffa17 	ldw	r3,-24(fp)
    9444:	e0bffd17 	ldw	r2,-12(fp)
    9448:	11000044 	addi	r4,r2,1
    944c:	e13ffd15 	stw	r4,-12(fp)
    9450:	10800003 	ldbu	r2,0(r2)
    9454:	10803fcc 	andi	r2,r2,255
    9458:	1080201c 	xori	r2,r2,128
    945c:	10bfe004 	addi	r2,r2,-128
    9460:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9464:	e0fffd17 	ldw	r3,-12(fp)
    9468:	e0bffb17 	ldw	r2,-20(fp)
    946c:	18bfef36 	bltu	r3,r2,942c <_gp+0xffff6ec4>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9470:	e0bffe17 	ldw	r2,-8(fp)
}
    9474:	e037883a 	mov	sp,fp
    9478:	df000017 	ldw	fp,0(sp)
    947c:	dec00104 	addi	sp,sp,4
    9480:	f800283a 	ret

00009484 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9484:	defffa04 	addi	sp,sp,-24
    9488:	dfc00515 	stw	ra,20(sp)
    948c:	df000415 	stw	fp,16(sp)
    9490:	df000404 	addi	fp,sp,16
    9494:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    9498:	00800244 	movi	r2,9
    949c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    94a0:	014003f4 	movhi	r5,15
    94a4:	29509004 	addi	r5,r5,16960
    94a8:	e13ffd17 	ldw	r4,-12(fp)
    94ac:	0008e9c0 	call	8e9c <__mulsi3>
    94b0:	100b883a 	mov	r5,r2
    94b4:	0100bef4 	movhi	r4,763
    94b8:	213c2004 	addi	r4,r4,-3968
    94bc:	00085140 	call	8514 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    94c0:	100b883a 	mov	r5,r2
    94c4:	01200034 	movhi	r4,32768
    94c8:	213fffc4 	addi	r4,r4,-1
    94cc:	00085140 	call	8514 <__udivsi3>
    94d0:	100b883a 	mov	r5,r2
    94d4:	e13fff17 	ldw	r4,-4(fp)
    94d8:	00085140 	call	8514 <__udivsi3>
    94dc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    94e0:	e0bffe17 	ldw	r2,-8(fp)
    94e4:	10002a26 	beq	r2,zero,9590 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    94e8:	e03ffc15 	stw	zero,-16(fp)
    94ec:	00001706 	br	954c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    94f0:	00a00034 	movhi	r2,32768
    94f4:	10bfffc4 	addi	r2,r2,-1
    94f8:	10bfffc4 	addi	r2,r2,-1
    94fc:	103ffe1e 	bne	r2,zero,94f8 <_gp+0xffff6f90>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    9500:	014003f4 	movhi	r5,15
    9504:	29509004 	addi	r5,r5,16960
    9508:	e13ffd17 	ldw	r4,-12(fp)
    950c:	0008e9c0 	call	8e9c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9510:	100b883a 	mov	r5,r2
    9514:	0100bef4 	movhi	r4,763
    9518:	213c2004 	addi	r4,r4,-3968
    951c:	00085140 	call	8514 <__udivsi3>
    9520:	100b883a 	mov	r5,r2
    9524:	01200034 	movhi	r4,32768
    9528:	213fffc4 	addi	r4,r4,-1
    952c:	00085140 	call	8514 <__udivsi3>
    9530:	1007883a 	mov	r3,r2
    9534:	e0bfff17 	ldw	r2,-4(fp)
    9538:	10c5c83a 	sub	r2,r2,r3
    953c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9540:	e0bffc17 	ldw	r2,-16(fp)
    9544:	10800044 	addi	r2,r2,1
    9548:	e0bffc15 	stw	r2,-16(fp)
    954c:	e0fffc17 	ldw	r3,-16(fp)
    9550:	e0bffe17 	ldw	r2,-8(fp)
    9554:	18bfe616 	blt	r3,r2,94f0 <_gp+0xffff6f88>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9558:	014003f4 	movhi	r5,15
    955c:	29509004 	addi	r5,r5,16960
    9560:	e13ffd17 	ldw	r4,-12(fp)
    9564:	0008e9c0 	call	8e9c <__mulsi3>
    9568:	100b883a 	mov	r5,r2
    956c:	0100bef4 	movhi	r4,763
    9570:	213c2004 	addi	r4,r4,-3968
    9574:	00085140 	call	8514 <__udivsi3>
    9578:	e17fff17 	ldw	r5,-4(fp)
    957c:	1009883a 	mov	r4,r2
    9580:	0008e9c0 	call	8e9c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9584:	10bfffc4 	addi	r2,r2,-1
    9588:	103ffe1e 	bne	r2,zero,9584 <_gp+0xffff701c>
    958c:	00000d06 	br	95c4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9590:	014003f4 	movhi	r5,15
    9594:	29509004 	addi	r5,r5,16960
    9598:	e13ffd17 	ldw	r4,-12(fp)
    959c:	0008e9c0 	call	8e9c <__mulsi3>
    95a0:	100b883a 	mov	r5,r2
    95a4:	0100bef4 	movhi	r4,763
    95a8:	213c2004 	addi	r4,r4,-3968
    95ac:	00085140 	call	8514 <__udivsi3>
    95b0:	e17fff17 	ldw	r5,-4(fp)
    95b4:	1009883a 	mov	r4,r2
    95b8:	0008e9c0 	call	8e9c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    95bc:	10bfffc4 	addi	r2,r2,-1
    95c0:	00bffe16 	blt	zero,r2,95bc <_gp+0xffff7054>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    95c4:	0005883a 	mov	r2,zero
}
    95c8:	e037883a 	mov	sp,fp
    95cc:	dfc00117 	ldw	ra,4(sp)
    95d0:	df000017 	ldw	fp,0(sp)
    95d4:	dec00204 	addi	sp,sp,8
    95d8:	f800283a 	ret

000095dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    95dc:	defffe04 	addi	sp,sp,-8
    95e0:	dfc00115 	stw	ra,4(sp)
    95e4:	df000015 	stw	fp,0(sp)
    95e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    95ec:	00800074 	movhi	r2,1
    95f0:	10a96104 	addi	r2,r2,-23164
    95f4:	10800017 	ldw	r2,0(r2)
    95f8:	10000526 	beq	r2,zero,9610 <alt_get_errno+0x34>
    95fc:	00800074 	movhi	r2,1
    9600:	10a96104 	addi	r2,r2,-23164
    9604:	10800017 	ldw	r2,0(r2)
    9608:	103ee83a 	callr	r2
    960c:	00000206 	br	9618 <alt_get_errno+0x3c>
    9610:	00800074 	movhi	r2,1
    9614:	10aa1904 	addi	r2,r2,-22428
}
    9618:	e037883a 	mov	sp,fp
    961c:	dfc00117 	ldw	ra,4(sp)
    9620:	df000017 	ldw	fp,0(sp)
    9624:	dec00204 	addi	sp,sp,8
    9628:	f800283a 	ret

0000962c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    962c:	defffb04 	addi	sp,sp,-20
    9630:	dfc00415 	stw	ra,16(sp)
    9634:	df000315 	stw	fp,12(sp)
    9638:	df000304 	addi	fp,sp,12
    963c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9640:	e0bfff17 	ldw	r2,-4(fp)
    9644:	10000816 	blt	r2,zero,9668 <close+0x3c>
    9648:	01400304 	movi	r5,12
    964c:	e13fff17 	ldw	r4,-4(fp)
    9650:	0008e9c0 	call	8e9c <__mulsi3>
    9654:	1007883a 	mov	r3,r2
    9658:	00800074 	movhi	r2,1
    965c:	10a8fa04 	addi	r2,r2,-23576
    9660:	1885883a 	add	r2,r3,r2
    9664:	00000106 	br	966c <close+0x40>
    9668:	0005883a 	mov	r2,zero
    966c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9670:	e0bffd17 	ldw	r2,-12(fp)
    9674:	10001926 	beq	r2,zero,96dc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9678:	e0bffd17 	ldw	r2,-12(fp)
    967c:	10800017 	ldw	r2,0(r2)
    9680:	10800417 	ldw	r2,16(r2)
    9684:	10000626 	beq	r2,zero,96a0 <close+0x74>
    9688:	e0bffd17 	ldw	r2,-12(fp)
    968c:	10800017 	ldw	r2,0(r2)
    9690:	10800417 	ldw	r2,16(r2)
    9694:	e13ffd17 	ldw	r4,-12(fp)
    9698:	103ee83a 	callr	r2
    969c:	00000106 	br	96a4 <close+0x78>
    96a0:	0005883a 	mov	r2,zero
    96a4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    96a8:	e13fff17 	ldw	r4,-4(fp)
    96ac:	0009c680 	call	9c68 <alt_release_fd>
    if (rval < 0)
    96b0:	e0bffe17 	ldw	r2,-8(fp)
    96b4:	1000070e 	bge	r2,zero,96d4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    96b8:	00095dc0 	call	95dc <alt_get_errno>
    96bc:	1007883a 	mov	r3,r2
    96c0:	e0bffe17 	ldw	r2,-8(fp)
    96c4:	0085c83a 	sub	r2,zero,r2
    96c8:	18800015 	stw	r2,0(r3)
      return -1;
    96cc:	00bfffc4 	movi	r2,-1
    96d0:	00000706 	br	96f0 <close+0xc4>
    }
    return 0;
    96d4:	0005883a 	mov	r2,zero
    96d8:	00000506 	br	96f0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    96dc:	00095dc0 	call	95dc <alt_get_errno>
    96e0:	1007883a 	mov	r3,r2
    96e4:	00801444 	movi	r2,81
    96e8:	18800015 	stw	r2,0(r3)
    return -1;
    96ec:	00bfffc4 	movi	r2,-1
  }
}
    96f0:	e037883a 	mov	sp,fp
    96f4:	dfc00117 	ldw	ra,4(sp)
    96f8:	df000017 	ldw	fp,0(sp)
    96fc:	dec00204 	addi	sp,sp,8
    9700:	f800283a 	ret

00009704 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9704:	deffff04 	addi	sp,sp,-4
    9708:	df000015 	stw	fp,0(sp)
    970c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9710:	0001883a 	nop
    9714:	e037883a 	mov	sp,fp
    9718:	df000017 	ldw	fp,0(sp)
    971c:	dec00104 	addi	sp,sp,4
    9720:	f800283a 	ret

00009724 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9724:	defffc04 	addi	sp,sp,-16
    9728:	df000315 	stw	fp,12(sp)
    972c:	df000304 	addi	fp,sp,12
    9730:	e13ffd15 	stw	r4,-12(fp)
    9734:	e17ffe15 	stw	r5,-8(fp)
    9738:	e1bfff15 	stw	r6,-4(fp)
  return len;
    973c:	e0bfff17 	ldw	r2,-4(fp)
}
    9740:	e037883a 	mov	sp,fp
    9744:	df000017 	ldw	fp,0(sp)
    9748:	dec00104 	addi	sp,sp,4
    974c:	f800283a 	ret

00009750 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9750:	defffe04 	addi	sp,sp,-8
    9754:	dfc00115 	stw	ra,4(sp)
    9758:	df000015 	stw	fp,0(sp)
    975c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9760:	00800074 	movhi	r2,1
    9764:	10a96104 	addi	r2,r2,-23164
    9768:	10800017 	ldw	r2,0(r2)
    976c:	10000526 	beq	r2,zero,9784 <alt_get_errno+0x34>
    9770:	00800074 	movhi	r2,1
    9774:	10a96104 	addi	r2,r2,-23164
    9778:	10800017 	ldw	r2,0(r2)
    977c:	103ee83a 	callr	r2
    9780:	00000206 	br	978c <alt_get_errno+0x3c>
    9784:	00800074 	movhi	r2,1
    9788:	10aa1904 	addi	r2,r2,-22428
}
    978c:	e037883a 	mov	sp,fp
    9790:	dfc00117 	ldw	ra,4(sp)
    9794:	df000017 	ldw	fp,0(sp)
    9798:	dec00204 	addi	sp,sp,8
    979c:	f800283a 	ret

000097a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    97a0:	defffa04 	addi	sp,sp,-24
    97a4:	dfc00515 	stw	ra,20(sp)
    97a8:	df000415 	stw	fp,16(sp)
    97ac:	df000404 	addi	fp,sp,16
    97b0:	e13ffe15 	stw	r4,-8(fp)
    97b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    97b8:	e0bffe17 	ldw	r2,-8(fp)
    97bc:	10000326 	beq	r2,zero,97cc <alt_dev_llist_insert+0x2c>
    97c0:	e0bffe17 	ldw	r2,-8(fp)
    97c4:	10800217 	ldw	r2,8(r2)
    97c8:	1000061e 	bne	r2,zero,97e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    97cc:	00097500 	call	9750 <alt_get_errno>
    97d0:	1007883a 	mov	r3,r2
    97d4:	00800584 	movi	r2,22
    97d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    97dc:	00bffa84 	movi	r2,-22
    97e0:	00001306 	br	9830 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    97e4:	e0bffe17 	ldw	r2,-8(fp)
    97e8:	e0ffff17 	ldw	r3,-4(fp)
    97ec:	e0fffc15 	stw	r3,-16(fp)
    97f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    97f4:	e0bffd17 	ldw	r2,-12(fp)
    97f8:	e0fffc17 	ldw	r3,-16(fp)
    97fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9800:	e0bffc17 	ldw	r2,-16(fp)
    9804:	10c00017 	ldw	r3,0(r2)
    9808:	e0bffd17 	ldw	r2,-12(fp)
    980c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9810:	e0bffc17 	ldw	r2,-16(fp)
    9814:	10800017 	ldw	r2,0(r2)
    9818:	e0fffd17 	ldw	r3,-12(fp)
    981c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9820:	e0bffc17 	ldw	r2,-16(fp)
    9824:	e0fffd17 	ldw	r3,-12(fp)
    9828:	10c00015 	stw	r3,0(r2)

  return 0;  
    982c:	0005883a 	mov	r2,zero
}
    9830:	e037883a 	mov	sp,fp
    9834:	dfc00117 	ldw	ra,4(sp)
    9838:	df000017 	ldw	fp,0(sp)
    983c:	dec00204 	addi	sp,sp,8
    9840:	f800283a 	ret

00009844 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9844:	deffff04 	addi	sp,sp,-4
    9848:	df000015 	stw	fp,0(sp)
    984c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9850:	0001883a 	nop
    9854:	e037883a 	mov	sp,fp
    9858:	df000017 	ldw	fp,0(sp)
    985c:	dec00104 	addi	sp,sp,4
    9860:	f800283a 	ret

00009864 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9864:	defff804 	addi	sp,sp,-32
    9868:	dfc00715 	stw	ra,28(sp)
    986c:	df000615 	stw	fp,24(sp)
    9870:	dc000515 	stw	r16,20(sp)
    9874:	df000604 	addi	fp,sp,24
    9878:	e13ffb15 	stw	r4,-20(fp)
    987c:	e17ffc15 	stw	r5,-16(fp)
    9880:	e1bffd15 	stw	r6,-12(fp)
    9884:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    9888:	e1bffe17 	ldw	r6,-8(fp)
    988c:	e17ffd17 	ldw	r5,-12(fp)
    9890:	e13ffc17 	ldw	r4,-16(fp)
    9894:	0009b080 	call	9b08 <open>
    9898:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    989c:	e0bffa17 	ldw	r2,-24(fp)
    98a0:	10002216 	blt	r2,zero,992c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    98a4:	04000074 	movhi	r16,1
    98a8:	8428fa04 	addi	r16,r16,-23576
    98ac:	e0bffa17 	ldw	r2,-24(fp)
    98b0:	01400304 	movi	r5,12
    98b4:	1009883a 	mov	r4,r2
    98b8:	0008e9c0 	call	8e9c <__mulsi3>
    98bc:	8085883a 	add	r2,r16,r2
    98c0:	10c00017 	ldw	r3,0(r2)
    98c4:	e0bffb17 	ldw	r2,-20(fp)
    98c8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    98cc:	04000074 	movhi	r16,1
    98d0:	8428fa04 	addi	r16,r16,-23576
    98d4:	e0bffa17 	ldw	r2,-24(fp)
    98d8:	01400304 	movi	r5,12
    98dc:	1009883a 	mov	r4,r2
    98e0:	0008e9c0 	call	8e9c <__mulsi3>
    98e4:	8085883a 	add	r2,r16,r2
    98e8:	10800104 	addi	r2,r2,4
    98ec:	10c00017 	ldw	r3,0(r2)
    98f0:	e0bffb17 	ldw	r2,-20(fp)
    98f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    98f8:	04000074 	movhi	r16,1
    98fc:	8428fa04 	addi	r16,r16,-23576
    9900:	e0bffa17 	ldw	r2,-24(fp)
    9904:	01400304 	movi	r5,12
    9908:	1009883a 	mov	r4,r2
    990c:	0008e9c0 	call	8e9c <__mulsi3>
    9910:	8085883a 	add	r2,r16,r2
    9914:	10800204 	addi	r2,r2,8
    9918:	10c00017 	ldw	r3,0(r2)
    991c:	e0bffb17 	ldw	r2,-20(fp)
    9920:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9924:	e13ffa17 	ldw	r4,-24(fp)
    9928:	0009c680 	call	9c68 <alt_release_fd>
  }
} 
    992c:	0001883a 	nop
    9930:	e6ffff04 	addi	sp,fp,-4
    9934:	dfc00217 	ldw	ra,8(sp)
    9938:	df000117 	ldw	fp,4(sp)
    993c:	dc000017 	ldw	r16,0(sp)
    9940:	dec00304 	addi	sp,sp,12
    9944:	f800283a 	ret

00009948 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9948:	defffb04 	addi	sp,sp,-20
    994c:	dfc00415 	stw	ra,16(sp)
    9950:	df000315 	stw	fp,12(sp)
    9954:	df000304 	addi	fp,sp,12
    9958:	e13ffd15 	stw	r4,-12(fp)
    995c:	e17ffe15 	stw	r5,-8(fp)
    9960:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9964:	01c07fc4 	movi	r7,511
    9968:	01800044 	movi	r6,1
    996c:	e17ffd17 	ldw	r5,-12(fp)
    9970:	01000074 	movhi	r4,1
    9974:	2128fd04 	addi	r4,r4,-23564
    9978:	00098640 	call	9864 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    997c:	01c07fc4 	movi	r7,511
    9980:	000d883a 	mov	r6,zero
    9984:	e17ffe17 	ldw	r5,-8(fp)
    9988:	01000074 	movhi	r4,1
    998c:	2128fa04 	addi	r4,r4,-23576
    9990:	00098640 	call	9864 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9994:	01c07fc4 	movi	r7,511
    9998:	01800044 	movi	r6,1
    999c:	e17fff17 	ldw	r5,-4(fp)
    99a0:	01000074 	movhi	r4,1
    99a4:	21290004 	addi	r4,r4,-23552
    99a8:	00098640 	call	9864 <alt_open_fd>
}  
    99ac:	0001883a 	nop
    99b0:	e037883a 	mov	sp,fp
    99b4:	dfc00117 	ldw	ra,4(sp)
    99b8:	df000017 	ldw	fp,0(sp)
    99bc:	dec00204 	addi	sp,sp,8
    99c0:	f800283a 	ret

000099c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    99c4:	defffe04 	addi	sp,sp,-8
    99c8:	dfc00115 	stw	ra,4(sp)
    99cc:	df000015 	stw	fp,0(sp)
    99d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    99d4:	00800074 	movhi	r2,1
    99d8:	10a96104 	addi	r2,r2,-23164
    99dc:	10800017 	ldw	r2,0(r2)
    99e0:	10000526 	beq	r2,zero,99f8 <alt_get_errno+0x34>
    99e4:	00800074 	movhi	r2,1
    99e8:	10a96104 	addi	r2,r2,-23164
    99ec:	10800017 	ldw	r2,0(r2)
    99f0:	103ee83a 	callr	r2
    99f4:	00000206 	br	9a00 <alt_get_errno+0x3c>
    99f8:	00800074 	movhi	r2,1
    99fc:	10aa1904 	addi	r2,r2,-22428
}
    9a00:	e037883a 	mov	sp,fp
    9a04:	dfc00117 	ldw	ra,4(sp)
    9a08:	df000017 	ldw	fp,0(sp)
    9a0c:	dec00204 	addi	sp,sp,8
    9a10:	f800283a 	ret

00009a14 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9a14:	defffb04 	addi	sp,sp,-20
    9a18:	dfc00415 	stw	ra,16(sp)
    9a1c:	df000315 	stw	fp,12(sp)
    9a20:	dc000215 	stw	r16,8(sp)
    9a24:	df000304 	addi	fp,sp,12
    9a28:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9a2c:	e0bffe17 	ldw	r2,-8(fp)
    9a30:	10800217 	ldw	r2,8(r2)
    9a34:	10d00034 	orhi	r3,r2,16384
    9a38:	e0bffe17 	ldw	r2,-8(fp)
    9a3c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9a40:	e03ffd15 	stw	zero,-12(fp)
    9a44:	00002306 	br	9ad4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9a48:	04000074 	movhi	r16,1
    9a4c:	8428fa04 	addi	r16,r16,-23576
    9a50:	e0bffd17 	ldw	r2,-12(fp)
    9a54:	01400304 	movi	r5,12
    9a58:	1009883a 	mov	r4,r2
    9a5c:	0008e9c0 	call	8e9c <__mulsi3>
    9a60:	8085883a 	add	r2,r16,r2
    9a64:	10c00017 	ldw	r3,0(r2)
    9a68:	e0bffe17 	ldw	r2,-8(fp)
    9a6c:	10800017 	ldw	r2,0(r2)
    9a70:	1880151e 	bne	r3,r2,9ac8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9a74:	04000074 	movhi	r16,1
    9a78:	8428fa04 	addi	r16,r16,-23576
    9a7c:	e0bffd17 	ldw	r2,-12(fp)
    9a80:	01400304 	movi	r5,12
    9a84:	1009883a 	mov	r4,r2
    9a88:	0008e9c0 	call	8e9c <__mulsi3>
    9a8c:	8085883a 	add	r2,r16,r2
    9a90:	10800204 	addi	r2,r2,8
    9a94:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9a98:	10000b0e 	bge	r2,zero,9ac8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9a9c:	01400304 	movi	r5,12
    9aa0:	e13ffd17 	ldw	r4,-12(fp)
    9aa4:	0008e9c0 	call	8e9c <__mulsi3>
    9aa8:	1007883a 	mov	r3,r2
    9aac:	00800074 	movhi	r2,1
    9ab0:	10a8fa04 	addi	r2,r2,-23576
    9ab4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9ab8:	e0bffe17 	ldw	r2,-8(fp)
    9abc:	18800226 	beq	r3,r2,9ac8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9ac0:	00bffcc4 	movi	r2,-13
    9ac4:	00000a06 	br	9af0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9ac8:	e0bffd17 	ldw	r2,-12(fp)
    9acc:	10800044 	addi	r2,r2,1
    9ad0:	e0bffd15 	stw	r2,-12(fp)
    9ad4:	00800074 	movhi	r2,1
    9ad8:	10a96004 	addi	r2,r2,-23168
    9adc:	10800017 	ldw	r2,0(r2)
    9ae0:	1007883a 	mov	r3,r2
    9ae4:	e0bffd17 	ldw	r2,-12(fp)
    9ae8:	18bfd72e 	bgeu	r3,r2,9a48 <_gp+0xffff74e0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9aec:	0005883a 	mov	r2,zero
}
    9af0:	e6ffff04 	addi	sp,fp,-4
    9af4:	dfc00217 	ldw	ra,8(sp)
    9af8:	df000117 	ldw	fp,4(sp)
    9afc:	dc000017 	ldw	r16,0(sp)
    9b00:	dec00304 	addi	sp,sp,12
    9b04:	f800283a 	ret

00009b08 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9b08:	defff604 	addi	sp,sp,-40
    9b0c:	dfc00915 	stw	ra,36(sp)
    9b10:	df000815 	stw	fp,32(sp)
    9b14:	df000804 	addi	fp,sp,32
    9b18:	e13ffd15 	stw	r4,-12(fp)
    9b1c:	e17ffe15 	stw	r5,-8(fp)
    9b20:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9b24:	00bfffc4 	movi	r2,-1
    9b28:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9b2c:	00bffb44 	movi	r2,-19
    9b30:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9b34:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9b38:	01400074 	movhi	r5,1
    9b3c:	29695e04 	addi	r5,r5,-23176
    9b40:	e13ffd17 	ldw	r4,-12(fp)
    9b44:	0009d100 	call	9d10 <alt_find_dev>
    9b48:	e0bff815 	stw	r2,-32(fp)
    9b4c:	e0bff817 	ldw	r2,-32(fp)
    9b50:	1000051e 	bne	r2,zero,9b68 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9b54:	e13ffd17 	ldw	r4,-12(fp)
    9b58:	0009da00 	call	9da0 <alt_find_file>
    9b5c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9b60:	00800044 	movi	r2,1
    9b64:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9b68:	e0bff817 	ldw	r2,-32(fp)
    9b6c:	10002b26 	beq	r2,zero,9c1c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9b70:	e13ff817 	ldw	r4,-32(fp)
    9b74:	0009eb40 	call	9eb4 <alt_get_fd>
    9b78:	e0bff915 	stw	r2,-28(fp)
    9b7c:	e0bff917 	ldw	r2,-28(fp)
    9b80:	1000030e 	bge	r2,zero,9b90 <open+0x88>
    {
      status = index;
    9b84:	e0bff917 	ldw	r2,-28(fp)
    9b88:	e0bffa15 	stw	r2,-24(fp)
    9b8c:	00002506 	br	9c24 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    9b90:	01400304 	movi	r5,12
    9b94:	e13ff917 	ldw	r4,-28(fp)
    9b98:	0008e9c0 	call	8e9c <__mulsi3>
    9b9c:	1007883a 	mov	r3,r2
    9ba0:	00800074 	movhi	r2,1
    9ba4:	10a8fa04 	addi	r2,r2,-23576
    9ba8:	1885883a 	add	r2,r3,r2
    9bac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9bb0:	e0fffe17 	ldw	r3,-8(fp)
    9bb4:	00900034 	movhi	r2,16384
    9bb8:	10bfffc4 	addi	r2,r2,-1
    9bbc:	1886703a 	and	r3,r3,r2
    9bc0:	e0bffc17 	ldw	r2,-16(fp)
    9bc4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9bc8:	e0bffb17 	ldw	r2,-20(fp)
    9bcc:	1000051e 	bne	r2,zero,9be4 <open+0xdc>
    9bd0:	e13ffc17 	ldw	r4,-16(fp)
    9bd4:	0009a140 	call	9a14 <alt_file_locked>
    9bd8:	e0bffa15 	stw	r2,-24(fp)
    9bdc:	e0bffa17 	ldw	r2,-24(fp)
    9be0:	10001016 	blt	r2,zero,9c24 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9be4:	e0bff817 	ldw	r2,-32(fp)
    9be8:	10800317 	ldw	r2,12(r2)
    9bec:	10000826 	beq	r2,zero,9c10 <open+0x108>
    9bf0:	e0bff817 	ldw	r2,-32(fp)
    9bf4:	10800317 	ldw	r2,12(r2)
    9bf8:	e1ffff17 	ldw	r7,-4(fp)
    9bfc:	e1bffe17 	ldw	r6,-8(fp)
    9c00:	e17ffd17 	ldw	r5,-12(fp)
    9c04:	e13ffc17 	ldw	r4,-16(fp)
    9c08:	103ee83a 	callr	r2
    9c0c:	00000106 	br	9c14 <open+0x10c>
    9c10:	0005883a 	mov	r2,zero
    9c14:	e0bffa15 	stw	r2,-24(fp)
    9c18:	00000206 	br	9c24 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9c1c:	00bffb44 	movi	r2,-19
    9c20:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9c24:	e0bffa17 	ldw	r2,-24(fp)
    9c28:	1000090e 	bge	r2,zero,9c50 <open+0x148>
  {
    alt_release_fd (index);  
    9c2c:	e13ff917 	ldw	r4,-28(fp)
    9c30:	0009c680 	call	9c68 <alt_release_fd>
    ALT_ERRNO = -status;
    9c34:	00099c40 	call	99c4 <alt_get_errno>
    9c38:	1007883a 	mov	r3,r2
    9c3c:	e0bffa17 	ldw	r2,-24(fp)
    9c40:	0085c83a 	sub	r2,zero,r2
    9c44:	18800015 	stw	r2,0(r3)
    return -1;
    9c48:	00bfffc4 	movi	r2,-1
    9c4c:	00000106 	br	9c54 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    9c50:	e0bff917 	ldw	r2,-28(fp)
}
    9c54:	e037883a 	mov	sp,fp
    9c58:	dfc00117 	ldw	ra,4(sp)
    9c5c:	df000017 	ldw	fp,0(sp)
    9c60:	dec00204 	addi	sp,sp,8
    9c64:	f800283a 	ret

00009c68 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9c68:	defffc04 	addi	sp,sp,-16
    9c6c:	dfc00315 	stw	ra,12(sp)
    9c70:	df000215 	stw	fp,8(sp)
    9c74:	dc000115 	stw	r16,4(sp)
    9c78:	df000204 	addi	fp,sp,8
    9c7c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9c80:	e0bffe17 	ldw	r2,-8(fp)
    9c84:	108000d0 	cmplti	r2,r2,3
    9c88:	1000111e 	bne	r2,zero,9cd0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    9c8c:	04000074 	movhi	r16,1
    9c90:	8428fa04 	addi	r16,r16,-23576
    9c94:	e0bffe17 	ldw	r2,-8(fp)
    9c98:	01400304 	movi	r5,12
    9c9c:	1009883a 	mov	r4,r2
    9ca0:	0008e9c0 	call	8e9c <__mulsi3>
    9ca4:	8085883a 	add	r2,r16,r2
    9ca8:	10800204 	addi	r2,r2,8
    9cac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9cb0:	04000074 	movhi	r16,1
    9cb4:	8428fa04 	addi	r16,r16,-23576
    9cb8:	e0bffe17 	ldw	r2,-8(fp)
    9cbc:	01400304 	movi	r5,12
    9cc0:	1009883a 	mov	r4,r2
    9cc4:	0008e9c0 	call	8e9c <__mulsi3>
    9cc8:	8085883a 	add	r2,r16,r2
    9ccc:	10000015 	stw	zero,0(r2)
  }
}
    9cd0:	0001883a 	nop
    9cd4:	e6ffff04 	addi	sp,fp,-4
    9cd8:	dfc00217 	ldw	ra,8(sp)
    9cdc:	df000117 	ldw	fp,4(sp)
    9ce0:	dc000017 	ldw	r16,0(sp)
    9ce4:	dec00304 	addi	sp,sp,12
    9ce8:	f800283a 	ret

00009cec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9cec:	deffff04 	addi	sp,sp,-4
    9cf0:	df000015 	stw	fp,0(sp)
    9cf4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9cf8:	000170fa 	wrctl	ienable,zero
}
    9cfc:	0001883a 	nop
    9d00:	e037883a 	mov	sp,fp
    9d04:	df000017 	ldw	fp,0(sp)
    9d08:	dec00104 	addi	sp,sp,4
    9d0c:	f800283a 	ret

00009d10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9d10:	defffa04 	addi	sp,sp,-24
    9d14:	dfc00515 	stw	ra,20(sp)
    9d18:	df000415 	stw	fp,16(sp)
    9d1c:	df000404 	addi	fp,sp,16
    9d20:	e13ffe15 	stw	r4,-8(fp)
    9d24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9d28:	e0bfff17 	ldw	r2,-4(fp)
    9d2c:	10800017 	ldw	r2,0(r2)
    9d30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9d34:	e13ffe17 	ldw	r4,-8(fp)
    9d38:	00087100 	call	8710 <strlen>
    9d3c:	10800044 	addi	r2,r2,1
    9d40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9d44:	00000d06 	br	9d7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9d48:	e0bffc17 	ldw	r2,-16(fp)
    9d4c:	10800217 	ldw	r2,8(r2)
    9d50:	e0fffd17 	ldw	r3,-12(fp)
    9d54:	180d883a 	mov	r6,r3
    9d58:	e17ffe17 	ldw	r5,-8(fp)
    9d5c:	1009883a 	mov	r4,r2
    9d60:	0009fa80 	call	9fa8 <memcmp>
    9d64:	1000021e 	bne	r2,zero,9d70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9d68:	e0bffc17 	ldw	r2,-16(fp)
    9d6c:	00000706 	br	9d8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9d70:	e0bffc17 	ldw	r2,-16(fp)
    9d74:	10800017 	ldw	r2,0(r2)
    9d78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9d7c:	e0fffc17 	ldw	r3,-16(fp)
    9d80:	e0bfff17 	ldw	r2,-4(fp)
    9d84:	18bff01e 	bne	r3,r2,9d48 <_gp+0xffff77e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9d88:	0005883a 	mov	r2,zero
}
    9d8c:	e037883a 	mov	sp,fp
    9d90:	dfc00117 	ldw	ra,4(sp)
    9d94:	df000017 	ldw	fp,0(sp)
    9d98:	dec00204 	addi	sp,sp,8
    9d9c:	f800283a 	ret

00009da0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9da0:	defffb04 	addi	sp,sp,-20
    9da4:	dfc00415 	stw	ra,16(sp)
    9da8:	df000315 	stw	fp,12(sp)
    9dac:	df000304 	addi	fp,sp,12
    9db0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9db4:	00800074 	movhi	r2,1
    9db8:	10a95c04 	addi	r2,r2,-23184
    9dbc:	10800017 	ldw	r2,0(r2)
    9dc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9dc4:	00003106 	br	9e8c <alt_find_file+0xec>
  {
    len = strlen(next->name);
    9dc8:	e0bffd17 	ldw	r2,-12(fp)
    9dcc:	10800217 	ldw	r2,8(r2)
    9dd0:	1009883a 	mov	r4,r2
    9dd4:	00087100 	call	8710 <strlen>
    9dd8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9ddc:	e0bffd17 	ldw	r2,-12(fp)
    9de0:	10c00217 	ldw	r3,8(r2)
    9de4:	e0bffe17 	ldw	r2,-8(fp)
    9de8:	10bfffc4 	addi	r2,r2,-1
    9dec:	1885883a 	add	r2,r3,r2
    9df0:	10800003 	ldbu	r2,0(r2)
    9df4:	10803fcc 	andi	r2,r2,255
    9df8:	1080201c 	xori	r2,r2,128
    9dfc:	10bfe004 	addi	r2,r2,-128
    9e00:	10800bd8 	cmpnei	r2,r2,47
    9e04:	1000031e 	bne	r2,zero,9e14 <alt_find_file+0x74>
    {
      len -= 1;
    9e08:	e0bffe17 	ldw	r2,-8(fp)
    9e0c:	10bfffc4 	addi	r2,r2,-1
    9e10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9e14:	e0bffe17 	ldw	r2,-8(fp)
    9e18:	e0ffff17 	ldw	r3,-4(fp)
    9e1c:	1885883a 	add	r2,r3,r2
    9e20:	10800003 	ldbu	r2,0(r2)
    9e24:	10803fcc 	andi	r2,r2,255
    9e28:	1080201c 	xori	r2,r2,128
    9e2c:	10bfe004 	addi	r2,r2,-128
    9e30:	10800be0 	cmpeqi	r2,r2,47
    9e34:	1000081e 	bne	r2,zero,9e58 <alt_find_file+0xb8>
    9e38:	e0bffe17 	ldw	r2,-8(fp)
    9e3c:	e0ffff17 	ldw	r3,-4(fp)
    9e40:	1885883a 	add	r2,r3,r2
    9e44:	10800003 	ldbu	r2,0(r2)
    9e48:	10803fcc 	andi	r2,r2,255
    9e4c:	1080201c 	xori	r2,r2,128
    9e50:	10bfe004 	addi	r2,r2,-128
    9e54:	10000a1e 	bne	r2,zero,9e80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    9e58:	e0bffd17 	ldw	r2,-12(fp)
    9e5c:	10800217 	ldw	r2,8(r2)
    9e60:	e0fffe17 	ldw	r3,-8(fp)
    9e64:	180d883a 	mov	r6,r3
    9e68:	e17fff17 	ldw	r5,-4(fp)
    9e6c:	1009883a 	mov	r4,r2
    9e70:	0009fa80 	call	9fa8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9e74:	1000021e 	bne	r2,zero,9e80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9e78:	e0bffd17 	ldw	r2,-12(fp)
    9e7c:	00000806 	br	9ea0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    9e80:	e0bffd17 	ldw	r2,-12(fp)
    9e84:	10800017 	ldw	r2,0(r2)
    9e88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9e8c:	e0fffd17 	ldw	r3,-12(fp)
    9e90:	00800074 	movhi	r2,1
    9e94:	10a95c04 	addi	r2,r2,-23184
    9e98:	18bfcb1e 	bne	r3,r2,9dc8 <_gp+0xffff7860>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9e9c:	0005883a 	mov	r2,zero
}
    9ea0:	e037883a 	mov	sp,fp
    9ea4:	dfc00117 	ldw	ra,4(sp)
    9ea8:	df000017 	ldw	fp,0(sp)
    9eac:	dec00204 	addi	sp,sp,8
    9eb0:	f800283a 	ret

00009eb4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9eb4:	defffa04 	addi	sp,sp,-24
    9eb8:	dfc00515 	stw	ra,20(sp)
    9ebc:	df000415 	stw	fp,16(sp)
    9ec0:	dc000315 	stw	r16,12(sp)
    9ec4:	df000404 	addi	fp,sp,16
    9ec8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    9ecc:	00bffa04 	movi	r2,-24
    9ed0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9ed4:	e03ffc15 	stw	zero,-16(fp)
    9ed8:	00002106 	br	9f60 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    9edc:	04000074 	movhi	r16,1
    9ee0:	8428fa04 	addi	r16,r16,-23576
    9ee4:	e0bffc17 	ldw	r2,-16(fp)
    9ee8:	01400304 	movi	r5,12
    9eec:	1009883a 	mov	r4,r2
    9ef0:	0008e9c0 	call	8e9c <__mulsi3>
    9ef4:	8085883a 	add	r2,r16,r2
    9ef8:	10800017 	ldw	r2,0(r2)
    9efc:	1000151e 	bne	r2,zero,9f54 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    9f00:	04000074 	movhi	r16,1
    9f04:	8428fa04 	addi	r16,r16,-23576
    9f08:	e0bffc17 	ldw	r2,-16(fp)
    9f0c:	01400304 	movi	r5,12
    9f10:	1009883a 	mov	r4,r2
    9f14:	0008e9c0 	call	8e9c <__mulsi3>
    9f18:	8085883a 	add	r2,r16,r2
    9f1c:	e0fffe17 	ldw	r3,-8(fp)
    9f20:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9f24:	00800074 	movhi	r2,1
    9f28:	10a96004 	addi	r2,r2,-23168
    9f2c:	10c00017 	ldw	r3,0(r2)
    9f30:	e0bffc17 	ldw	r2,-16(fp)
    9f34:	1880040e 	bge	r3,r2,9f48 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    9f38:	00800074 	movhi	r2,1
    9f3c:	10a96004 	addi	r2,r2,-23168
    9f40:	e0fffc17 	ldw	r3,-16(fp)
    9f44:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    9f48:	e0bffc17 	ldw	r2,-16(fp)
    9f4c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    9f50:	00000606 	br	9f6c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9f54:	e0bffc17 	ldw	r2,-16(fp)
    9f58:	10800044 	addi	r2,r2,1
    9f5c:	e0bffc15 	stw	r2,-16(fp)
    9f60:	e0bffc17 	ldw	r2,-16(fp)
    9f64:	10800810 	cmplti	r2,r2,32
    9f68:	103fdc1e 	bne	r2,zero,9edc <_gp+0xffff7974>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9f6c:	e0bffd17 	ldw	r2,-12(fp)
}
    9f70:	e6ffff04 	addi	sp,fp,-4
    9f74:	dfc00217 	ldw	ra,8(sp)
    9f78:	df000117 	ldw	fp,4(sp)
    9f7c:	dc000017 	ldw	r16,0(sp)
    9f80:	dec00304 	addi	sp,sp,12
    9f84:	f800283a 	ret

00009f88 <exit>:
    9f88:	defffe04 	addi	sp,sp,-8
    9f8c:	000b883a 	mov	r5,zero
    9f90:	dc000015 	stw	r16,0(sp)
    9f94:	dfc00115 	stw	ra,4(sp)
    9f98:	2021883a 	mov	r16,r4
    9f9c:	0009fd80 	call	9fd8 <__call_exitprocs>
    9fa0:	8009883a 	mov	r4,r16
    9fa4:	000a1680 	call	a168 <_exit>

00009fa8 <memcmp>:
    9fa8:	218d883a 	add	r6,r4,r6
    9fac:	21800826 	beq	r4,r6,9fd0 <memcmp+0x28>
    9fb0:	20800003 	ldbu	r2,0(r4)
    9fb4:	28c00003 	ldbu	r3,0(r5)
    9fb8:	10c00226 	beq	r2,r3,9fc4 <memcmp+0x1c>
    9fbc:	10c5c83a 	sub	r2,r2,r3
    9fc0:	f800283a 	ret
    9fc4:	21000044 	addi	r4,r4,1
    9fc8:	29400044 	addi	r5,r5,1
    9fcc:	003ff706 	br	9fac <_gp+0xffff7a44>
    9fd0:	0005883a 	mov	r2,zero
    9fd4:	f800283a 	ret

00009fd8 <__call_exitprocs>:
    9fd8:	defff504 	addi	sp,sp,-44
    9fdc:	dd000515 	stw	r20,20(sp)
    9fe0:	05000074 	movhi	r20,1
    9fe4:	dc800315 	stw	r18,12(sp)
    9fe8:	dfc00a15 	stw	ra,40(sp)
    9fec:	df000915 	stw	fp,36(sp)
    9ff0:	ddc00815 	stw	r23,32(sp)
    9ff4:	dd800715 	stw	r22,28(sp)
    9ff8:	dd400615 	stw	r21,24(sp)
    9ffc:	dcc00415 	stw	r19,16(sp)
    a000:	dc400215 	stw	r17,8(sp)
    a004:	dc000115 	stw	r16,4(sp)
    a008:	d9000015 	stw	r4,0(sp)
    a00c:	2825883a 	mov	r18,r5
    a010:	a5295a04 	addi	r20,r20,-23192
    a014:	a4400017 	ldw	r17,0(r20)
    a018:	8cc00c17 	ldw	r19,48(r17)
    a01c:	8c400c04 	addi	r17,r17,48
    a020:	98004526 	beq	r19,zero,a138 <__call_exitprocs+0x160>
    a024:	9c000117 	ldw	r16,4(r19)
    a028:	00900034 	movhi	r2,16384
    a02c:	10bfffc4 	addi	r2,r2,-1
    a030:	9d402217 	ldw	r21,136(r19)
    a034:	85bfffc4 	addi	r22,r16,-1
    a038:	80a1883a 	add	r16,r16,r2
    a03c:	8421883a 	add	r16,r16,r16
    a040:	8421883a 	add	r16,r16,r16
    a044:	ac2f883a 	add	r23,r21,r16
    a048:	84000204 	addi	r16,r16,8
    a04c:	9c21883a 	add	r16,r19,r16
    a050:	b0002716 	blt	r22,zero,a0f0 <__call_exitprocs+0x118>
    a054:	90000726 	beq	r18,zero,a074 <__call_exitprocs+0x9c>
    a058:	a800041e 	bne	r21,zero,a06c <__call_exitprocs+0x94>
    a05c:	b5bfffc4 	addi	r22,r22,-1
    a060:	bdffff04 	addi	r23,r23,-4
    a064:	843fff04 	addi	r16,r16,-4
    a068:	003ff906 	br	a050 <_gp+0xffff7ae8>
    a06c:	b9002017 	ldw	r4,128(r23)
    a070:	913ffa1e 	bne	r18,r4,a05c <_gp+0xffff7af4>
    a074:	99000117 	ldw	r4,4(r19)
    a078:	82000017 	ldw	r8,0(r16)
    a07c:	213fffc4 	addi	r4,r4,-1
    a080:	b100021e 	bne	r22,r4,a08c <__call_exitprocs+0xb4>
    a084:	9d800115 	stw	r22,4(r19)
    a088:	00000106 	br	a090 <__call_exitprocs+0xb8>
    a08c:	80000015 	stw	zero,0(r16)
    a090:	403ff226 	beq	r8,zero,a05c <_gp+0xffff7af4>
    a094:	9f000117 	ldw	fp,4(r19)
    a098:	a8000526 	beq	r21,zero,a0b0 <__call_exitprocs+0xd8>
    a09c:	00800044 	movi	r2,1
    a0a0:	1592983a 	sll	r9,r2,r22
    a0a4:	a9404017 	ldw	r5,256(r21)
    a0a8:	494a703a 	and	r5,r9,r5
    a0ac:	2800021e 	bne	r5,zero,a0b8 <__call_exitprocs+0xe0>
    a0b0:	403ee83a 	callr	r8
    a0b4:	00000906 	br	a0dc <__call_exitprocs+0x104>
    a0b8:	a9004117 	ldw	r4,260(r21)
    a0bc:	4908703a 	and	r4,r9,r4
    a0c0:	2000041e 	bne	r4,zero,a0d4 <__call_exitprocs+0xfc>
    a0c4:	b9400017 	ldw	r5,0(r23)
    a0c8:	d9000017 	ldw	r4,0(sp)
    a0cc:	403ee83a 	callr	r8
    a0d0:	00000206 	br	a0dc <__call_exitprocs+0x104>
    a0d4:	b9000017 	ldw	r4,0(r23)
    a0d8:	403ee83a 	callr	r8
    a0dc:	99000117 	ldw	r4,4(r19)
    a0e0:	e13fcc1e 	bne	fp,r4,a014 <_gp+0xffff7aac>
    a0e4:	89000017 	ldw	r4,0(r17)
    a0e8:	993fdc26 	beq	r19,r4,a05c <_gp+0xffff7af4>
    a0ec:	003fc906 	br	a014 <_gp+0xffff7aac>
    a0f0:	00800034 	movhi	r2,0
    a0f4:	10800004 	addi	r2,r2,0
    a0f8:	10000f26 	beq	r2,zero,a138 <__call_exitprocs+0x160>
    a0fc:	99400117 	ldw	r5,4(r19)
    a100:	99000017 	ldw	r4,0(r19)
    a104:	2800091e 	bne	r5,zero,a12c <__call_exitprocs+0x154>
    a108:	20000826 	beq	r4,zero,a12c <__call_exitprocs+0x154>
    a10c:	89000015 	stw	r4,0(r17)
    a110:	a8000226 	beq	r21,zero,a11c <__call_exitprocs+0x144>
    a114:	a809883a 	mov	r4,r21
    a118:	00000000 	call	0 <__reset-0x8000>
    a11c:	9809883a 	mov	r4,r19
    a120:	00000000 	call	0 <__reset-0x8000>
    a124:	8cc00017 	ldw	r19,0(r17)
    a128:	003fbd06 	br	a020 <_gp+0xffff7ab8>
    a12c:	9823883a 	mov	r17,r19
    a130:	2027883a 	mov	r19,r4
    a134:	003fba06 	br	a020 <_gp+0xffff7ab8>
    a138:	dfc00a17 	ldw	ra,40(sp)
    a13c:	df000917 	ldw	fp,36(sp)
    a140:	ddc00817 	ldw	r23,32(sp)
    a144:	dd800717 	ldw	r22,28(sp)
    a148:	dd400617 	ldw	r21,24(sp)
    a14c:	dd000517 	ldw	r20,20(sp)
    a150:	dcc00417 	ldw	r19,16(sp)
    a154:	dc800317 	ldw	r18,12(sp)
    a158:	dc400217 	ldw	r17,8(sp)
    a15c:	dc000117 	ldw	r16,4(sp)
    a160:	dec00b04 	addi	sp,sp,44
    a164:	f800283a 	ret

0000a168 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a168:	defffd04 	addi	sp,sp,-12
    a16c:	df000215 	stw	fp,8(sp)
    a170:	df000204 	addi	fp,sp,8
    a174:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a178:	0001883a 	nop
    a17c:	e0bfff17 	ldw	r2,-4(fp)
    a180:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a184:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a188:	10000226 	beq	r2,zero,a194 <_exit+0x2c>
    ALT_SIM_FAIL();
    a18c:	002af070 	cmpltui	zero,zero,43969
    a190:	00000106 	br	a198 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a194:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a198:	003fff06 	br	a198 <_gp+0xffff7c30>
