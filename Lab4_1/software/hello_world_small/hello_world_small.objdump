
hello_world_small.elf:     file format elf32-littlenios2
hello_world_small.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000324 memsz 0x00000324 flags r-x
    LOAD off    0x00001344 vaddr 0x00008344 paddr 0x000083b4 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001424 vaddr 0x00008424 paddr 0x00008424 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000013b4  2**0
                  CONTENTS
  2 .text         00000300  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  00008320  00008320  00001320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00008344  000083b4  00001344  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00008424  00008424  00001424  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00008430  00008430  000013b4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c8  00000000  00000000  000013d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001493  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000094f  00000000  00000000  00002a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000009bf  00000000  00000000  00003382  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001fc  00000000  00000000  00003d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000007f9  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000001e1  00000000  00000000  00004739  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000491c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a8  00000000  00000000  00004930  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005952  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00005955  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005961  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005962  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00005963  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00005967  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000596b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0000596f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0000597a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00005985  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00005990  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  0000599b  2**0
                  CONTENTS, READONLY
 29 .jdi          00004239  00000000  00000000  000059c6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003d26b  00000000  00000000  00009bff  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008320 l    d  .rodata	00000000 .rodata
00008344 l    d  .rwdata	00000000 .rwdata
00008424 l    d  .bss	00000000 .bss
00008430 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_small_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000082f0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000081d4 g     F .text	0000002c alt_main
000083b4 g       *ABS*	00000000 __flash_rwdata_start
00008200 g     F .text	00000038 alt_putstr
000082fc g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008428 g     O .bss	00000004 alt_argv
0001039c g       *ABS*	00000000 _gp
00008344 g     O .rwdata	00000030 alt_fd_list
0000825c g     F .text	0000005c altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000083a0 g     O .rwdata	00000004 alt_max_fd
00008430 g       *ABS*	00000000 __bss_end
000080b0 g     F .text	00000044 alt_getchar
00008374 g     O .rwdata	00000028 alt_dev_null
000082ec g     F .text	00000004 alt_dcache_flush_all
000083b4 g       *ABS*	00000000 __ram_rwdata_end
000083a4 g     O .rwdata	00000008 alt_dev_list
00008344 g       *ABS*	00000000 __ram_rodata_end
0000839c g     O .rwdata	00000004 jtag_uart_0
00008430 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000082b8 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
00008258 g     F .text	00000004 alt_sys_init
00008344 g       *ABS*	00000000 __ram_rwdata_start
00008320 g       *ABS*	00000000 __ram_rodata_start
00008430 g       *ABS*	00000000 __alt_stack_base
00008424 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000054 main
00008424 g     O .bss	00000004 alt_envp
00008320 g       *ABS*	00000000 __flash_rodata_start
00008238 g     F .text	00000020 alt_irq_init
0000842c g     O .bss	00000004 alt_argc
000083ac g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
000083b4 g       *ABS*	00000000 _edata
00008430 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000d000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008304 g     F .text	0000001c strlen
000082f8 g     F .text	00000004 alt_icache_flush_all
000080f4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d680e714 	ori	gp,gp,924
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a10914 	ori	r2,r2,33828

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e10c14 	ori	r3,r3,33840

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7ca8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080f40 	call	80f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081d40 	call	81d4 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7cbc>

0000805c <main>:
int main()
{ 
	char buf;


	alt_putstr("Hello from Nios II!\n");
    805c:	01000074 	movhi	r4,1
#define leds (volatile char*) 0x00011000



int main()
{ 
    8060:	deffff04 	addi	sp,sp,-4
	char buf;


	alt_putstr("Hello from Nios II!\n");
    8064:	2120c804 	addi	r4,r4,-31968
#define leds (volatile char*) 0x00011000



int main()
{ 
    8068:	dfc00015 	stw	ra,0(sp)
	char buf;


	alt_putstr("Hello from Nios II!\n");
    806c:	00082000 	call	8200 <alt_putstr>
	buf = alt_getchar();
    8070:	00080b00 	call	80b0 <alt_getchar>
	if(buf == 'G'|| buf == 'g'){
    8074:	00fff7c4 	movi	r3,-33
    8078:	10c4703a 	and	r2,r2,r3
    807c:	10803fcc 	andi	r2,r2,255
    8080:	1080201c 	xori	r2,r2,128
    8084:	10bfe004 	addi	r2,r2,-128
    8088:	00c011c4 	movi	r3,71
    808c:	10c0071e 	bne	r2,r3,80ac <main+0x50>
		while(1){
			*leds = *switches;
    8090:	01000074 	movhi	r4,1
    8094:	00800074 	movhi	r2,1
    8098:	21040404 	addi	r4,r4,4112
    809c:	10840004 	addi	r2,r2,4096
    80a0:	20c00003 	ldbu	r3,0(r4)
    80a4:	10c00005 	stb	r3,0(r2)
    80a8:	003ffd06 	br	80a0 <_gp+0xffff7d04>
    80ac:	003fff06 	br	80ac <_gp+0xffff7d10>

000080b0 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    80b0:	00800074 	movhi	r2,1
    80b4:	10a0d104 	addi	r2,r2,-31932
    80b8:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    80bc:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    80c0:	01000074 	movhi	r4,1
    80c4:	01800044 	movi	r6,1
    80c8:	d80b883a 	mov	r5,sp
    80cc:	2120e704 	addi	r4,r4,-31844
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    80d0:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    80d4:	000825c0 	call	825c <altera_avalon_jtag_uart_read>
    80d8:	0080020e 	bge	zero,r2,80e4 <alt_getchar+0x34>
        return -1;
    }
    return c;
    80dc:	d8800007 	ldb	r2,0(sp)
    80e0:	00000106 	br	80e8 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    80e4:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    80e8:	dfc00117 	ldw	ra,4(sp)
    80ec:	dec00204 	addi	sp,sp,8
    80f0:	f800283a 	ret

000080f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    80f4:	deffff04 	addi	sp,sp,-4
    80f8:	01000074 	movhi	r4,1
    80fc:	01400074 	movhi	r5,1
    8100:	dfc00015 	stw	ra,0(sp)
    8104:	2120d104 	addi	r4,r4,-31932
    8108:	2960ed04 	addi	r5,r5,-31820

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    810c:	2140061e 	bne	r4,r5,8128 <alt_load+0x34>
    8110:	01000074 	movhi	r4,1
    8114:	01400074 	movhi	r5,1
    8118:	21200804 	addi	r4,r4,-32736
    811c:	29600804 	addi	r5,r5,-32736
    8120:	2140121e 	bne	r4,r5,816c <alt_load+0x78>
    8124:	00000b06 	br	8154 <alt_load+0x60>
    8128:	00c00074 	movhi	r3,1
    812c:	18e0ed04 	addi	r3,r3,-31820
    8130:	1907c83a 	sub	r3,r3,r4
    8134:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8138:	10fff526 	beq	r2,r3,8110 <_gp+0xffff7d74>
    {
      *to++ = *from++;
    813c:	114f883a 	add	r7,r2,r5
    8140:	39c00017 	ldw	r7,0(r7)
    8144:	110d883a 	add	r6,r2,r4
    8148:	10800104 	addi	r2,r2,4
    814c:	31c00015 	stw	r7,0(r6)
    8150:	003ff906 	br	8138 <_gp+0xffff7d9c>
    8154:	01000074 	movhi	r4,1
    8158:	01400074 	movhi	r5,1
    815c:	2120c804 	addi	r4,r4,-31968
    8160:	2960c804 	addi	r5,r5,-31968

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8164:	2140101e 	bne	r4,r5,81a8 <alt_load+0xb4>
    8168:	00000b06 	br	8198 <alt_load+0xa4>
    816c:	00c00074 	movhi	r3,1
    8170:	18e00804 	addi	r3,r3,-32736
    8174:	1907c83a 	sub	r3,r3,r4
    8178:	0005883a 	mov	r2,zero
  {
    while( to != end )
    817c:	10fff526 	beq	r2,r3,8154 <_gp+0xffff7db8>
    {
      *to++ = *from++;
    8180:	114f883a 	add	r7,r2,r5
    8184:	39c00017 	ldw	r7,0(r7)
    8188:	110d883a 	add	r6,r2,r4
    818c:	10800104 	addi	r2,r2,4
    8190:	31c00015 	stw	r7,0(r6)
    8194:	003ff906 	br	817c <_gp+0xffff7de0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8198:	00082ec0 	call	82ec <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    819c:	dfc00017 	ldw	ra,0(sp)
    81a0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    81a4:	00082f81 	jmpi	82f8 <alt_icache_flush_all>
    81a8:	00c00074 	movhi	r3,1
    81ac:	18e0d104 	addi	r3,r3,-31932
    81b0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    81b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    81b8:	18bff726 	beq	r3,r2,8198 <_gp+0xffff7dfc>
    {
      *to++ = *from++;
    81bc:	114f883a 	add	r7,r2,r5
    81c0:	39c00017 	ldw	r7,0(r7)
    81c4:	110d883a 	add	r6,r2,r4
    81c8:	10800104 	addi	r2,r2,4
    81cc:	31c00015 	stw	r7,0(r6)
    81d0:	003ff906 	br	81b8 <_gp+0xffff7e1c>

000081d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81d4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81d8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81dc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81e0:	00082380 	call	8238 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    81e4:	00082580 	call	8258 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81e8:	d1a02217 	ldw	r6,-32632(gp)
    81ec:	d1602317 	ldw	r5,-32628(gp)
    81f0:	d1202417 	ldw	r4,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    81f4:	dfc00017 	ldw	ra,0(sp)
    81f8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81fc:	000805c1 	jmpi	805c <main>

00008200 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8200:	defffe04 	addi	sp,sp,-8
    8204:	dc000015 	stw	r16,0(sp)
    8208:	dfc00115 	stw	ra,4(sp)
    820c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8210:	00083040 	call	8304 <strlen>
    8214:	01000074 	movhi	r4,1
    8218:	000f883a 	mov	r7,zero
    821c:	100d883a 	mov	r6,r2
    8220:	800b883a 	mov	r5,r16
    8224:	2120e704 	addi	r4,r4,-31844
#else
    return fputs(str, stdout);
#endif
#endif
}
    8228:	dfc00117 	ldw	ra,4(sp)
    822c:	dc000017 	ldw	r16,0(sp)
    8230:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8234:	00082b81 	jmpi	82b8 <altera_avalon_jtag_uart_write>

00008238 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8238:	deffff04 	addi	sp,sp,-4
    823c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8240:	00082fc0 	call	82fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8244:	00800044 	movi	r2,1
    8248:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    824c:	dfc00017 	ldw	ra,0(sp)
    8250:	dec00104 	addi	sp,sp,4
    8254:	f800283a 	ret

00008258 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8258:	f800283a 	ret

0000825c <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    825c:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    8260:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    8264:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    8268:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    826c:	11800b2e 	bgeu	r2,r6,829c <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8270:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8274:	1a60000c 	andi	r9,r3,32768
    8278:	48000326 	beq	r9,zero,8288 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    827c:	10c00005 	stb	r3,0(r2)
    8280:	10800044 	addi	r2,r2,1
    8284:	003ff906 	br	826c <_gp+0xffff7ed0>
    else if (ptr != buffer)
    8288:	11400226 	beq	r2,r5,8294 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    828c:	1145c83a 	sub	r2,r2,r5
    8290:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    8294:	403ff526 	beq	r8,zero,826c <_gp+0xffff7ed0>
    8298:	00000106 	br	82a0 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    829c:	117ffb1e 	bne	r2,r5,828c <_gp+0xffff7ef0>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    82a0:	39d0000c 	andi	r7,r7,16384
    82a4:	3800021e 	bne	r7,zero,82b0 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    82a8:	00bffec4 	movi	r2,-5
    82ac:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    82b0:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    82b4:	f800283a 	ret

000082b8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    82b8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    82bc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    82c0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    82c4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    82c8:	2980072e 	bgeu	r5,r6,82e8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    82cc:	38c00037 	ldwio	r3,0(r7)
    82d0:	18ffffec 	andhi	r3,r3,65535
    82d4:	183ffc26 	beq	r3,zero,82c8 <_gp+0xffff7f2c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    82d8:	28c00007 	ldb	r3,0(r5)
    82dc:	20c00035 	stwio	r3,0(r4)
    82e0:	29400044 	addi	r5,r5,1
    82e4:	003ff806 	br	82c8 <_gp+0xffff7f2c>

  return count;
}
    82e8:	f800283a 	ret

000082ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    82ec:	f800283a 	ret

000082f0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    82f0:	3005883a 	mov	r2,r6
    82f4:	f800283a 	ret

000082f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    82f8:	f800283a 	ret

000082fc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    82fc:	000170fa 	wrctl	ienable,zero
    8300:	f800283a 	ret

00008304 <strlen>:
    8304:	2005883a 	mov	r2,r4
    8308:	10c00007 	ldb	r3,0(r2)
    830c:	18000226 	beq	r3,zero,8318 <strlen+0x14>
    8310:	10800044 	addi	r2,r2,1
    8314:	003ffc06 	br	8308 <_gp+0xffff7f6c>
    8318:	1105c83a 	sub	r2,r2,r4
    831c:	f800283a 	ret
