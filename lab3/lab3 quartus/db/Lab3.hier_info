|top
hex0[0] << hex0[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex0[1] << hex0[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex0[2] << hex0[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex0[3] << hex0[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex0[4] << hex0[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex0[5] << hex0[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex0[6] << hex0[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex1[0] << hex1[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex1[1] << hex1[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex1[2] << hex1[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex1[3] << hex1[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex1[4] << hex1[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex1[5] << hex1[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex1[6] << hex1[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex2[0] << hex2[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex2[1] << hex2[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex2[2] << hex2[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex2[3] << hex2[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex2[4] << hex2[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex2[5] << hex2[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex2[6] << hex2[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex3[0] << hex3[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex3[1] << hex3[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex3[2] << hex3[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex3[3] << hex3[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex3[4] << hex3[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex3[5] << hex3[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex3[6] << hex3[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex4[0] << hex4[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex4[1] << hex4[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex4[2] << hex4[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex4[3] << hex4[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex4[4] << hex4[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex4[5] << hex4[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex4[6] << hex4[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex5[0] << hex5[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex5[1] << hex5[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex5[2] << hex5[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex5[3] << hex5[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex5[4] << hex5[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex5[5] << hex5[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
hex5[6] << hex5[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[0] << scanner:scan.state[0]
state[1] << scanner:scan.state[1]
state[2] << scanner:scan.state[2]
state2[0] << scanner:scan2.state[0]
state2[1] << scanner:scan2.state[1]
state2[2] << scanner:scan2.state[2]
ready_to_transfer << scanner:scan.ready_to_transfer
ready_to_transfer2 << scanner:scan2.ready_to_transfer
start_scan => start_scan1.OUTPUTSELECT
transfer_input => always0.IN1
transfer_input => always0.IN1
clk => scanner:scan.clk
clk => scanner:scan2.clk
clk => hex5[0]~reg0.CLK
clk => hex5[1]~reg0.CLK
clk => hex5[2]~reg0.CLK
clk => hex5[3]~reg0.CLK
clk => hex5[4]~reg0.CLK
clk => hex5[5]~reg0.CLK
clk => hex5[6]~reg0.CLK
clk => hex4[0]~reg0.CLK
clk => hex4[1]~reg0.CLK
clk => hex4[2]~reg0.CLK
clk => hex4[3]~reg0.CLK
clk => hex4[4]~reg0.CLK
clk => hex4[5]~reg0.CLK
clk => hex4[6]~reg0.CLK
clk => hex3[0]~reg0.CLK
clk => hex3[1]~reg0.CLK
clk => hex3[2]~reg0.CLK
clk => hex3[3]~reg0.CLK
clk => hex3[4]~reg0.CLK
clk => hex3[5]~reg0.CLK
clk => hex3[6]~reg0.CLK
clk => hex2[0]~reg0.CLK
clk => hex2[1]~reg0.CLK
clk => hex2[2]~reg0.CLK
clk => hex2[3]~reg0.CLK
clk => hex2[4]~reg0.CLK
clk => hex2[5]~reg0.CLK
clk => hex2[6]~reg0.CLK
clk => hex1[0]~reg0.CLK
clk => hex1[1]~reg0.CLK
clk => hex1[2]~reg0.CLK
clk => hex1[3]~reg0.CLK
clk => hex1[4]~reg0.CLK
clk => hex1[5]~reg0.CLK
clk => hex1[6]~reg0.CLK
clk => hex0[0]~reg0.CLK
clk => hex0[1]~reg0.CLK
clk => hex0[2]~reg0.CLK
clk => hex0[3]~reg0.CLK
clk => hex0[4]~reg0.CLK
clk => hex0[5]~reg0.CLK
clk => hex0[6]~reg0.CLK
clk => flush_signal2.CLK
clk => flush_signal.CLK
clk => transfer2.CLK
clk => transfer.CLK
rst => scanner:scan.rst
rst => scanner:scan2.rst
rst => transfer.OUTPUTSELECT
rst => transfer2.OUTPUTSELECT


|top|scanner:scan
start_scan => always1.IN0
start_scan => Mux4.IN8
start_scan => Mux3.IN4
data_count[0] <= buffer:buff.data_count[0]
data_count[1] <= buffer:buff.data_count[1]
data_count[2] <= buffer:buff.data_count[2]
data_count[3] <= buffer:buff.data_count[3]
data_count[4] <= buffer:buff.data_count[4]
data_count[5] <= buffer:buff.data_count[5]
data_count[6] <= buffer:buff.data_count[6]
data_count[7] <= buffer:buff.data_count[7]
ready_second_buffer <= ready_second_buffer~reg0.DB_MAX_OUTPUT_PORT_TYPE
start_second_buffer <= start_second_buffer~reg0.DB_MAX_OUTPUT_PORT_TYPE
ready_to_transfer <= ready_to_transfer~reg0.DB_MAX_OUTPUT_PORT_TYPE
transfer => next.OUTPUTSELECT
transfer => transferring.OUTPUTSELECT
transfer => next.OUTPUTSELECT
transfer => next.OUTPUTSELECT
transfer => Mux2.IN8
transfer => always1.IN1
flush_signal => transferring.OUTPUTSELECT
flush_signal => next.DATAA
flush_signal => next.DATAA
go_to_standby => next.DATAA
state[0] <= state[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[1] <= state[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[2] <= state[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
clk => buffer:buff.clk
clk => ready_to_transfer~reg0.CLK
clk => start_second_buffer~reg0.CLK
clk => ready_second_buffer~reg0.CLK
clk => next[0].CLK
clk => next[1].CLK
clk => next[2].CLK
clk => transferring.CLK
clk => scanning.CLK
clk => flush_buffer.CLK
clk => state[0]~reg0.CLK
clk => state[1]~reg0.CLK
clk => state[2]~reg0.CLK
rst => buffer:buff.rst
rst => state[0]~reg0.ACLR
rst => state[1]~reg0.ACLR
rst => state[2]~reg0.ACLR


|top|scanner:scan|buffer:buff
data_count[0] <= data_count[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[1] <= data_count[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[2] <= data_count[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[3] <= data_count[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[4] <= data_count[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[5] <= data_count[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[6] <= data_count[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[7] <= data_count[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
scanning => sema.OUTPUTSELECT
scanning => sema.OUTPUTSELECT
scanning => sema.OUTPUTSELECT
scanning => sema.OUTPUTSELECT
flush => sema.OUTPUTSELECT
flush => sema.OUTPUTSELECT
flush => sema.OUTPUTSELECT
flush => sema.OUTPUTSELECT
transfer => sema.OUTPUTSELECT
transfer => sema.OUTPUTSELECT
transfer => sema.OUTPUTSELECT
transfer => sema.OUTPUTSELECT
clk => tBase[0].CLK
clk => tBase[1].CLK
clk => tBase[2].CLK
clk => tBase[3].CLK
clk => tBase[4].CLK
clk => tBase[5].CLK
clk => tBase[6].CLK
clk => tBase[7].CLK
clk => tBase[8].CLK
clk => tBase[9].CLK
clk => tBase[10].CLK
clk => tBase[11].CLK
clk => tBase[12].CLK
clk => tBase[13].CLK
clk => tBase[14].CLK
clk => tBase[15].CLK
clk => tBase[16].CLK
clk => tBase[17].CLK
clk => tBase[18].CLK
clk => tBase[19].CLK
clk => tBase[20].CLK
clk => tBase[21].CLK
clk => tBase[22].CLK
clk => tBase[23].CLK
clk => tBase[24].CLK
clk => sema~1.DATAIN
rst => sema~3.DATAIN


|top|scanner:scan2
start_scan => always1.IN0
start_scan => Mux4.IN8
start_scan => Mux3.IN4
data_count[0] <= buffer:buff.data_count[0]
data_count[1] <= buffer:buff.data_count[1]
data_count[2] <= buffer:buff.data_count[2]
data_count[3] <= buffer:buff.data_count[3]
data_count[4] <= buffer:buff.data_count[4]
data_count[5] <= buffer:buff.data_count[5]
data_count[6] <= buffer:buff.data_count[6]
data_count[7] <= buffer:buff.data_count[7]
ready_second_buffer <= ready_second_buffer~reg0.DB_MAX_OUTPUT_PORT_TYPE
start_second_buffer <= start_second_buffer~reg0.DB_MAX_OUTPUT_PORT_TYPE
ready_to_transfer <= ready_to_transfer~reg0.DB_MAX_OUTPUT_PORT_TYPE
transfer => next.OUTPUTSELECT
transfer => transferring.OUTPUTSELECT
transfer => next.OUTPUTSELECT
transfer => next.OUTPUTSELECT
transfer => Mux2.IN8
transfer => always1.IN1
flush_signal => transferring.OUTPUTSELECT
flush_signal => next.DATAA
flush_signal => next.DATAA
go_to_standby => next.DATAA
state[0] <= state[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[1] <= state[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[2] <= state[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
clk => buffer:buff.clk
clk => ready_to_transfer~reg0.CLK
clk => start_second_buffer~reg0.CLK
clk => ready_second_buffer~reg0.CLK
clk => next[0].CLK
clk => next[1].CLK
clk => next[2].CLK
clk => transferring.CLK
clk => scanning.CLK
clk => flush_buffer.CLK
clk => state[0]~reg0.CLK
clk => state[1]~reg0.CLK
clk => state[2]~reg0.CLK
rst => buffer:buff.rst
rst => state[0]~reg0.ACLR
rst => state[1]~reg0.ACLR
rst => state[2]~reg0.ACLR


|top|scanner:scan2|buffer:buff
data_count[0] <= data_count[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[1] <= data_count[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[2] <= data_count[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[3] <= data_count[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[4] <= data_count[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[5] <= data_count[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[6] <= data_count[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_count[7] <= data_count[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
scanning => sema.OUTPUTSELECT
scanning => sema.OUTPUTSELECT
scanning => sema.OUTPUTSELECT
scanning => sema.OUTPUTSELECT
flush => sema.OUTPUTSELECT
flush => sema.OUTPUTSELECT
flush => sema.OUTPUTSELECT
flush => sema.OUTPUTSELECT
transfer => sema.OUTPUTSELECT
transfer => sema.OUTPUTSELECT
transfer => sema.OUTPUTSELECT
transfer => sema.OUTPUTSELECT
clk => tBase[0].CLK
clk => tBase[1].CLK
clk => tBase[2].CLK
clk => tBase[3].CLK
clk => tBase[4].CLK
clk => tBase[5].CLK
clk => tBase[6].CLK
clk => tBase[7].CLK
clk => tBase[8].CLK
clk => tBase[9].CLK
clk => tBase[10].CLK
clk => tBase[11].CLK
clk => tBase[12].CLK
clk => tBase[13].CLK
clk => tBase[14].CLK
clk => tBase[15].CLK
clk => tBase[16].CLK
clk => tBase[17].CLK
clk => tBase[18].CLK
clk => tBase[19].CLK
clk => tBase[20].CLK
clk => tBase[21].CLK
clk => tBase[22].CLK
clk => tBase[23].CLK
clk => tBase[24].CLK
clk => sema~1.DATAIN
rst => sema~3.DATAIN


|top|BCD:hex_display1
number[0] => ones[0].DATAIN
number[1] => LessThan5.IN8
number[1] => Add5.IN8
number[1] => shift.DATAA
number[2] => LessThan3.IN8
number[2] => Add3.IN8
number[2] => shift.DATAA
number[3] => LessThan2.IN8
number[3] => Add2.IN8
number[3] => shift.DATAA
number[4] => LessThan1.IN8
number[4] => Add1.IN8
number[4] => shift.DATAA
number[5] => LessThan0.IN6
number[5] => Add0.IN6
number[5] => shift.DATAA
number[6] => LessThan0.IN5
number[6] => Add0.IN5
number[6] => shift.DATAA
number[7] => LessThan0.IN4
number[7] => Add0.IN4
number[7] => shift.DATAA
hundreds[0] <= shift.DB_MAX_OUTPUT_PORT_TYPE
hundreds[1] <= shift.DB_MAX_OUTPUT_PORT_TYPE
hundreds[2] <= <GND>
hundreds[3] <= <GND>
tens[0] <= shift.DB_MAX_OUTPUT_PORT_TYPE
tens[1] <= shift.DB_MAX_OUTPUT_PORT_TYPE
tens[2] <= shift.DB_MAX_OUTPUT_PORT_TYPE
tens[3] <= shift.DB_MAX_OUTPUT_PORT_TYPE
ones[0] <= number[0].DB_MAX_OUTPUT_PORT_TYPE
ones[1] <= shift.DB_MAX_OUTPUT_PORT_TYPE
ones[2] <= shift.DB_MAX_OUTPUT_PORT_TYPE
ones[3] <= shift.DB_MAX_OUTPUT_PORT_TYPE


|top|BCD:hex_display2
number[0] => ones[0].DATAIN
number[1] => LessThan5.IN8
number[1] => Add5.IN8
number[1] => shift.DATAA
number[2] => LessThan3.IN8
number[2] => Add3.IN8
number[2] => shift.DATAA
number[3] => LessThan2.IN8
number[3] => Add2.IN8
number[3] => shift.DATAA
number[4] => LessThan1.IN8
number[4] => Add1.IN8
number[4] => shift.DATAA
number[5] => LessThan0.IN6
number[5] => Add0.IN6
number[5] => shift.DATAA
number[6] => LessThan0.IN5
number[6] => Add0.IN5
number[6] => shift.DATAA
number[7] => LessThan0.IN4
number[7] => Add0.IN4
number[7] => shift.DATAA
hundreds[0] <= shift.DB_MAX_OUTPUT_PORT_TYPE
hundreds[1] <= shift.DB_MAX_OUTPUT_PORT_TYPE
hundreds[2] <= <GND>
hundreds[3] <= <GND>
tens[0] <= shift.DB_MAX_OUTPUT_PORT_TYPE
tens[1] <= shift.DB_MAX_OUTPUT_PORT_TYPE
tens[2] <= shift.DB_MAX_OUTPUT_PORT_TYPE
tens[3] <= shift.DB_MAX_OUTPUT_PORT_TYPE
ones[0] <= number[0].DB_MAX_OUTPUT_PORT_TYPE
ones[1] <= shift.DB_MAX_OUTPUT_PORT_TYPE
ones[2] <= shift.DB_MAX_OUTPUT_PORT_TYPE
ones[3] <= shift.DB_MAX_OUTPUT_PORT_TYPE


