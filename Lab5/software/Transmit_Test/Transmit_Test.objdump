
Transmit_Test.elf:     file format elf32-littlenios2
Transmit_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000110c memsz 0x0000110c flags r-x
    LOAD off    0x0000212c vaddr 0x0000912c paddr 0x000093d8 align 2**12
         filesz 0x000002ac memsz 0x000002ac flags rw-
    LOAD off    0x00002684 vaddr 0x00009684 paddr 0x00009684 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000023d8  2**0
                  CONTENTS
  2 .text         00001004  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000108  00009024  00009024  00002024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002ac  0000912c  000093d8  0000212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00009684  00009684  00002684  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00009694  00009694  000023d8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000330  00000000  00000000  00002400  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002a1a  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001119  00000000  00000000  0000514a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000013db  00000000  00000000  00006263  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000560  00000000  00000000  00007640  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000fdc  00000000  00000000  00007ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006d4  00000000  00000000  00008b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00009250  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e0  00000000  00000000  00009290  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000a64e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000a651  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000a65d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000a65e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000a65f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000a663  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000a667  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0000a66b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0000a676  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0000a681  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0000a68c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000029  00000000  00000000  0000a697  2**0
                  CONTENTS, READONLY
 29 .jdi          00004239  00000000  00000000  0000a6c0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a7798  00000000  00000000  0000e8f9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00009024 l    d  .rodata	00000000 .rodata
0000912c l    d  .rwdata	00000000 .rwdata
00009684 l    d  .bss	00000000 .bss
00009694 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Transmit_Test_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 transmit.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
000085e8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00008b2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008bd8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
000092d4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
000086d4 g     F .text	00000050 alt_main
000093d8 g       *ABS*	00000000 __flash_rwdata_start
00008780 g     F .text	00000048 alt_putstr
00008c24 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009690 g     O .bss	00000004 errno
00009688 g     O .bss	00000004 alt_argv
000113b4 g       *ABS*	00000000 _gp
000087c8 g     F .text	00000030 usleep
00009154 g     O .rwdata	00000180 alt_fd_list
000080e0 g     F .text	0000009c scan_inq
00008854 g     F .text	000000ec altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008f0c g     F .text	00000064 .hidden __udivsi3
000093c8 g     O .rwdata	00000004 alt_max_fd
000093d0 g     O .rwdata	00000004 _global_impure_ptr
00009694 g       *ABS*	00000000 __bss_end
00008584 g     F .text	00000064 alt_getchar
0000912c g     O .rwdata	00000028 alt_dev_null
00008bb8 g     F .text	00000020 alt_dcache_flush_all
000093d8 g       *ABS*	00000000 __ram_rwdata_end
000093c0 g     O .rwdata	00000008 alt_dev_list
0000912c g       *ABS*	00000000 __ram_rodata_end
000093b4 g     O .rwdata	00000004 jtag_uart_0
00008f70 g     F .text	00000058 .hidden __umodsi3
00009694 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008940 g     F .text	00000094 altera_avalon_jtag_uart_write
00008c84 g     F .text	00000190 __call_exitprocs
00008020 g     F .text	0000003c _start
00008830 g     F .text	00000024 alt_sys_init
00008fc8 g     F .text	00000028 .hidden __mulsi3
0000912c g       *ABS*	00000000 __ram_rwdata_start
00009024 g       *ABS*	00000000 __ram_rodata_start
0000805c g     F .text	00000084 scanner_init
000089d4 g     F .text	00000158 alt_busy_sleep
00009694 g       *ABS*	00000000 __alt_stack_base
00009684 g       *ABS*	00000000 __bss_start
0000817c g     F .text	000000d4 main
0000968c g     O .bss	00000004 alt_envp
000093cc g     O .rwdata	00000004 alt_errno
00008e14 g     F .text	00000084 .hidden __divsi3
00009024 g       *ABS*	00000000 __flash_rodata_start
000087f8 g     F .text	00000038 alt_irq_init
000093d4 g     O .rwdata	00000004 _impure_ptr
00009684 g     O .bss	00000004 alt_argc
000093b8 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
000093d8 g       *ABS*	00000000 _edata
00009694 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008c48 g     F .text	00000020 exit
00008e98 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008ff0 g     F .text	00000034 _exit
00008c68 g     F .text	0000001c strlen
00008724 g     F .text	0000005c alt_putchar
00008250 g     F .text	00000334 scanner_rout
00008c04 g     F .text	00000020 alt_icache_flush_all
00008b7c g     F .text	0000003c close
00008650 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d684ed14 	ori	gp,gp,5044
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a5a114 	ori	r2,r2,38532

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e5a514 	ori	r3,r3,38548

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff6c90>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00086500 	call	8650 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00086d40 	call	86d4 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff6ca4>

0000805c <scanner_init>:
#define read_inc_2 (volatile char*) 0x000110a0




void scanner_init(){
    805c:	deffff04 	addi	sp,sp,-4
    8060:	df000015 	stw	fp,0(sp)
    8064:	d839883a 	mov	fp,sp
	*scanner_rst = 0;
    8068:	00800074 	movhi	r2,1
    806c:	10842c04 	addi	r2,r2,4272
    8070:	10000005 	stb	zero,0(r2)
	*start_scanning = 0;
    8074:	00800074 	movhi	r2,1
    8078:	10843404 	addi	r2,r2,4304
    807c:	10000005 	stb	zero,0(r2)
	*start_transfer = 0;
    8080:	00800074 	movhi	r2,1
    8084:	10843004 	addi	r2,r2,4288
    8088:	10000005 	stb	zero,0(r2)
	*scanner_rst = 1;
    808c:	00800074 	movhi	r2,1
    8090:	10842c04 	addi	r2,r2,4272
    8094:	00c00044 	movi	r3,1
    8098:	10c00005 	stb	r3,0(r2)
	*wr_en_1 = 0;
    809c:	00800074 	movhi	r2,1
    80a0:	10841c04 	addi	r2,r2,4208
    80a4:	10000005 	stb	zero,0(r2)
	*wr_en_2 = 0;
    80a8:	00800074 	movhi	r2,1
    80ac:	10842004 	addi	r2,r2,4224
    80b0:	10000005 	stb	zero,0(r2)
	*read_inc_1 = 0;
    80b4:	00800074 	movhi	r2,1
    80b8:	10842404 	addi	r2,r2,4240
    80bc:	10000005 	stb	zero,0(r2)
	*read_inc_2 = 0;
    80c0:	00800074 	movhi	r2,1
    80c4:	10842804 	addi	r2,r2,4256
    80c8:	10000005 	stb	zero,0(r2)
}
    80cc:	0001883a 	nop
    80d0:	e037883a 	mov	sp,fp
    80d4:	df000017 	ldw	fp,0(sp)
    80d8:	dec00104 	addi	sp,sp,4
    80dc:	f800283a 	ret

000080e0 <scan_inq>:

void scan_inq(){
    80e0:	defffd04 	addi	sp,sp,-12
    80e4:	dfc00215 	stw	ra,8(sp)
    80e8:	df000115 	stw	fp,4(sp)
    80ec:	df000104 	addi	fp,sp,4
	char buf = 'n';
    80f0:	00801b84 	movi	r2,110
    80f4:	e0bfff05 	stb	r2,-4(fp)
	while (buf == 'n'){
    80f8:	00001706 	br	8158 <scan_inq+0x78>
		alt_putstr("start scanning?(y/n)\n");
    80fc:	01000074 	movhi	r4,1
    8100:	21240904 	addi	r4,r4,-28636
    8104:	00087800 	call	8780 <alt_putstr>
		buf = alt_getchar();
    8108:	00085840 	call	8584 <alt_getchar>
    810c:	e0bfff05 	stb	r2,-4(fp)
		alt_getchar();
    8110:	00085840 	call	8584 <alt_getchar>
		if(buf == 'y'){
    8114:	e0bfff07 	ldb	r2,-4(fp)
    8118:	10801e58 	cmpnei	r2,r2,121
    811c:	10000b1e 	bne	r2,zero,814c <scan_inq+0x6c>
			*start_scanning = 1;
    8120:	00800074 	movhi	r2,1
    8124:	10843404 	addi	r2,r2,4304
    8128:	00c00044 	movi	r3,1
    812c:	10c00005 	stb	r3,0(r2)
			*start_scanning = 0;
    8130:	00800074 	movhi	r2,1
    8134:	10843404 	addi	r2,r2,4304
    8138:	10000005 	stb	zero,0(r2)
			alt_putstr("scanning...\n");
    813c:	01000074 	movhi	r4,1
    8140:	21240f04 	addi	r4,r4,-28612
    8144:	00087800 	call	8780 <alt_putstr>
    8148:	00000306 	br	8158 <scan_inq+0x78>
		} else {
			*start_scanning = 0;
    814c:	00800074 	movhi	r2,1
    8150:	10843404 	addi	r2,r2,4304
    8154:	10000005 	stb	zero,0(r2)
	*read_inc_2 = 0;
}

void scan_inq(){
	char buf = 'n';
	while (buf == 'n'){
    8158:	e0bfff07 	ldb	r2,-4(fp)
    815c:	10801ba0 	cmpeqi	r2,r2,110
    8160:	103fe61e 	bne	r2,zero,80fc <_gp+0xffff6d48>
			alt_putstr("scanning...\n");
		} else {
			*start_scanning = 0;
		}
	}
}
    8164:	0001883a 	nop
    8168:	e037883a 	mov	sp,fp
    816c:	dfc00117 	ldw	ra,4(sp)
    8170:	df000017 	ldw	fp,0(sp)
    8174:	dec00204 	addi	sp,sp,8
    8178:	f800283a 	ret

0000817c <main>:


void scanner_rout(void);

int main(){
    817c:	defffd04 	addi	sp,sp,-12
    8180:	dfc00215 	stw	ra,8(sp)
    8184:	df000115 	stw	fp,4(sp)
    8188:	df000104 	addi	fp,sp,4
	char buf;
	alt_putstr("Initialized\n");
    818c:	01000074 	movhi	r4,1
    8190:	21241304 	addi	r4,r4,-28596
    8194:	00087800 	call	8780 <alt_putstr>
	while(1){
		buf = alt_getchar();
    8198:	00085840 	call	8584 <alt_getchar>
    819c:	e0bfff05 	stb	r2,-4(fp)
		//alt_getchar();
		*net_data_out = buf;
    81a0:	00800074 	movhi	r2,1
    81a4:	10841004 	addi	r2,r2,4160
    81a8:	e0ffff03 	ldbu	r3,-4(fp)
    81ac:	10c00005 	stb	r3,0(r2)
		*load = 1;
    81b0:	00800074 	movhi	r2,1
    81b4:	10840404 	addi	r2,r2,4112
    81b8:	00c00044 	movi	r3,1
    81bc:	10c00005 	stb	r3,0(r2)
		*load = 0;
    81c0:	00800074 	movhi	r2,1
    81c4:	10840404 	addi	r2,r2,4112
    81c8:	10000005 	stb	zero,0(r2)
		while(*char_sent==0){
    81cc:	00000406 	br	81e0 <main+0x64>
			*transmit_en = 1;
    81d0:	00800074 	movhi	r2,1
    81d4:	10840004 	addi	r2,r2,4096
    81d8:	00c00044 	movi	r3,1
    81dc:	10c00005 	stb	r3,0(r2)
		buf = alt_getchar();
		//alt_getchar();
		*net_data_out = buf;
		*load = 1;
		*load = 0;
		while(*char_sent==0){
    81e0:	00800074 	movhi	r2,1
    81e4:	10840804 	addi	r2,r2,4128
    81e8:	10800003 	ldbu	r2,0(r2)
    81ec:	10803fcc 	andi	r2,r2,255
    81f0:	1080201c 	xori	r2,r2,128
    81f4:	10bfe004 	addi	r2,r2,-128
    81f8:	103ff526 	beq	r2,zero,81d0 <_gp+0xffff6e1c>
			*transmit_en = 1;
		}
		*transmit_en = 0;
    81fc:	00800074 	movhi	r2,1
    8200:	10840004 	addi	r2,r2,4096
    8204:	10000005 	stb	zero,0(r2)
		while(1){
			if(*char_received == 1){
    8208:	00800074 	movhi	r2,1
    820c:	10840c04 	addi	r2,r2,4144
    8210:	10800003 	ldbu	r2,0(r2)
    8214:	10803fcc 	andi	r2,r2,255
    8218:	1080201c 	xori	r2,r2,128
    821c:	10bfe004 	addi	r2,r2,-128
    8220:	10800058 	cmpnei	r2,r2,1
    8224:	103ff81e 	bne	r2,zero,8208 <_gp+0xffff6e54>
				alt_putchar(*net_data_in);
    8228:	00800074 	movhi	r2,1
    822c:	10841404 	addi	r2,r2,4176
    8230:	10800003 	ldbu	r2,0(r2)
    8234:	10803fcc 	andi	r2,r2,255
    8238:	1080201c 	xori	r2,r2,128
    823c:	10bfe004 	addi	r2,r2,-128
    8240:	1009883a 	mov	r4,r2
    8244:	00087240 	call	8724 <alt_putchar>
				break;
    8248:	0001883a 	nop
			}
		}
	}
    824c:	003fd206 	br	8198 <_gp+0xffff6de4>

00008250 <scanner_rout>:

	return 0;
}

void scanner_rout(void){
    8250:	defffc04 	addi	sp,sp,-16
    8254:	dfc00315 	stw	ra,12(sp)
    8258:	df000215 	stw	fp,8(sp)
    825c:	df000204 	addi	fp,sp,8
	int i = 0;
    8260:	e03ffe15 	stw	zero,-8(fp)
	char buf1 = 'n';
    8264:	00801b84 	movi	r2,110
    8268:	e0bfff05 	stb	r2,-4(fp)
	scanner_init();
    826c:	000805c0 	call	805c <scanner_init>
	alt_putstr("\nscanners initialized\n");
    8270:	01000074 	movhi	r4,1
    8274:	21241704 	addi	r4,r4,-28580
    8278:	00087800 	call	8780 <alt_putstr>
	usleep(10);
    827c:	01000284 	movi	r4,10
    8280:	00087c80 	call	87c8 <usleep>

	scan_inq();
    8284:	00080e00 	call	80e0 <scan_inq>

	while(1){

	for(i=0; i<10; i++){
    8288:	e03ffe15 	stw	zero,-8(fp)
    828c:	00001f06 	br	830c <scanner_rout+0xbc>
		*data_out_0 = i;
    8290:	00800074 	movhi	r2,1
    8294:	10844c04 	addi	r2,r2,4400
    8298:	e0fffe17 	ldw	r3,-8(fp)
    829c:	10c00005 	stb	r3,0(r2)
		*wr_en_1 = 1;
    82a0:	00800074 	movhi	r2,1
    82a4:	10841c04 	addi	r2,r2,4208
    82a8:	00c00044 	movi	r3,1
    82ac:	10c00005 	stb	r3,0(r2)
		usleep(500000);
    82b0:	01000234 	movhi	r4,8
    82b4:	21284804 	addi	r4,r4,-24288
    82b8:	00087c80 	call	87c8 <usleep>
		*wr_en_1 = 0;
    82bc:	00800074 	movhi	r2,1
    82c0:	10841c04 	addi	r2,r2,4208
    82c4:	10000005 	stb	zero,0(r2)
		if (*ready_to_transfer_0 == 1 && i == 8) {
    82c8:	00800074 	movhi	r2,1
    82cc:	10843c04 	addi	r2,r2,4336
    82d0:	10800003 	ldbu	r2,0(r2)
    82d4:	10803fcc 	andi	r2,r2,255
    82d8:	1080201c 	xori	r2,r2,128
    82dc:	10bfe004 	addi	r2,r2,-128
    82e0:	10800058 	cmpnei	r2,r2,1
    82e4:	1000061e 	bne	r2,zero,8300 <scanner_rout+0xb0>
    82e8:	e0bffe17 	ldw	r2,-8(fp)
    82ec:	10800218 	cmpnei	r2,r2,8
    82f0:	1000031e 	bne	r2,zero,8300 <scanner_rout+0xb0>
			alt_putstr("\nscanner 1 ready to transfer\n");
    82f4:	01000074 	movhi	r4,1
    82f8:	21241d04 	addi	r4,r4,-28556
    82fc:	00087800 	call	8780 <alt_putstr>

	scan_inq();

	while(1){

	for(i=0; i<10; i++){
    8300:	e0bffe17 	ldw	r2,-8(fp)
    8304:	10800044 	addi	r2,r2,1
    8308:	e0bffe15 	stw	r2,-8(fp)
    830c:	e0bffe17 	ldw	r2,-8(fp)
    8310:	10800290 	cmplti	r2,r2,10
    8314:	103fde1e 	bne	r2,zero,8290 <_gp+0xffff6edc>
		*wr_en_1 = 0;
		if (*ready_to_transfer_0 == 1 && i == 8) {
			alt_putstr("\nscanner 1 ready to transfer\n");
		}
	}
	usleep(10);
    8318:	01000284 	movi	r4,10
    831c:	00087c80 	call	87c8 <usleep>
	*data_out_0 = 0;
    8320:	00800074 	movhi	r2,1
    8324:	10844c04 	addi	r2,r2,4400
    8328:	10000005 	stb	zero,0(r2)


		alt_putstr("start scanner 1 transfer?(y/n)\n");
    832c:	01000074 	movhi	r4,1
    8330:	21242504 	addi	r4,r4,-28524
    8334:	00087800 	call	8780 <alt_putstr>
		buf1 = alt_getchar();
    8338:	00085840 	call	8584 <alt_getchar>
    833c:	e0bfff05 	stb	r2,-4(fp)
		alt_getchar();
    8340:	00085840 	call	8584 <alt_getchar>
		if(buf1 == 'y'){
    8344:	e0bfff07 	ldb	r2,-4(fp)
    8348:	10801e58 	cmpnei	r2,r2,121
    834c:	10002e1e 	bne	r2,zero,8408 <scanner_rout+0x1b8>
			*start_transfer = 1;
    8350:	00800074 	movhi	r2,1
    8354:	10843004 	addi	r2,r2,4288
    8358:	00c00044 	movi	r3,1
    835c:	10c00005 	stb	r3,0(r2)
			*start_transfer = 0;
    8360:	00800074 	movhi	r2,1
    8364:	10843004 	addi	r2,r2,4288
    8368:	10000005 	stb	zero,0(r2)
			alt_putstr("transferring...\n");
    836c:	01000074 	movhi	r4,1
    8370:	21242d04 	addi	r4,r4,-28492
    8374:	00087800 	call	8780 <alt_putstr>
			for(i=0; i<10; i++){
    8378:	e03ffe15 	stw	zero,-8(fp)
    837c:	00001b06 	br	83ec <scanner_rout+0x19c>
				alt_putchar(*data_in_0 + '0');
    8380:	00800074 	movhi	r2,1
    8384:	10844404 	addi	r2,r2,4368
    8388:	10800003 	ldbu	r2,0(r2)
    838c:	10803fcc 	andi	r2,r2,255
    8390:	1080201c 	xori	r2,r2,128
    8394:	10bfe004 	addi	r2,r2,-128
    8398:	10800c04 	addi	r2,r2,48
    839c:	1009883a 	mov	r4,r2
    83a0:	00087240 	call	8724 <alt_putchar>
				alt_putstr("\n");
    83a4:	01000074 	movhi	r4,1
    83a8:	21243204 	addi	r4,r4,-28472
    83ac:	00087800 	call	8780 <alt_putstr>
				*read_inc_1 = 1;
    83b0:	00800074 	movhi	r2,1
    83b4:	10842404 	addi	r2,r2,4240
    83b8:	00c00044 	movi	r3,1
    83bc:	10c00005 	stb	r3,0(r2)
				usleep(10);
    83c0:	01000284 	movi	r4,10
    83c4:	00087c80 	call	87c8 <usleep>
				*read_inc_1 = 0;
    83c8:	00800074 	movhi	r2,1
    83cc:	10842404 	addi	r2,r2,4240
    83d0:	10000005 	stb	zero,0(r2)
				usleep(500000);
    83d4:	01000234 	movhi	r4,8
    83d8:	21284804 	addi	r4,r4,-24288
    83dc:	00087c80 	call	87c8 <usleep>
		alt_getchar();
		if(buf1 == 'y'){
			*start_transfer = 1;
			*start_transfer = 0;
			alt_putstr("transferring...\n");
			for(i=0; i<10; i++){
    83e0:	e0bffe17 	ldw	r2,-8(fp)
    83e4:	10800044 	addi	r2,r2,1
    83e8:	e0bffe15 	stw	r2,-8(fp)
    83ec:	e0bffe17 	ldw	r2,-8(fp)
    83f0:	10800290 	cmplti	r2,r2,10
    83f4:	103fe21e 	bne	r2,zero,8380 <_gp+0xffff6fcc>
				*read_inc_1 = 1;
				usleep(10);
				*read_inc_1 = 0;
				usleep(500000);
			}
			alt_putstr("transfer complete\n");
    83f8:	01000074 	movhi	r4,1
    83fc:	21243304 	addi	r4,r4,-28468
    8400:	00087800 	call	8780 <alt_putstr>
			scan_inq();
    8404:	00080e00 	call	80e0 <scan_inq>
		}


		for(i=0; i<10; i++){
    8408:	e03ffe15 	stw	zero,-8(fp)
    840c:	00001f06 	br	848c <scanner_rout+0x23c>
			*data_out_1 = i;
    8410:	00800074 	movhi	r2,1
    8414:	10844804 	addi	r2,r2,4384
    8418:	e0fffe17 	ldw	r3,-8(fp)
    841c:	10c00005 	stb	r3,0(r2)
			*wr_en_2 = 1;
    8420:	00800074 	movhi	r2,1
    8424:	10842004 	addi	r2,r2,4224
    8428:	00c00044 	movi	r3,1
    842c:	10c00005 	stb	r3,0(r2)
			usleep(500000);
    8430:	01000234 	movhi	r4,8
    8434:	21284804 	addi	r4,r4,-24288
    8438:	00087c80 	call	87c8 <usleep>
			*wr_en_2 = 0;
    843c:	00800074 	movhi	r2,1
    8440:	10842004 	addi	r2,r2,4224
    8444:	10000005 	stb	zero,0(r2)
			if (*ready_to_transfer_1 == 1 && i == 8) {
    8448:	00800074 	movhi	r2,1
    844c:	10843804 	addi	r2,r2,4320
    8450:	10800003 	ldbu	r2,0(r2)
    8454:	10803fcc 	andi	r2,r2,255
    8458:	1080201c 	xori	r2,r2,128
    845c:	10bfe004 	addi	r2,r2,-128
    8460:	10800058 	cmpnei	r2,r2,1
    8464:	1000061e 	bne	r2,zero,8480 <scanner_rout+0x230>
    8468:	e0bffe17 	ldw	r2,-8(fp)
    846c:	10800218 	cmpnei	r2,r2,8
    8470:	1000031e 	bne	r2,zero,8480 <scanner_rout+0x230>
				alt_putstr("\nscanner 2 ready to transfer\n");
    8474:	01000074 	movhi	r4,1
    8478:	21243804 	addi	r4,r4,-28448
    847c:	00087800 	call	8780 <alt_putstr>
			alt_putstr("transfer complete\n");
			scan_inq();
		}


		for(i=0; i<10; i++){
    8480:	e0bffe17 	ldw	r2,-8(fp)
    8484:	10800044 	addi	r2,r2,1
    8488:	e0bffe15 	stw	r2,-8(fp)
    848c:	e0bffe17 	ldw	r2,-8(fp)
    8490:	10800290 	cmplti	r2,r2,10
    8494:	103fde1e 	bne	r2,zero,8410 <_gp+0xffff705c>
			*wr_en_2 = 0;
			if (*ready_to_transfer_1 == 1 && i == 8) {
				alt_putstr("\nscanner 2 ready to transfer\n");
			}
		}
		*data_out_1 = 0;
    8498:	00800074 	movhi	r2,1
    849c:	10844804 	addi	r2,r2,4384
    84a0:	10000005 	stb	zero,0(r2)


		alt_putstr("start scanner 2 transfer?(y/n)\n");
    84a4:	01000074 	movhi	r4,1
    84a8:	21244004 	addi	r4,r4,-28416
    84ac:	00087800 	call	8780 <alt_putstr>
		buf1 = alt_getchar();
    84b0:	00085840 	call	8584 <alt_getchar>
    84b4:	e0bfff05 	stb	r2,-4(fp)
		alt_getchar();
    84b8:	00085840 	call	8584 <alt_getchar>
		if(buf1 == 'y'){
    84bc:	e0bfff07 	ldb	r2,-4(fp)
    84c0:	10801e58 	cmpnei	r2,r2,121
    84c4:	103f701e 	bne	r2,zero,8288 <_gp+0xffff6ed4>
			*start_transfer = 1;
    84c8:	00800074 	movhi	r2,1
    84cc:	10843004 	addi	r2,r2,4288
    84d0:	00c00044 	movi	r3,1
    84d4:	10c00005 	stb	r3,0(r2)
			*start_transfer = 0;
    84d8:	00800074 	movhi	r2,1
    84dc:	10843004 	addi	r2,r2,4288
    84e0:	10000005 	stb	zero,0(r2)
			alt_putstr("transferring...\n");
    84e4:	01000074 	movhi	r4,1
    84e8:	21242d04 	addi	r4,r4,-28492
    84ec:	00087800 	call	8780 <alt_putstr>

			for(i=0; i<10; i++){
    84f0:	e03ffe15 	stw	zero,-8(fp)
    84f4:	00001b06 	br	8564 <scanner_rout+0x314>
				alt_putchar(*data_in_1 + '0');
    84f8:	00800074 	movhi	r2,1
    84fc:	10842804 	addi	r2,r2,4256
    8500:	10800003 	ldbu	r2,0(r2)
    8504:	10803fcc 	andi	r2,r2,255
    8508:	1080201c 	xori	r2,r2,128
    850c:	10bfe004 	addi	r2,r2,-128
    8510:	10800c04 	addi	r2,r2,48
    8514:	1009883a 	mov	r4,r2
    8518:	00087240 	call	8724 <alt_putchar>
				alt_putstr("\n");
    851c:	01000074 	movhi	r4,1
    8520:	21243204 	addi	r4,r4,-28472
    8524:	00087800 	call	8780 <alt_putstr>
				*read_inc_2 = 1;
    8528:	00800074 	movhi	r2,1
    852c:	10842804 	addi	r2,r2,4256
    8530:	00c00044 	movi	r3,1
    8534:	10c00005 	stb	r3,0(r2)
				usleep(10);
    8538:	01000284 	movi	r4,10
    853c:	00087c80 	call	87c8 <usleep>
				*read_inc_2 = 0;
    8540:	00800074 	movhi	r2,1
    8544:	10842804 	addi	r2,r2,4256
    8548:	10000005 	stb	zero,0(r2)
				usleep(500000);
    854c:	01000234 	movhi	r4,8
    8550:	21284804 	addi	r4,r4,-24288
    8554:	00087c80 	call	87c8 <usleep>
		if(buf1 == 'y'){
			*start_transfer = 1;
			*start_transfer = 0;
			alt_putstr("transferring...\n");

			for(i=0; i<10; i++){
    8558:	e0bffe17 	ldw	r2,-8(fp)
    855c:	10800044 	addi	r2,r2,1
    8560:	e0bffe15 	stw	r2,-8(fp)
    8564:	e0bffe17 	ldw	r2,-8(fp)
    8568:	10800290 	cmplti	r2,r2,10
    856c:	103fe21e 	bne	r2,zero,84f8 <_gp+0xffff7144>
				*read_inc_2 = 1;
				usleep(10);
				*read_inc_2 = 0;
				usleep(500000);
			}
			alt_putstr("transfer complete\n");
    8570:	01000074 	movhi	r4,1
    8574:	21243304 	addi	r4,r4,-28468
    8578:	00087800 	call	8780 <alt_putstr>
			scan_inq();
    857c:	00080e00 	call	80e0 <scan_inq>
		}

	}
    8580:	003f4106 	br	8288 <_gp+0xffff6ed4>

00008584 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    8584:	defffd04 	addi	sp,sp,-12
    8588:	dfc00215 	stw	ra,8(sp)
    858c:	df000115 	stw	fp,4(sp)
    8590:	df000104 	addi	fp,sp,4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8594:	00800074 	movhi	r2,1
    8598:	10a45504 	addi	r2,r2,-28332
    859c:	10800217 	ldw	r2,8(r2)
    85a0:	100f883a 	mov	r7,r2
    85a4:	01800044 	movi	r6,1
    85a8:	e17fff04 	addi	r5,fp,-4
    85ac:	01000074 	movhi	r4,1
    85b0:	2124ed04 	addi	r4,r4,-27724
    85b4:	00088540 	call	8854 <altera_avalon_jtag_uart_read>
    85b8:	00800216 	blt	zero,r2,85c4 <alt_getchar+0x40>
        return -1;
    85bc:	00bfffc4 	movi	r2,-1
    85c0:	00000406 	br	85d4 <alt_getchar+0x50>
    }
    return c;
    85c4:	e0bfff03 	ldbu	r2,-4(fp)
    85c8:	10803fcc 	andi	r2,r2,255
    85cc:	1080201c 	xori	r2,r2,128
    85d0:	10bfe004 	addi	r2,r2,-128
#else
    return getchar();
#endif
#endif
}
    85d4:	e037883a 	mov	sp,fp
    85d8:	dfc00117 	ldw	ra,4(sp)
    85dc:	df000017 	ldw	fp,0(sp)
    85e0:	dec00204 	addi	sp,sp,8
    85e4:	f800283a 	ret

000085e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    85e8:	defffc04 	addi	sp,sp,-16
    85ec:	df000315 	stw	fp,12(sp)
    85f0:	df000304 	addi	fp,sp,12
    85f4:	e13ffd15 	stw	r4,-12(fp)
    85f8:	e17ffe15 	stw	r5,-8(fp)
    85fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8600:	e0fffe17 	ldw	r3,-8(fp)
    8604:	e0bffd17 	ldw	r2,-12(fp)
    8608:	18800c26 	beq	r3,r2,863c <alt_load_section+0x54>
  {
    while( to != end )
    860c:	00000806 	br	8630 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8610:	e0bffe17 	ldw	r2,-8(fp)
    8614:	10c00104 	addi	r3,r2,4
    8618:	e0fffe15 	stw	r3,-8(fp)
    861c:	e0fffd17 	ldw	r3,-12(fp)
    8620:	19000104 	addi	r4,r3,4
    8624:	e13ffd15 	stw	r4,-12(fp)
    8628:	18c00017 	ldw	r3,0(r3)
    862c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8630:	e0fffe17 	ldw	r3,-8(fp)
    8634:	e0bfff17 	ldw	r2,-4(fp)
    8638:	18bff51e 	bne	r3,r2,8610 <_gp+0xffff725c>
    {
      *to++ = *from++;
    }
  }
}
    863c:	0001883a 	nop
    8640:	e037883a 	mov	sp,fp
    8644:	df000017 	ldw	fp,0(sp)
    8648:	dec00104 	addi	sp,sp,4
    864c:	f800283a 	ret

00008650 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8650:	defffe04 	addi	sp,sp,-8
    8654:	dfc00115 	stw	ra,4(sp)
    8658:	df000015 	stw	fp,0(sp)
    865c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8660:	01800074 	movhi	r6,1
    8664:	31a4f604 	addi	r6,r6,-27688
    8668:	01400074 	movhi	r5,1
    866c:	29644b04 	addi	r5,r5,-28372
    8670:	01000074 	movhi	r4,1
    8674:	2124f604 	addi	r4,r4,-27688
    8678:	00085e80 	call	85e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    867c:	01800074 	movhi	r6,1
    8680:	31a00804 	addi	r6,r6,-32736
    8684:	01400074 	movhi	r5,1
    8688:	29600804 	addi	r5,r5,-32736
    868c:	01000074 	movhi	r4,1
    8690:	21200804 	addi	r4,r4,-32736
    8694:	00085e80 	call	85e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8698:	01800074 	movhi	r6,1
    869c:	31a44b04 	addi	r6,r6,-28372
    86a0:	01400074 	movhi	r5,1
    86a4:	29640904 	addi	r5,r5,-28636
    86a8:	01000074 	movhi	r4,1
    86ac:	21240904 	addi	r4,r4,-28636
    86b0:	00085e80 	call	85e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    86b4:	0008bb80 	call	8bb8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    86b8:	0008c040 	call	8c04 <alt_icache_flush_all>
}
    86bc:	0001883a 	nop
    86c0:	e037883a 	mov	sp,fp
    86c4:	dfc00117 	ldw	ra,4(sp)
    86c8:	df000017 	ldw	fp,0(sp)
    86cc:	dec00204 	addi	sp,sp,8
    86d0:	f800283a 	ret

000086d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    86d4:	defffd04 	addi	sp,sp,-12
    86d8:	dfc00215 	stw	ra,8(sp)
    86dc:	df000115 	stw	fp,4(sp)
    86e0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    86e4:	0009883a 	mov	r4,zero
    86e8:	00087f80 	call	87f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    86ec:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    86f0:	00088300 	call	8830 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    86f4:	d0a0b417 	ldw	r2,-32048(gp)
    86f8:	d0e0b517 	ldw	r3,-32044(gp)
    86fc:	d120b617 	ldw	r4,-32040(gp)
    8700:	200d883a 	mov	r6,r4
    8704:	180b883a 	mov	r5,r3
    8708:	1009883a 	mov	r4,r2
    870c:	000817c0 	call	817c <main>
    8710:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8714:	01000044 	movi	r4,1
    8718:	0008b7c0 	call	8b7c <close>
  exit (result);
    871c:	e13fff17 	ldw	r4,-4(fp)
    8720:	0008c480 	call	8c48 <exit>

00008724 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8724:	defffc04 	addi	sp,sp,-16
    8728:	dfc00315 	stw	ra,12(sp)
    872c:	df000215 	stw	fp,8(sp)
    8730:	df000204 	addi	fp,sp,8
    8734:	e13fff15 	stw	r4,-4(fp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    8738:	e0bfff17 	ldw	r2,-4(fp)
    873c:	e0bffe05 	stb	r2,-8(fp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    8740:	000f883a 	mov	r7,zero
    8744:	01800044 	movi	r6,1
    8748:	e17ffe04 	addi	r5,fp,-8
    874c:	01000074 	movhi	r4,1
    8750:	2124ed04 	addi	r4,r4,-27724
    8754:	00089400 	call	8940 <altera_avalon_jtag_uart_write>
    8758:	10bfffd8 	cmpnei	r2,r2,-1
    875c:	1000021e 	bne	r2,zero,8768 <alt_putchar+0x44>
        return -1;
    8760:	00bfffc4 	movi	r2,-1
    8764:	00000106 	br	876c <alt_putchar+0x48>
    }
    return c;
    8768:	e0bfff17 	ldw	r2,-4(fp)
#else
    return putchar(c);
#endif
#endif
}
    876c:	e037883a 	mov	sp,fp
    8770:	dfc00117 	ldw	ra,4(sp)
    8774:	df000017 	ldw	fp,0(sp)
    8778:	dec00204 	addi	sp,sp,8
    877c:	f800283a 	ret

00008780 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8780:	defffd04 	addi	sp,sp,-12
    8784:	dfc00215 	stw	ra,8(sp)
    8788:	df000115 	stw	fp,4(sp)
    878c:	df000104 	addi	fp,sp,4
    8790:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8794:	e13fff17 	ldw	r4,-4(fp)
    8798:	0008c680 	call	8c68 <strlen>
    879c:	000f883a 	mov	r7,zero
    87a0:	100d883a 	mov	r6,r2
    87a4:	e17fff17 	ldw	r5,-4(fp)
    87a8:	01000074 	movhi	r4,1
    87ac:	2124ed04 	addi	r4,r4,-27724
    87b0:	00089400 	call	8940 <altera_avalon_jtag_uart_write>
#else
    return fputs(str, stdout);
#endif
#endif
}
    87b4:	e037883a 	mov	sp,fp
    87b8:	dfc00117 	ldw	ra,4(sp)
    87bc:	df000017 	ldw	fp,0(sp)
    87c0:	dec00204 	addi	sp,sp,8
    87c4:	f800283a 	ret

000087c8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    87c8:	defffd04 	addi	sp,sp,-12
    87cc:	dfc00215 	stw	ra,8(sp)
    87d0:	df000115 	stw	fp,4(sp)
    87d4:	df000104 	addi	fp,sp,4
    87d8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    87dc:	e13fff17 	ldw	r4,-4(fp)
    87e0:	00089d40 	call	89d4 <alt_busy_sleep>
}
    87e4:	e037883a 	mov	sp,fp
    87e8:	dfc00117 	ldw	ra,4(sp)
    87ec:	df000017 	ldw	fp,0(sp)
    87f0:	dec00204 	addi	sp,sp,8
    87f4:	f800283a 	ret

000087f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    87f8:	defffd04 	addi	sp,sp,-12
    87fc:	dfc00215 	stw	ra,8(sp)
    8800:	df000115 	stw	fp,4(sp)
    8804:	df000104 	addi	fp,sp,4
    8808:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    880c:	0008c240 	call	8c24 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8810:	00800044 	movi	r2,1
    8814:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8818:	0001883a 	nop
    881c:	e037883a 	mov	sp,fp
    8820:	dfc00117 	ldw	ra,4(sp)
    8824:	df000017 	ldw	fp,0(sp)
    8828:	dec00204 	addi	sp,sp,8
    882c:	f800283a 	ret

00008830 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8830:	deffff04 	addi	sp,sp,-4
    8834:	df000015 	stw	fp,0(sp)
    8838:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    883c:	0001883a 	nop
}
    8840:	0001883a 	nop
    8844:	e037883a 	mov	sp,fp
    8848:	df000017 	ldw	fp,0(sp)
    884c:	dec00104 	addi	sp,sp,4
    8850:	f800283a 	ret

00008854 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8854:	defff704 	addi	sp,sp,-36
    8858:	df000815 	stw	fp,32(sp)
    885c:	df000804 	addi	fp,sp,32
    8860:	e13ffc15 	stw	r4,-16(fp)
    8864:	e17ffd15 	stw	r5,-12(fp)
    8868:	e1bffe15 	stw	r6,-8(fp)
    886c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8870:	e0bffc17 	ldw	r2,-16(fp)
    8874:	10800017 	ldw	r2,0(r2)
    8878:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    887c:	e0bffd17 	ldw	r2,-12(fp)
    8880:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    8884:	e0bffe17 	ldw	r2,-8(fp)
    8888:	e0fffd17 	ldw	r3,-12(fp)
    888c:	1885883a 	add	r2,r3,r2
    8890:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    8894:	00001206 	br	88e0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8898:	e0bff917 	ldw	r2,-28(fp)
    889c:	10800037 	ldwio	r2,0(r2)
    88a0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    88a4:	e0bffb17 	ldw	r2,-20(fp)
    88a8:	10a0000c 	andi	r2,r2,32768
    88ac:	10000626 	beq	r2,zero,88c8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    88b0:	e0bff817 	ldw	r2,-32(fp)
    88b4:	10c00044 	addi	r3,r2,1
    88b8:	e0fff815 	stw	r3,-32(fp)
    88bc:	e0fffb17 	ldw	r3,-20(fp)
    88c0:	10c00005 	stb	r3,0(r2)
    88c4:	00000606 	br	88e0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    88c8:	e0fff817 	ldw	r3,-32(fp)
    88cc:	e0bffd17 	ldw	r2,-12(fp)
    88d0:	1880071e 	bne	r3,r2,88f0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    88d4:	e0bfff17 	ldw	r2,-4(fp)
    88d8:	1090000c 	andi	r2,r2,16384
    88dc:	1000061e 	bne	r2,zero,88f8 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    88e0:	e0fff817 	ldw	r3,-32(fp)
    88e4:	e0bffa17 	ldw	r2,-24(fp)
    88e8:	18bfeb36 	bltu	r3,r2,8898 <_gp+0xffff74e4>
    88ec:	00000306 	br	88fc <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    88f0:	0001883a 	nop
    88f4:	00000106 	br	88fc <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    88f8:	0001883a 	nop
    
  }

  if (ptr != buffer)
    88fc:	e0fff817 	ldw	r3,-32(fp)
    8900:	e0bffd17 	ldw	r2,-12(fp)
    8904:	18800426 	beq	r3,r2,8918 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    8908:	e0fff817 	ldw	r3,-32(fp)
    890c:	e0bffd17 	ldw	r2,-12(fp)
    8910:	1885c83a 	sub	r2,r3,r2
    8914:	00000606 	br	8930 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    8918:	e0bfff17 	ldw	r2,-4(fp)
    891c:	1090000c 	andi	r2,r2,16384
    8920:	10000226 	beq	r2,zero,892c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    8924:	00bffd44 	movi	r2,-11
    8928:	00000106 	br	8930 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    892c:	00bffec4 	movi	r2,-5
}
    8930:	e037883a 	mov	sp,fp
    8934:	df000017 	ldw	fp,0(sp)
    8938:	dec00104 	addi	sp,sp,4
    893c:	f800283a 	ret

00008940 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8940:	defff904 	addi	sp,sp,-28
    8944:	df000615 	stw	fp,24(sp)
    8948:	df000604 	addi	fp,sp,24
    894c:	e13ffc15 	stw	r4,-16(fp)
    8950:	e17ffd15 	stw	r5,-12(fp)
    8954:	e1bffe15 	stw	r6,-8(fp)
    8958:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    895c:	e0bffc17 	ldw	r2,-16(fp)
    8960:	10800017 	ldw	r2,0(r2)
    8964:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    8968:	e0bffe17 	ldw	r2,-8(fp)
    896c:	e0fffd17 	ldw	r3,-12(fp)
    8970:	1885883a 	add	r2,r3,r2
    8974:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    8978:	00000e06 	br	89b4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    897c:	e0bffa17 	ldw	r2,-24(fp)
    8980:	10800104 	addi	r2,r2,4
    8984:	10800037 	ldwio	r2,0(r2)
    8988:	10bfffec 	andhi	r2,r2,65535
    898c:	10000926 	beq	r2,zero,89b4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8990:	e0fffa17 	ldw	r3,-24(fp)
    8994:	e0bffd17 	ldw	r2,-12(fp)
    8998:	11000044 	addi	r4,r2,1
    899c:	e13ffd15 	stw	r4,-12(fp)
    89a0:	10800003 	ldbu	r2,0(r2)
    89a4:	10803fcc 	andi	r2,r2,255
    89a8:	1080201c 	xori	r2,r2,128
    89ac:	10bfe004 	addi	r2,r2,-128
    89b0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    89b4:	e0fffd17 	ldw	r3,-12(fp)
    89b8:	e0bffb17 	ldw	r2,-20(fp)
    89bc:	18bfef36 	bltu	r3,r2,897c <_gp+0xffff75c8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    89c0:	e0bffe17 	ldw	r2,-8(fp)
}
    89c4:	e037883a 	mov	sp,fp
    89c8:	df000017 	ldw	fp,0(sp)
    89cc:	dec00104 	addi	sp,sp,4
    89d0:	f800283a 	ret

000089d4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    89d4:	defffa04 	addi	sp,sp,-24
    89d8:	dfc00515 	stw	ra,20(sp)
    89dc:	df000415 	stw	fp,16(sp)
    89e0:	df000404 	addi	fp,sp,16
    89e4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    89e8:	00800244 	movi	r2,9
    89ec:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    89f0:	014003f4 	movhi	r5,15
    89f4:	29509004 	addi	r5,r5,16960
    89f8:	e13ffd17 	ldw	r4,-12(fp)
    89fc:	0008fc80 	call	8fc8 <__mulsi3>
    8a00:	100b883a 	mov	r5,r2
    8a04:	0100bef4 	movhi	r4,763
    8a08:	213c2004 	addi	r4,r4,-3968
    8a0c:	0008f0c0 	call	8f0c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8a10:	100b883a 	mov	r5,r2
    8a14:	01200034 	movhi	r4,32768
    8a18:	213fffc4 	addi	r4,r4,-1
    8a1c:	0008f0c0 	call	8f0c <__udivsi3>
    8a20:	100b883a 	mov	r5,r2
    8a24:	e13fff17 	ldw	r4,-4(fp)
    8a28:	0008f0c0 	call	8f0c <__udivsi3>
    8a2c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8a30:	e0bffe17 	ldw	r2,-8(fp)
    8a34:	10002a26 	beq	r2,zero,8ae0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    8a38:	e03ffc15 	stw	zero,-16(fp)
    8a3c:	00001706 	br	8a9c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8a40:	00a00034 	movhi	r2,32768
    8a44:	10bfffc4 	addi	r2,r2,-1
    8a48:	10bfffc4 	addi	r2,r2,-1
    8a4c:	103ffe1e 	bne	r2,zero,8a48 <_gp+0xffff7694>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    8a50:	014003f4 	movhi	r5,15
    8a54:	29509004 	addi	r5,r5,16960
    8a58:	e13ffd17 	ldw	r4,-12(fp)
    8a5c:	0008fc80 	call	8fc8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8a60:	100b883a 	mov	r5,r2
    8a64:	0100bef4 	movhi	r4,763
    8a68:	213c2004 	addi	r4,r4,-3968
    8a6c:	0008f0c0 	call	8f0c <__udivsi3>
    8a70:	100b883a 	mov	r5,r2
    8a74:	01200034 	movhi	r4,32768
    8a78:	213fffc4 	addi	r4,r4,-1
    8a7c:	0008f0c0 	call	8f0c <__udivsi3>
    8a80:	1007883a 	mov	r3,r2
    8a84:	e0bfff17 	ldw	r2,-4(fp)
    8a88:	10c5c83a 	sub	r2,r2,r3
    8a8c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8a90:	e0bffc17 	ldw	r2,-16(fp)
    8a94:	10800044 	addi	r2,r2,1
    8a98:	e0bffc15 	stw	r2,-16(fp)
    8a9c:	e0fffc17 	ldw	r3,-16(fp)
    8aa0:	e0bffe17 	ldw	r2,-8(fp)
    8aa4:	18bfe616 	blt	r3,r2,8a40 <_gp+0xffff768c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    8aa8:	014003f4 	movhi	r5,15
    8aac:	29509004 	addi	r5,r5,16960
    8ab0:	e13ffd17 	ldw	r4,-12(fp)
    8ab4:	0008fc80 	call	8fc8 <__mulsi3>
    8ab8:	100b883a 	mov	r5,r2
    8abc:	0100bef4 	movhi	r4,763
    8ac0:	213c2004 	addi	r4,r4,-3968
    8ac4:	0008f0c0 	call	8f0c <__udivsi3>
    8ac8:	e17fff17 	ldw	r5,-4(fp)
    8acc:	1009883a 	mov	r4,r2
    8ad0:	0008fc80 	call	8fc8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8ad4:	10bfffc4 	addi	r2,r2,-1
    8ad8:	103ffe1e 	bne	r2,zero,8ad4 <_gp+0xffff7720>
    8adc:	00000d06 	br	8b14 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    8ae0:	014003f4 	movhi	r5,15
    8ae4:	29509004 	addi	r5,r5,16960
    8ae8:	e13ffd17 	ldw	r4,-12(fp)
    8aec:	0008fc80 	call	8fc8 <__mulsi3>
    8af0:	100b883a 	mov	r5,r2
    8af4:	0100bef4 	movhi	r4,763
    8af8:	213c2004 	addi	r4,r4,-3968
    8afc:	0008f0c0 	call	8f0c <__udivsi3>
    8b00:	e17fff17 	ldw	r5,-4(fp)
    8b04:	1009883a 	mov	r4,r2
    8b08:	0008fc80 	call	8fc8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8b0c:	10bfffc4 	addi	r2,r2,-1
    8b10:	00bffe16 	blt	zero,r2,8b0c <_gp+0xffff7758>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    8b14:	0005883a 	mov	r2,zero
}
    8b18:	e037883a 	mov	sp,fp
    8b1c:	dfc00117 	ldw	ra,4(sp)
    8b20:	df000017 	ldw	fp,0(sp)
    8b24:	dec00204 	addi	sp,sp,8
    8b28:	f800283a 	ret

00008b2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8b2c:	defffe04 	addi	sp,sp,-8
    8b30:	dfc00115 	stw	ra,4(sp)
    8b34:	df000015 	stw	fp,0(sp)
    8b38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8b3c:	00800074 	movhi	r2,1
    8b40:	10a4f304 	addi	r2,r2,-27700
    8b44:	10800017 	ldw	r2,0(r2)
    8b48:	10000526 	beq	r2,zero,8b60 <alt_get_errno+0x34>
    8b4c:	00800074 	movhi	r2,1
    8b50:	10a4f304 	addi	r2,r2,-27700
    8b54:	10800017 	ldw	r2,0(r2)
    8b58:	103ee83a 	callr	r2
    8b5c:	00000206 	br	8b68 <alt_get_errno+0x3c>
    8b60:	00800074 	movhi	r2,1
    8b64:	10a5a404 	addi	r2,r2,-26992
}
    8b68:	e037883a 	mov	sp,fp
    8b6c:	dfc00117 	ldw	ra,4(sp)
    8b70:	df000017 	ldw	fp,0(sp)
    8b74:	dec00204 	addi	sp,sp,8
    8b78:	f800283a 	ret

00008b7c <close>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
    8b7c:	defffd04 	addi	sp,sp,-12
    8b80:	dfc00215 	stw	ra,8(sp)
    8b84:	df000115 	stw	fp,4(sp)
    8b88:	df000104 	addi	fp,sp,4
    8b8c:	e13fff15 	stw	r4,-4(fp)
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
    8b90:	0008b2c0 	call	8b2c <alt_get_errno>
    8b94:	1007883a 	mov	r3,r2
    8b98:	00801604 	movi	r2,88
    8b9c:	18800015 	stw	r2,0(r3)
  return -1;
    8ba0:	00bfffc4 	movi	r2,-1
}
    8ba4:	e037883a 	mov	sp,fp
    8ba8:	dfc00117 	ldw	ra,4(sp)
    8bac:	df000017 	ldw	fp,0(sp)
    8bb0:	dec00204 	addi	sp,sp,8
    8bb4:	f800283a 	ret

00008bb8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8bb8:	deffff04 	addi	sp,sp,-4
    8bbc:	df000015 	stw	fp,0(sp)
    8bc0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8bc4:	0001883a 	nop
    8bc8:	e037883a 	mov	sp,fp
    8bcc:	df000017 	ldw	fp,0(sp)
    8bd0:	dec00104 	addi	sp,sp,4
    8bd4:	f800283a 	ret

00008bd8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8bd8:	defffc04 	addi	sp,sp,-16
    8bdc:	df000315 	stw	fp,12(sp)
    8be0:	df000304 	addi	fp,sp,12
    8be4:	e13ffd15 	stw	r4,-12(fp)
    8be8:	e17ffe15 	stw	r5,-8(fp)
    8bec:	e1bfff15 	stw	r6,-4(fp)
  return len;
    8bf0:	e0bfff17 	ldw	r2,-4(fp)
}
    8bf4:	e037883a 	mov	sp,fp
    8bf8:	df000017 	ldw	fp,0(sp)
    8bfc:	dec00104 	addi	sp,sp,4
    8c00:	f800283a 	ret

00008c04 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8c04:	deffff04 	addi	sp,sp,-4
    8c08:	df000015 	stw	fp,0(sp)
    8c0c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8c10:	0001883a 	nop
    8c14:	e037883a 	mov	sp,fp
    8c18:	df000017 	ldw	fp,0(sp)
    8c1c:	dec00104 	addi	sp,sp,4
    8c20:	f800283a 	ret

00008c24 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    8c24:	deffff04 	addi	sp,sp,-4
    8c28:	df000015 	stw	fp,0(sp)
    8c2c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    8c30:	000170fa 	wrctl	ienable,zero
}
    8c34:	0001883a 	nop
    8c38:	e037883a 	mov	sp,fp
    8c3c:	df000017 	ldw	fp,0(sp)
    8c40:	dec00104 	addi	sp,sp,4
    8c44:	f800283a 	ret

00008c48 <exit>:
    8c48:	defffe04 	addi	sp,sp,-8
    8c4c:	000b883a 	mov	r5,zero
    8c50:	dc000015 	stw	r16,0(sp)
    8c54:	dfc00115 	stw	ra,4(sp)
    8c58:	2021883a 	mov	r16,r4
    8c5c:	0008c840 	call	8c84 <__call_exitprocs>
    8c60:	8009883a 	mov	r4,r16
    8c64:	0008ff00 	call	8ff0 <_exit>

00008c68 <strlen>:
    8c68:	2005883a 	mov	r2,r4
    8c6c:	10c00007 	ldb	r3,0(r2)
    8c70:	18000226 	beq	r3,zero,8c7c <strlen+0x14>
    8c74:	10800044 	addi	r2,r2,1
    8c78:	003ffc06 	br	8c6c <_gp+0xffff78b8>
    8c7c:	1105c83a 	sub	r2,r2,r4
    8c80:	f800283a 	ret

00008c84 <__call_exitprocs>:
    8c84:	defff504 	addi	sp,sp,-44
    8c88:	dd000515 	stw	r20,20(sp)
    8c8c:	05000074 	movhi	r20,1
    8c90:	dc800315 	stw	r18,12(sp)
    8c94:	dfc00a15 	stw	ra,40(sp)
    8c98:	df000915 	stw	fp,36(sp)
    8c9c:	ddc00815 	stw	r23,32(sp)
    8ca0:	dd800715 	stw	r22,28(sp)
    8ca4:	dd400615 	stw	r21,24(sp)
    8ca8:	dcc00415 	stw	r19,16(sp)
    8cac:	dc400215 	stw	r17,8(sp)
    8cb0:	dc000115 	stw	r16,4(sp)
    8cb4:	d9000015 	stw	r4,0(sp)
    8cb8:	2825883a 	mov	r18,r5
    8cbc:	a524f404 	addi	r20,r20,-27696
    8cc0:	a4400017 	ldw	r17,0(r20)
    8cc4:	8cc00c17 	ldw	r19,48(r17)
    8cc8:	8c400c04 	addi	r17,r17,48
    8ccc:	98004526 	beq	r19,zero,8de4 <__call_exitprocs+0x160>
    8cd0:	9c000117 	ldw	r16,4(r19)
    8cd4:	00900034 	movhi	r2,16384
    8cd8:	10bfffc4 	addi	r2,r2,-1
    8cdc:	9d402217 	ldw	r21,136(r19)
    8ce0:	85bfffc4 	addi	r22,r16,-1
    8ce4:	80a1883a 	add	r16,r16,r2
    8ce8:	8421883a 	add	r16,r16,r16
    8cec:	8421883a 	add	r16,r16,r16
    8cf0:	ac2f883a 	add	r23,r21,r16
    8cf4:	84000204 	addi	r16,r16,8
    8cf8:	9c21883a 	add	r16,r19,r16
    8cfc:	b0002716 	blt	r22,zero,8d9c <__call_exitprocs+0x118>
    8d00:	90000726 	beq	r18,zero,8d20 <__call_exitprocs+0x9c>
    8d04:	a800041e 	bne	r21,zero,8d18 <__call_exitprocs+0x94>
    8d08:	b5bfffc4 	addi	r22,r22,-1
    8d0c:	bdffff04 	addi	r23,r23,-4
    8d10:	843fff04 	addi	r16,r16,-4
    8d14:	003ff906 	br	8cfc <_gp+0xffff7948>
    8d18:	b9002017 	ldw	r4,128(r23)
    8d1c:	913ffa1e 	bne	r18,r4,8d08 <_gp+0xffff7954>
    8d20:	99000117 	ldw	r4,4(r19)
    8d24:	82000017 	ldw	r8,0(r16)
    8d28:	213fffc4 	addi	r4,r4,-1
    8d2c:	b100021e 	bne	r22,r4,8d38 <__call_exitprocs+0xb4>
    8d30:	9d800115 	stw	r22,4(r19)
    8d34:	00000106 	br	8d3c <__call_exitprocs+0xb8>
    8d38:	80000015 	stw	zero,0(r16)
    8d3c:	403ff226 	beq	r8,zero,8d08 <_gp+0xffff7954>
    8d40:	9f000117 	ldw	fp,4(r19)
    8d44:	a8000526 	beq	r21,zero,8d5c <__call_exitprocs+0xd8>
    8d48:	00800044 	movi	r2,1
    8d4c:	1592983a 	sll	r9,r2,r22
    8d50:	a9404017 	ldw	r5,256(r21)
    8d54:	494a703a 	and	r5,r9,r5
    8d58:	2800021e 	bne	r5,zero,8d64 <__call_exitprocs+0xe0>
    8d5c:	403ee83a 	callr	r8
    8d60:	00000906 	br	8d88 <__call_exitprocs+0x104>
    8d64:	a9004117 	ldw	r4,260(r21)
    8d68:	4908703a 	and	r4,r9,r4
    8d6c:	2000041e 	bne	r4,zero,8d80 <__call_exitprocs+0xfc>
    8d70:	b9400017 	ldw	r5,0(r23)
    8d74:	d9000017 	ldw	r4,0(sp)
    8d78:	403ee83a 	callr	r8
    8d7c:	00000206 	br	8d88 <__call_exitprocs+0x104>
    8d80:	b9000017 	ldw	r4,0(r23)
    8d84:	403ee83a 	callr	r8
    8d88:	99000117 	ldw	r4,4(r19)
    8d8c:	e13fcc1e 	bne	fp,r4,8cc0 <_gp+0xffff790c>
    8d90:	89000017 	ldw	r4,0(r17)
    8d94:	993fdc26 	beq	r19,r4,8d08 <_gp+0xffff7954>
    8d98:	003fc906 	br	8cc0 <_gp+0xffff790c>
    8d9c:	00800034 	movhi	r2,0
    8da0:	10800004 	addi	r2,r2,0
    8da4:	10000f26 	beq	r2,zero,8de4 <__call_exitprocs+0x160>
    8da8:	99400117 	ldw	r5,4(r19)
    8dac:	99000017 	ldw	r4,0(r19)
    8db0:	2800091e 	bne	r5,zero,8dd8 <__call_exitprocs+0x154>
    8db4:	20000826 	beq	r4,zero,8dd8 <__call_exitprocs+0x154>
    8db8:	89000015 	stw	r4,0(r17)
    8dbc:	a8000226 	beq	r21,zero,8dc8 <__call_exitprocs+0x144>
    8dc0:	a809883a 	mov	r4,r21
    8dc4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    8dc8:	9809883a 	mov	r4,r19
    8dcc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    8dd0:	8cc00017 	ldw	r19,0(r17)
    8dd4:	003fbd06 	br	8ccc <_gp+0xffff7918>
    8dd8:	9823883a 	mov	r17,r19
    8ddc:	2027883a 	mov	r19,r4
    8de0:	003fba06 	br	8ccc <_gp+0xffff7918>
    8de4:	dfc00a17 	ldw	ra,40(sp)
    8de8:	df000917 	ldw	fp,36(sp)
    8dec:	ddc00817 	ldw	r23,32(sp)
    8df0:	dd800717 	ldw	r22,28(sp)
    8df4:	dd400617 	ldw	r21,24(sp)
    8df8:	dd000517 	ldw	r20,20(sp)
    8dfc:	dcc00417 	ldw	r19,16(sp)
    8e00:	dc800317 	ldw	r18,12(sp)
    8e04:	dc400217 	ldw	r17,8(sp)
    8e08:	dc000117 	ldw	r16,4(sp)
    8e0c:	dec00b04 	addi	sp,sp,44
    8e10:	f800283a 	ret

00008e14 <__divsi3>:
    8e14:	20001b16 	blt	r4,zero,8e84 <__divsi3+0x70>
    8e18:	000f883a 	mov	r7,zero
    8e1c:	28001616 	blt	r5,zero,8e78 <__divsi3+0x64>
    8e20:	200d883a 	mov	r6,r4
    8e24:	29001a2e 	bgeu	r5,r4,8e90 <__divsi3+0x7c>
    8e28:	00800804 	movi	r2,32
    8e2c:	00c00044 	movi	r3,1
    8e30:	00000106 	br	8e38 <__divsi3+0x24>
    8e34:	10000d26 	beq	r2,zero,8e6c <__divsi3+0x58>
    8e38:	294b883a 	add	r5,r5,r5
    8e3c:	10bfffc4 	addi	r2,r2,-1
    8e40:	18c7883a 	add	r3,r3,r3
    8e44:	293ffb36 	bltu	r5,r4,8e34 <_gp+0xffff7a80>
    8e48:	0005883a 	mov	r2,zero
    8e4c:	18000726 	beq	r3,zero,8e6c <__divsi3+0x58>
    8e50:	0005883a 	mov	r2,zero
    8e54:	31400236 	bltu	r6,r5,8e60 <__divsi3+0x4c>
    8e58:	314dc83a 	sub	r6,r6,r5
    8e5c:	10c4b03a 	or	r2,r2,r3
    8e60:	1806d07a 	srli	r3,r3,1
    8e64:	280ad07a 	srli	r5,r5,1
    8e68:	183ffa1e 	bne	r3,zero,8e54 <_gp+0xffff7aa0>
    8e6c:	38000126 	beq	r7,zero,8e74 <__divsi3+0x60>
    8e70:	0085c83a 	sub	r2,zero,r2
    8e74:	f800283a 	ret
    8e78:	014bc83a 	sub	r5,zero,r5
    8e7c:	39c0005c 	xori	r7,r7,1
    8e80:	003fe706 	br	8e20 <_gp+0xffff7a6c>
    8e84:	0109c83a 	sub	r4,zero,r4
    8e88:	01c00044 	movi	r7,1
    8e8c:	003fe306 	br	8e1c <_gp+0xffff7a68>
    8e90:	00c00044 	movi	r3,1
    8e94:	003fee06 	br	8e50 <_gp+0xffff7a9c>

00008e98 <__modsi3>:
    8e98:	20001716 	blt	r4,zero,8ef8 <__modsi3+0x60>
    8e9c:	000f883a 	mov	r7,zero
    8ea0:	2005883a 	mov	r2,r4
    8ea4:	28001216 	blt	r5,zero,8ef0 <__modsi3+0x58>
    8ea8:	2900162e 	bgeu	r5,r4,8f04 <__modsi3+0x6c>
    8eac:	01800804 	movi	r6,32
    8eb0:	00c00044 	movi	r3,1
    8eb4:	00000106 	br	8ebc <__modsi3+0x24>
    8eb8:	30000a26 	beq	r6,zero,8ee4 <__modsi3+0x4c>
    8ebc:	294b883a 	add	r5,r5,r5
    8ec0:	31bfffc4 	addi	r6,r6,-1
    8ec4:	18c7883a 	add	r3,r3,r3
    8ec8:	293ffb36 	bltu	r5,r4,8eb8 <_gp+0xffff7b04>
    8ecc:	18000526 	beq	r3,zero,8ee4 <__modsi3+0x4c>
    8ed0:	1806d07a 	srli	r3,r3,1
    8ed4:	11400136 	bltu	r2,r5,8edc <__modsi3+0x44>
    8ed8:	1145c83a 	sub	r2,r2,r5
    8edc:	280ad07a 	srli	r5,r5,1
    8ee0:	183ffb1e 	bne	r3,zero,8ed0 <_gp+0xffff7b1c>
    8ee4:	38000126 	beq	r7,zero,8eec <__modsi3+0x54>
    8ee8:	0085c83a 	sub	r2,zero,r2
    8eec:	f800283a 	ret
    8ef0:	014bc83a 	sub	r5,zero,r5
    8ef4:	003fec06 	br	8ea8 <_gp+0xffff7af4>
    8ef8:	0109c83a 	sub	r4,zero,r4
    8efc:	01c00044 	movi	r7,1
    8f00:	003fe706 	br	8ea0 <_gp+0xffff7aec>
    8f04:	00c00044 	movi	r3,1
    8f08:	003ff106 	br	8ed0 <_gp+0xffff7b1c>

00008f0c <__udivsi3>:
    8f0c:	200d883a 	mov	r6,r4
    8f10:	2900152e 	bgeu	r5,r4,8f68 <__udivsi3+0x5c>
    8f14:	28001416 	blt	r5,zero,8f68 <__udivsi3+0x5c>
    8f18:	00800804 	movi	r2,32
    8f1c:	00c00044 	movi	r3,1
    8f20:	00000206 	br	8f2c <__udivsi3+0x20>
    8f24:	10000e26 	beq	r2,zero,8f60 <__udivsi3+0x54>
    8f28:	28000516 	blt	r5,zero,8f40 <__udivsi3+0x34>
    8f2c:	294b883a 	add	r5,r5,r5
    8f30:	10bfffc4 	addi	r2,r2,-1
    8f34:	18c7883a 	add	r3,r3,r3
    8f38:	293ffa36 	bltu	r5,r4,8f24 <_gp+0xffff7b70>
    8f3c:	18000826 	beq	r3,zero,8f60 <__udivsi3+0x54>
    8f40:	0005883a 	mov	r2,zero
    8f44:	31400236 	bltu	r6,r5,8f50 <__udivsi3+0x44>
    8f48:	314dc83a 	sub	r6,r6,r5
    8f4c:	10c4b03a 	or	r2,r2,r3
    8f50:	1806d07a 	srli	r3,r3,1
    8f54:	280ad07a 	srli	r5,r5,1
    8f58:	183ffa1e 	bne	r3,zero,8f44 <_gp+0xffff7b90>
    8f5c:	f800283a 	ret
    8f60:	0005883a 	mov	r2,zero
    8f64:	f800283a 	ret
    8f68:	00c00044 	movi	r3,1
    8f6c:	003ff406 	br	8f40 <_gp+0xffff7b8c>

00008f70 <__umodsi3>:
    8f70:	2005883a 	mov	r2,r4
    8f74:	2900122e 	bgeu	r5,r4,8fc0 <__umodsi3+0x50>
    8f78:	28001116 	blt	r5,zero,8fc0 <__umodsi3+0x50>
    8f7c:	01800804 	movi	r6,32
    8f80:	00c00044 	movi	r3,1
    8f84:	00000206 	br	8f90 <__umodsi3+0x20>
    8f88:	30000c26 	beq	r6,zero,8fbc <__umodsi3+0x4c>
    8f8c:	28000516 	blt	r5,zero,8fa4 <__umodsi3+0x34>
    8f90:	294b883a 	add	r5,r5,r5
    8f94:	31bfffc4 	addi	r6,r6,-1
    8f98:	18c7883a 	add	r3,r3,r3
    8f9c:	293ffa36 	bltu	r5,r4,8f88 <_gp+0xffff7bd4>
    8fa0:	18000626 	beq	r3,zero,8fbc <__umodsi3+0x4c>
    8fa4:	1806d07a 	srli	r3,r3,1
    8fa8:	11400136 	bltu	r2,r5,8fb0 <__umodsi3+0x40>
    8fac:	1145c83a 	sub	r2,r2,r5
    8fb0:	280ad07a 	srli	r5,r5,1
    8fb4:	183ffb1e 	bne	r3,zero,8fa4 <_gp+0xffff7bf0>
    8fb8:	f800283a 	ret
    8fbc:	f800283a 	ret
    8fc0:	00c00044 	movi	r3,1
    8fc4:	003ff706 	br	8fa4 <_gp+0xffff7bf0>

00008fc8 <__mulsi3>:
    8fc8:	0005883a 	mov	r2,zero
    8fcc:	20000726 	beq	r4,zero,8fec <__mulsi3+0x24>
    8fd0:	20c0004c 	andi	r3,r4,1
    8fd4:	2008d07a 	srli	r4,r4,1
    8fd8:	18000126 	beq	r3,zero,8fe0 <__mulsi3+0x18>
    8fdc:	1145883a 	add	r2,r2,r5
    8fe0:	294b883a 	add	r5,r5,r5
    8fe4:	203ffa1e 	bne	r4,zero,8fd0 <_gp+0xffff7c1c>
    8fe8:	f800283a 	ret
    8fec:	f800283a 	ret

00008ff0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    8ff0:	defffd04 	addi	sp,sp,-12
    8ff4:	df000215 	stw	fp,8(sp)
    8ff8:	df000204 	addi	fp,sp,8
    8ffc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    9000:	0001883a 	nop
    9004:	e0bfff17 	ldw	r2,-4(fp)
    9008:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    900c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9010:	10000226 	beq	r2,zero,901c <_exit+0x2c>
    ALT_SIM_FAIL();
    9014:	002af070 	cmpltui	zero,zero,43969
    9018:	00000106 	br	9020 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    901c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9020:	003fff06 	br	9020 <_gp+0xffff7c6c>
