
scanner_integration.elf:     file format elf32-littlenios2
scanner_integration.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001028 memsz 0x00001028 flags r-x
    LOAD off    0x00002048 vaddr 0x00009048 paddr 0x000092f4 align 2**12
         filesz 0x000002ac memsz 0x000002ac flags rw-
    LOAD off    0x000025a0 vaddr 0x000095a0 paddr 0x000095a0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000022f4  2**0
                  CONTENTS
  2 .text         00000f30  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000f8  00008f50  00008f50  00001f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002ac  00009048  000092f4  00002048  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000095a0  000095a0  000025a0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000095b0  000095b0  000022f4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000330  00000000  00000000  00002318  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000029fc  00000000  00000000  00002648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000010ff  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000013d5  00000000  00000000  00006143  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000544  00000000  00000000  00007518  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001037  00000000  00000000  00007a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006d4  00000000  00000000  00008a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00009168  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e0  00000000  00000000  000091a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000a55a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000a55d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000a569  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000a56a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000a56b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000a56f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000a573  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0000a577  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0000a582  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0000a58d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0000a598  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000029  00000000  00000000  0000a5a3  2**0
                  CONTENTS, READONLY
 29 .jdi          00004239  00000000  00000000  0000a5cc  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000d24fa  00000000  00000000  0000e805  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008f50 l    d  .rodata	00000000 .rodata
00009048 l    d  .rwdata	00000000 .rwdata
000095a0 l    d  .bss	00000000 .bss
000095b0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../scanner_integration_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 scanner_integration.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00008514 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00008a58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008b04 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
000091f0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008600 g     F .text	00000050 alt_main
000092f4 g       *ABS*	00000000 __flash_rwdata_start
000086ac g     F .text	00000048 alt_putstr
00008b50 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000095ac g     O .bss	00000004 errno
000095a4 g     O .bss	00000004 alt_argv
000112d0 g       *ABS*	00000000 _gp
000086f4 g     F .text	00000030 usleep
00009070 g     O .rwdata	00000180 alt_fd_list
000080e0 g     F .text	0000009c scan_inq
00008780 g     F .text	000000ec altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008e38 g     F .text	00000064 .hidden __udivsi3
000092e4 g     O .rwdata	00000004 alt_max_fd
000092ec g     O .rwdata	00000004 _global_impure_ptr
000095b0 g       *ABS*	00000000 __bss_end
000084b0 g     F .text	00000064 alt_getchar
00009048 g     O .rwdata	00000028 alt_dev_null
00008ae4 g     F .text	00000020 alt_dcache_flush_all
000092f4 g       *ABS*	00000000 __ram_rwdata_end
000092dc g     O .rwdata	00000008 alt_dev_list
00009048 g       *ABS*	00000000 __ram_rodata_end
000092d0 g     O .rwdata	00000004 jtag_uart_0
00008e9c g     F .text	00000058 .hidden __umodsi3
000095b0 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
0000886c g     F .text	00000094 altera_avalon_jtag_uart_write
00008bb0 g     F .text	00000190 __call_exitprocs
00008020 g     F .text	0000003c _start
0000875c g     F .text	00000024 alt_sys_init
00008ef4 g     F .text	00000028 .hidden __mulsi3
00009048 g       *ABS*	00000000 __ram_rwdata_start
00008f50 g       *ABS*	00000000 __ram_rodata_start
0000805c g     F .text	00000084 scanner_init
00008900 g     F .text	00000158 alt_busy_sleep
000095b0 g       *ABS*	00000000 __alt_stack_base
000095a0 g       *ABS*	00000000 __bss_start
0000817c g     F .text	00000334 main
000095a8 g     O .bss	00000004 alt_envp
000092e8 g     O .rwdata	00000004 alt_errno
00008d40 g     F .text	00000084 .hidden __divsi3
00008f50 g       *ABS*	00000000 __flash_rodata_start
00008724 g     F .text	00000038 alt_irq_init
000092f0 g     O .rwdata	00000004 _impure_ptr
000095a0 g     O .bss	00000004 alt_argc
000092d4 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
000092f4 g       *ABS*	00000000 _edata
000095b0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008b74 g     F .text	00000020 exit
00008dc4 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008f1c g     F .text	00000034 _exit
00008b94 g     F .text	0000001c strlen
00008650 g     F .text	0000005c alt_putchar
00008b30 g     F .text	00000020 alt_icache_flush_all
00008aa8 g     F .text	0000003c close
0000857c g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d684b414 	ori	gp,gp,4816
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a56814 	ori	r2,r2,38304

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e56c14 	ori	r3,r3,38320

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff6d74>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000857c0 	call	857c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00086000 	call	8600 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff6d88>

0000805c <scanner_init>:
    805c:	deffff04 	addi	sp,sp,-4
    8060:	df000015 	stw	fp,0(sp)
    8064:	d839883a 	mov	fp,sp
    8068:	00800074 	movhi	r2,1
    806c:	10844404 	addi	r2,r2,4368
    8070:	10000005 	stb	zero,0(r2)
    8074:	00800074 	movhi	r2,1
    8078:	10844c04 	addi	r2,r2,4400
    807c:	10000005 	stb	zero,0(r2)
    8080:	00800074 	movhi	r2,1
    8084:	10844804 	addi	r2,r2,4384
    8088:	10000005 	stb	zero,0(r2)
    808c:	00800074 	movhi	r2,1
    8090:	10844404 	addi	r2,r2,4368
    8094:	00c00044 	movi	r3,1
    8098:	10c00005 	stb	r3,0(r2)
    809c:	00800074 	movhi	r2,1
    80a0:	10843404 	addi	r2,r2,4304
    80a4:	10000005 	stb	zero,0(r2)
    80a8:	00800074 	movhi	r2,1
    80ac:	10843804 	addi	r2,r2,4320
    80b0:	10000005 	stb	zero,0(r2)
    80b4:	00800074 	movhi	r2,1
    80b8:	10843c04 	addi	r2,r2,4336
    80bc:	10000005 	stb	zero,0(r2)
    80c0:	00800074 	movhi	r2,1
    80c4:	10844004 	addi	r2,r2,4352
    80c8:	10000005 	stb	zero,0(r2)
    80cc:	0001883a 	nop
    80d0:	e037883a 	mov	sp,fp
    80d4:	df000017 	ldw	fp,0(sp)
    80d8:	dec00104 	addi	sp,sp,4
    80dc:	f800283a 	ret

000080e0 <scan_inq>:
    80e0:	defffd04 	addi	sp,sp,-12
    80e4:	dfc00215 	stw	ra,8(sp)
    80e8:	df000115 	stw	fp,4(sp)
    80ec:	df000104 	addi	fp,sp,4
    80f0:	00801b84 	movi	r2,110
    80f4:	e0bfff05 	stb	r2,-4(fp)
    80f8:	00001706 	br	8158 <scan_inq+0x78>
    80fc:	01000074 	movhi	r4,1
    8100:	2123d404 	addi	r4,r4,-28848
    8104:	00086ac0 	call	86ac <alt_putstr>
    8108:	00084b00 	call	84b0 <alt_getchar>
    810c:	e0bfff05 	stb	r2,-4(fp)
    8110:	00084b00 	call	84b0 <alt_getchar>
    8114:	e0bfff07 	ldb	r2,-4(fp)
    8118:	10801e58 	cmpnei	r2,r2,121
    811c:	10000b1e 	bne	r2,zero,814c <scan_inq+0x6c>
    8120:	00800074 	movhi	r2,1
    8124:	10844c04 	addi	r2,r2,4400
    8128:	00c00044 	movi	r3,1
    812c:	10c00005 	stb	r3,0(r2)
    8130:	00800074 	movhi	r2,1
    8134:	10844c04 	addi	r2,r2,4400
    8138:	10000005 	stb	zero,0(r2)
    813c:	01000074 	movhi	r4,1
    8140:	2123da04 	addi	r4,r4,-28824
    8144:	00086ac0 	call	86ac <alt_putstr>
    8148:	00000306 	br	8158 <scan_inq+0x78>
    814c:	00800074 	movhi	r2,1
    8150:	10844c04 	addi	r2,r2,4400
    8154:	10000005 	stb	zero,0(r2)
    8158:	e0bfff07 	ldb	r2,-4(fp)
    815c:	10801ba0 	cmpeqi	r2,r2,110
    8160:	103fe61e 	bne	r2,zero,80fc <_gp+0xffff6e2c>
    8164:	0001883a 	nop
    8168:	e037883a 	mov	sp,fp
    816c:	dfc00117 	ldw	ra,4(sp)
    8170:	df000017 	ldw	fp,0(sp)
    8174:	dec00204 	addi	sp,sp,8
    8178:	f800283a 	ret

0000817c <main>:
    817c:	defffc04 	addi	sp,sp,-16
    8180:	dfc00315 	stw	ra,12(sp)
    8184:	df000215 	stw	fp,8(sp)
    8188:	df000204 	addi	fp,sp,8
    818c:	e03ffe15 	stw	zero,-8(fp)
    8190:	00801b84 	movi	r2,110
    8194:	e0bfff05 	stb	r2,-4(fp)
    8198:	000805c0 	call	805c <scanner_init>
    819c:	01000074 	movhi	r4,1
    81a0:	2123de04 	addi	r4,r4,-28808
    81a4:	00086ac0 	call	86ac <alt_putstr>
    81a8:	01000284 	movi	r4,10
    81ac:	00086f40 	call	86f4 <usleep>
    81b0:	00080e00 	call	80e0 <scan_inq>
    81b4:	e03ffe15 	stw	zero,-8(fp)
    81b8:	00001f06 	br	8238 <main+0xbc>
    81bc:	00800074 	movhi	r2,1
    81c0:	10846404 	addi	r2,r2,4496
    81c4:	e0fffe17 	ldw	r3,-8(fp)
    81c8:	10c00005 	stb	r3,0(r2)
    81cc:	00800074 	movhi	r2,1
    81d0:	10843404 	addi	r2,r2,4304
    81d4:	00c00044 	movi	r3,1
    81d8:	10c00005 	stb	r3,0(r2)
    81dc:	01000234 	movhi	r4,8
    81e0:	21284804 	addi	r4,r4,-24288
    81e4:	00086f40 	call	86f4 <usleep>
    81e8:	00800074 	movhi	r2,1
    81ec:	10843404 	addi	r2,r2,4304
    81f0:	10000005 	stb	zero,0(r2)
    81f4:	00800074 	movhi	r2,1
    81f8:	10845404 	addi	r2,r2,4432
    81fc:	10800003 	ldbu	r2,0(r2)
    8200:	10803fcc 	andi	r2,r2,255
    8204:	1080201c 	xori	r2,r2,128
    8208:	10bfe004 	addi	r2,r2,-128
    820c:	10800058 	cmpnei	r2,r2,1
    8210:	1000061e 	bne	r2,zero,822c <main+0xb0>
    8214:	e0bffe17 	ldw	r2,-8(fp)
    8218:	10800218 	cmpnei	r2,r2,8
    821c:	1000031e 	bne	r2,zero,822c <main+0xb0>
    8220:	01000074 	movhi	r4,1
    8224:	2123e404 	addi	r4,r4,-28784
    8228:	00086ac0 	call	86ac <alt_putstr>
    822c:	e0bffe17 	ldw	r2,-8(fp)
    8230:	10800044 	addi	r2,r2,1
    8234:	e0bffe15 	stw	r2,-8(fp)
    8238:	e0bffe17 	ldw	r2,-8(fp)
    823c:	10800290 	cmplti	r2,r2,10
    8240:	103fde1e 	bne	r2,zero,81bc <_gp+0xffff6eec>
    8244:	01000284 	movi	r4,10
    8248:	00086f40 	call	86f4 <usleep>
    824c:	00800074 	movhi	r2,1
    8250:	10846404 	addi	r2,r2,4496
    8254:	10000005 	stb	zero,0(r2)
    8258:	01000074 	movhi	r4,1
    825c:	2123ec04 	addi	r4,r4,-28752
    8260:	00086ac0 	call	86ac <alt_putstr>
    8264:	00084b00 	call	84b0 <alt_getchar>
    8268:	e0bfff05 	stb	r2,-4(fp)
    826c:	00084b00 	call	84b0 <alt_getchar>
    8270:	e0bfff07 	ldb	r2,-4(fp)
    8274:	10801e58 	cmpnei	r2,r2,121
    8278:	10002e1e 	bne	r2,zero,8334 <main+0x1b8>
    827c:	00800074 	movhi	r2,1
    8280:	10844804 	addi	r2,r2,4384
    8284:	00c00044 	movi	r3,1
    8288:	10c00005 	stb	r3,0(r2)
    828c:	00800074 	movhi	r2,1
    8290:	10844804 	addi	r2,r2,4384
    8294:	10000005 	stb	zero,0(r2)
    8298:	01000074 	movhi	r4,1
    829c:	2123f404 	addi	r4,r4,-28720
    82a0:	00086ac0 	call	86ac <alt_putstr>
    82a4:	e03ffe15 	stw	zero,-8(fp)
    82a8:	00001b06 	br	8318 <main+0x19c>
    82ac:	00800074 	movhi	r2,1
    82b0:	10845804 	addi	r2,r2,4448
    82b4:	10800003 	ldbu	r2,0(r2)
    82b8:	10803fcc 	andi	r2,r2,255
    82bc:	1080201c 	xori	r2,r2,128
    82c0:	10bfe004 	addi	r2,r2,-128
    82c4:	10800c04 	addi	r2,r2,48
    82c8:	1009883a 	mov	r4,r2
    82cc:	00086500 	call	8650 <alt_putchar>
    82d0:	01000074 	movhi	r4,1
    82d4:	2123f904 	addi	r4,r4,-28700
    82d8:	00086ac0 	call	86ac <alt_putstr>
    82dc:	00800074 	movhi	r2,1
    82e0:	10843c04 	addi	r2,r2,4336
    82e4:	00c00044 	movi	r3,1
    82e8:	10c00005 	stb	r3,0(r2)
    82ec:	01000284 	movi	r4,10
    82f0:	00086f40 	call	86f4 <usleep>
    82f4:	00800074 	movhi	r2,1
    82f8:	10843c04 	addi	r2,r2,4336
    82fc:	10000005 	stb	zero,0(r2)
    8300:	01000234 	movhi	r4,8
    8304:	21284804 	addi	r4,r4,-24288
    8308:	00086f40 	call	86f4 <usleep>
    830c:	e0bffe17 	ldw	r2,-8(fp)
    8310:	10800044 	addi	r2,r2,1
    8314:	e0bffe15 	stw	r2,-8(fp)
    8318:	e0bffe17 	ldw	r2,-8(fp)
    831c:	10800290 	cmplti	r2,r2,10
    8320:	103fe21e 	bne	r2,zero,82ac <_gp+0xffff6fdc>
    8324:	01000074 	movhi	r4,1
    8328:	2123fa04 	addi	r4,r4,-28696
    832c:	00086ac0 	call	86ac <alt_putstr>
    8330:	00080e00 	call	80e0 <scan_inq>
    8334:	e03ffe15 	stw	zero,-8(fp)
    8338:	00001f06 	br	83b8 <main+0x23c>
    833c:	00800074 	movhi	r2,1
    8340:	10846004 	addi	r2,r2,4480
    8344:	e0fffe17 	ldw	r3,-8(fp)
    8348:	10c00005 	stb	r3,0(r2)
    834c:	00800074 	movhi	r2,1
    8350:	10843804 	addi	r2,r2,4320
    8354:	00c00044 	movi	r3,1
    8358:	10c00005 	stb	r3,0(r2)
    835c:	01000234 	movhi	r4,8
    8360:	21284804 	addi	r4,r4,-24288
    8364:	00086f40 	call	86f4 <usleep>
    8368:	00800074 	movhi	r2,1
    836c:	10843804 	addi	r2,r2,4320
    8370:	10000005 	stb	zero,0(r2)
    8374:	00800074 	movhi	r2,1
    8378:	10845004 	addi	r2,r2,4416
    837c:	10800003 	ldbu	r2,0(r2)
    8380:	10803fcc 	andi	r2,r2,255
    8384:	1080201c 	xori	r2,r2,128
    8388:	10bfe004 	addi	r2,r2,-128
    838c:	10800058 	cmpnei	r2,r2,1
    8390:	1000061e 	bne	r2,zero,83ac <main+0x230>
    8394:	e0bffe17 	ldw	r2,-8(fp)
    8398:	10800218 	cmpnei	r2,r2,8
    839c:	1000031e 	bne	r2,zero,83ac <main+0x230>
    83a0:	01000074 	movhi	r4,1
    83a4:	2123ff04 	addi	r4,r4,-28676
    83a8:	00086ac0 	call	86ac <alt_putstr>
    83ac:	e0bffe17 	ldw	r2,-8(fp)
    83b0:	10800044 	addi	r2,r2,1
    83b4:	e0bffe15 	stw	r2,-8(fp)
    83b8:	e0bffe17 	ldw	r2,-8(fp)
    83bc:	10800290 	cmplti	r2,r2,10
    83c0:	103fde1e 	bne	r2,zero,833c <_gp+0xffff706c>
    83c4:	00800074 	movhi	r2,1
    83c8:	10846004 	addi	r2,r2,4480
    83cc:	10000005 	stb	zero,0(r2)
    83d0:	01000074 	movhi	r4,1
    83d4:	21240704 	addi	r4,r4,-28644
    83d8:	00086ac0 	call	86ac <alt_putstr>
    83dc:	00084b00 	call	84b0 <alt_getchar>
    83e0:	e0bfff05 	stb	r2,-4(fp)
    83e4:	00084b00 	call	84b0 <alt_getchar>
    83e8:	e0bfff07 	ldb	r2,-4(fp)
    83ec:	10801e58 	cmpnei	r2,r2,121
    83f0:	103f701e 	bne	r2,zero,81b4 <_gp+0xffff6ee4>
    83f4:	00800074 	movhi	r2,1
    83f8:	10844804 	addi	r2,r2,4384
    83fc:	00c00044 	movi	r3,1
    8400:	10c00005 	stb	r3,0(r2)
    8404:	00800074 	movhi	r2,1
    8408:	10844804 	addi	r2,r2,4384
    840c:	10000005 	stb	zero,0(r2)
    8410:	01000074 	movhi	r4,1
    8414:	2123f404 	addi	r4,r4,-28720
    8418:	00086ac0 	call	86ac <alt_putstr>
    841c:	e03ffe15 	stw	zero,-8(fp)
    8420:	00001b06 	br	8490 <main+0x314>
    8424:	00800074 	movhi	r2,1
    8428:	10845c04 	addi	r2,r2,4464
    842c:	10800003 	ldbu	r2,0(r2)
    8430:	10803fcc 	andi	r2,r2,255
    8434:	1080201c 	xori	r2,r2,128
    8438:	10bfe004 	addi	r2,r2,-128
    843c:	10800c04 	addi	r2,r2,48
    8440:	1009883a 	mov	r4,r2
    8444:	00086500 	call	8650 <alt_putchar>
    8448:	01000074 	movhi	r4,1
    844c:	2123f904 	addi	r4,r4,-28700
    8450:	00086ac0 	call	86ac <alt_putstr>
    8454:	00800074 	movhi	r2,1
    8458:	10844004 	addi	r2,r2,4352
    845c:	00c00044 	movi	r3,1
    8460:	10c00005 	stb	r3,0(r2)
    8464:	01000284 	movi	r4,10
    8468:	00086f40 	call	86f4 <usleep>
    846c:	00800074 	movhi	r2,1
    8470:	10844004 	addi	r2,r2,4352
    8474:	10000005 	stb	zero,0(r2)
    8478:	01000234 	movhi	r4,8
    847c:	21284804 	addi	r4,r4,-24288
    8480:	00086f40 	call	86f4 <usleep>
    8484:	e0bffe17 	ldw	r2,-8(fp)
    8488:	10800044 	addi	r2,r2,1
    848c:	e0bffe15 	stw	r2,-8(fp)
    8490:	e0bffe17 	ldw	r2,-8(fp)
    8494:	10800290 	cmplti	r2,r2,10
    8498:	103fe21e 	bne	r2,zero,8424 <_gp+0xffff7154>
    849c:	01000074 	movhi	r4,1
    84a0:	2123fa04 	addi	r4,r4,-28696
    84a4:	00086ac0 	call	86ac <alt_putstr>
    84a8:	00080e00 	call	80e0 <scan_inq>
    84ac:	003f4106 	br	81b4 <_gp+0xffff6ee4>

000084b0 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    84b0:	defffd04 	addi	sp,sp,-12
    84b4:	dfc00215 	stw	ra,8(sp)
    84b8:	df000115 	stw	fp,4(sp)
    84bc:	df000104 	addi	fp,sp,4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    84c0:	00800074 	movhi	r2,1
    84c4:	10a41c04 	addi	r2,r2,-28560
    84c8:	10800217 	ldw	r2,8(r2)
    84cc:	100f883a 	mov	r7,r2
    84d0:	01800044 	movi	r6,1
    84d4:	e17fff04 	addi	r5,fp,-4
    84d8:	01000074 	movhi	r4,1
    84dc:	2124b404 	addi	r4,r4,-27952
    84e0:	00087800 	call	8780 <altera_avalon_jtag_uart_read>
    84e4:	00800216 	blt	zero,r2,84f0 <alt_getchar+0x40>
        return -1;
    84e8:	00bfffc4 	movi	r2,-1
    84ec:	00000406 	br	8500 <alt_getchar+0x50>
    }
    return c;
    84f0:	e0bfff03 	ldbu	r2,-4(fp)
    84f4:	10803fcc 	andi	r2,r2,255
    84f8:	1080201c 	xori	r2,r2,128
    84fc:	10bfe004 	addi	r2,r2,-128
#else
    return getchar();
#endif
#endif
}
    8500:	e037883a 	mov	sp,fp
    8504:	dfc00117 	ldw	ra,4(sp)
    8508:	df000017 	ldw	fp,0(sp)
    850c:	dec00204 	addi	sp,sp,8
    8510:	f800283a 	ret

00008514 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8514:	defffc04 	addi	sp,sp,-16
    8518:	df000315 	stw	fp,12(sp)
    851c:	df000304 	addi	fp,sp,12
    8520:	e13ffd15 	stw	r4,-12(fp)
    8524:	e17ffe15 	stw	r5,-8(fp)
    8528:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    852c:	e0fffe17 	ldw	r3,-8(fp)
    8530:	e0bffd17 	ldw	r2,-12(fp)
    8534:	18800c26 	beq	r3,r2,8568 <alt_load_section+0x54>
  {
    while( to != end )
    8538:	00000806 	br	855c <alt_load_section+0x48>
    {
      *to++ = *from++;
    853c:	e0bffe17 	ldw	r2,-8(fp)
    8540:	10c00104 	addi	r3,r2,4
    8544:	e0fffe15 	stw	r3,-8(fp)
    8548:	e0fffd17 	ldw	r3,-12(fp)
    854c:	19000104 	addi	r4,r3,4
    8550:	e13ffd15 	stw	r4,-12(fp)
    8554:	18c00017 	ldw	r3,0(r3)
    8558:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    855c:	e0fffe17 	ldw	r3,-8(fp)
    8560:	e0bfff17 	ldw	r2,-4(fp)
    8564:	18bff51e 	bne	r3,r2,853c <_gp+0xffff726c>
    {
      *to++ = *from++;
    }
  }
}
    8568:	0001883a 	nop
    856c:	e037883a 	mov	sp,fp
    8570:	df000017 	ldw	fp,0(sp)
    8574:	dec00104 	addi	sp,sp,4
    8578:	f800283a 	ret

0000857c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    857c:	defffe04 	addi	sp,sp,-8
    8580:	dfc00115 	stw	ra,4(sp)
    8584:	df000015 	stw	fp,0(sp)
    8588:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    858c:	01800074 	movhi	r6,1
    8590:	31a4bd04 	addi	r6,r6,-27916
    8594:	01400074 	movhi	r5,1
    8598:	29641204 	addi	r5,r5,-28600
    859c:	01000074 	movhi	r4,1
    85a0:	2124bd04 	addi	r4,r4,-27916
    85a4:	00085140 	call	8514 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    85a8:	01800074 	movhi	r6,1
    85ac:	31a00804 	addi	r6,r6,-32736
    85b0:	01400074 	movhi	r5,1
    85b4:	29600804 	addi	r5,r5,-32736
    85b8:	01000074 	movhi	r4,1
    85bc:	21200804 	addi	r4,r4,-32736
    85c0:	00085140 	call	8514 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    85c4:	01800074 	movhi	r6,1
    85c8:	31a41204 	addi	r6,r6,-28600
    85cc:	01400074 	movhi	r5,1
    85d0:	2963d404 	addi	r5,r5,-28848
    85d4:	01000074 	movhi	r4,1
    85d8:	2123d404 	addi	r4,r4,-28848
    85dc:	00085140 	call	8514 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    85e0:	0008ae40 	call	8ae4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    85e4:	0008b300 	call	8b30 <alt_icache_flush_all>
}
    85e8:	0001883a 	nop
    85ec:	e037883a 	mov	sp,fp
    85f0:	dfc00117 	ldw	ra,4(sp)
    85f4:	df000017 	ldw	fp,0(sp)
    85f8:	dec00204 	addi	sp,sp,8
    85fc:	f800283a 	ret

00008600 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8600:	defffd04 	addi	sp,sp,-12
    8604:	dfc00215 	stw	ra,8(sp)
    8608:	df000115 	stw	fp,4(sp)
    860c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8610:	0009883a 	mov	r4,zero
    8614:	00087240 	call	8724 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8618:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    861c:	000875c0 	call	875c <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8620:	d0a0b417 	ldw	r2,-32048(gp)
    8624:	d0e0b517 	ldw	r3,-32044(gp)
    8628:	d120b617 	ldw	r4,-32040(gp)
    862c:	200d883a 	mov	r6,r4
    8630:	180b883a 	mov	r5,r3
    8634:	1009883a 	mov	r4,r2
    8638:	000817c0 	call	817c <main>
    863c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8640:	01000044 	movi	r4,1
    8644:	0008aa80 	call	8aa8 <close>
  exit (result);
    8648:	e13fff17 	ldw	r4,-4(fp)
    864c:	0008b740 	call	8b74 <exit>

00008650 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8650:	defffc04 	addi	sp,sp,-16
    8654:	dfc00315 	stw	ra,12(sp)
    8658:	df000215 	stw	fp,8(sp)
    865c:	df000204 	addi	fp,sp,8
    8660:	e13fff15 	stw	r4,-4(fp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    8664:	e0bfff17 	ldw	r2,-4(fp)
    8668:	e0bffe05 	stb	r2,-8(fp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    866c:	000f883a 	mov	r7,zero
    8670:	01800044 	movi	r6,1
    8674:	e17ffe04 	addi	r5,fp,-8
    8678:	01000074 	movhi	r4,1
    867c:	2124b404 	addi	r4,r4,-27952
    8680:	000886c0 	call	886c <altera_avalon_jtag_uart_write>
    8684:	10bfffd8 	cmpnei	r2,r2,-1
    8688:	1000021e 	bne	r2,zero,8694 <alt_putchar+0x44>
        return -1;
    868c:	00bfffc4 	movi	r2,-1
    8690:	00000106 	br	8698 <alt_putchar+0x48>
    }
    return c;
    8694:	e0bfff17 	ldw	r2,-4(fp)
#else
    return putchar(c);
#endif
#endif
}
    8698:	e037883a 	mov	sp,fp
    869c:	dfc00117 	ldw	ra,4(sp)
    86a0:	df000017 	ldw	fp,0(sp)
    86a4:	dec00204 	addi	sp,sp,8
    86a8:	f800283a 	ret

000086ac <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    86ac:	defffd04 	addi	sp,sp,-12
    86b0:	dfc00215 	stw	ra,8(sp)
    86b4:	df000115 	stw	fp,4(sp)
    86b8:	df000104 	addi	fp,sp,4
    86bc:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    86c0:	e13fff17 	ldw	r4,-4(fp)
    86c4:	0008b940 	call	8b94 <strlen>
    86c8:	000f883a 	mov	r7,zero
    86cc:	100d883a 	mov	r6,r2
    86d0:	e17fff17 	ldw	r5,-4(fp)
    86d4:	01000074 	movhi	r4,1
    86d8:	2124b404 	addi	r4,r4,-27952
    86dc:	000886c0 	call	886c <altera_avalon_jtag_uart_write>
#else
    return fputs(str, stdout);
#endif
#endif
}
    86e0:	e037883a 	mov	sp,fp
    86e4:	dfc00117 	ldw	ra,4(sp)
    86e8:	df000017 	ldw	fp,0(sp)
    86ec:	dec00204 	addi	sp,sp,8
    86f0:	f800283a 	ret

000086f4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    86f4:	defffd04 	addi	sp,sp,-12
    86f8:	dfc00215 	stw	ra,8(sp)
    86fc:	df000115 	stw	fp,4(sp)
    8700:	df000104 	addi	fp,sp,4
    8704:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    8708:	e13fff17 	ldw	r4,-4(fp)
    870c:	00089000 	call	8900 <alt_busy_sleep>
}
    8710:	e037883a 	mov	sp,fp
    8714:	dfc00117 	ldw	ra,4(sp)
    8718:	df000017 	ldw	fp,0(sp)
    871c:	dec00204 	addi	sp,sp,8
    8720:	f800283a 	ret

00008724 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8724:	defffd04 	addi	sp,sp,-12
    8728:	dfc00215 	stw	ra,8(sp)
    872c:	df000115 	stw	fp,4(sp)
    8730:	df000104 	addi	fp,sp,4
    8734:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8738:	0008b500 	call	8b50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    873c:	00800044 	movi	r2,1
    8740:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8744:	0001883a 	nop
    8748:	e037883a 	mov	sp,fp
    874c:	dfc00117 	ldw	ra,4(sp)
    8750:	df000017 	ldw	fp,0(sp)
    8754:	dec00204 	addi	sp,sp,8
    8758:	f800283a 	ret

0000875c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    875c:	deffff04 	addi	sp,sp,-4
    8760:	df000015 	stw	fp,0(sp)
    8764:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    8768:	0001883a 	nop
}
    876c:	0001883a 	nop
    8770:	e037883a 	mov	sp,fp
    8774:	df000017 	ldw	fp,0(sp)
    8778:	dec00104 	addi	sp,sp,4
    877c:	f800283a 	ret

00008780 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8780:	defff704 	addi	sp,sp,-36
    8784:	df000815 	stw	fp,32(sp)
    8788:	df000804 	addi	fp,sp,32
    878c:	e13ffc15 	stw	r4,-16(fp)
    8790:	e17ffd15 	stw	r5,-12(fp)
    8794:	e1bffe15 	stw	r6,-8(fp)
    8798:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    879c:	e0bffc17 	ldw	r2,-16(fp)
    87a0:	10800017 	ldw	r2,0(r2)
    87a4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    87a8:	e0bffd17 	ldw	r2,-12(fp)
    87ac:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    87b0:	e0bffe17 	ldw	r2,-8(fp)
    87b4:	e0fffd17 	ldw	r3,-12(fp)
    87b8:	1885883a 	add	r2,r3,r2
    87bc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    87c0:	00001206 	br	880c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    87c4:	e0bff917 	ldw	r2,-28(fp)
    87c8:	10800037 	ldwio	r2,0(r2)
    87cc:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    87d0:	e0bffb17 	ldw	r2,-20(fp)
    87d4:	10a0000c 	andi	r2,r2,32768
    87d8:	10000626 	beq	r2,zero,87f4 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    87dc:	e0bff817 	ldw	r2,-32(fp)
    87e0:	10c00044 	addi	r3,r2,1
    87e4:	e0fff815 	stw	r3,-32(fp)
    87e8:	e0fffb17 	ldw	r3,-20(fp)
    87ec:	10c00005 	stb	r3,0(r2)
    87f0:	00000606 	br	880c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    87f4:	e0fff817 	ldw	r3,-32(fp)
    87f8:	e0bffd17 	ldw	r2,-12(fp)
    87fc:	1880071e 	bne	r3,r2,881c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    8800:	e0bfff17 	ldw	r2,-4(fp)
    8804:	1090000c 	andi	r2,r2,16384
    8808:	1000061e 	bne	r2,zero,8824 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    880c:	e0fff817 	ldw	r3,-32(fp)
    8810:	e0bffa17 	ldw	r2,-24(fp)
    8814:	18bfeb36 	bltu	r3,r2,87c4 <_gp+0xffff74f4>
    8818:	00000306 	br	8828 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    881c:	0001883a 	nop
    8820:	00000106 	br	8828 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    8824:	0001883a 	nop
    
  }

  if (ptr != buffer)
    8828:	e0fff817 	ldw	r3,-32(fp)
    882c:	e0bffd17 	ldw	r2,-12(fp)
    8830:	18800426 	beq	r3,r2,8844 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    8834:	e0fff817 	ldw	r3,-32(fp)
    8838:	e0bffd17 	ldw	r2,-12(fp)
    883c:	1885c83a 	sub	r2,r3,r2
    8840:	00000606 	br	885c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    8844:	e0bfff17 	ldw	r2,-4(fp)
    8848:	1090000c 	andi	r2,r2,16384
    884c:	10000226 	beq	r2,zero,8858 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    8850:	00bffd44 	movi	r2,-11
    8854:	00000106 	br	885c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    8858:	00bffec4 	movi	r2,-5
}
    885c:	e037883a 	mov	sp,fp
    8860:	df000017 	ldw	fp,0(sp)
    8864:	dec00104 	addi	sp,sp,4
    8868:	f800283a 	ret

0000886c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    886c:	defff904 	addi	sp,sp,-28
    8870:	df000615 	stw	fp,24(sp)
    8874:	df000604 	addi	fp,sp,24
    8878:	e13ffc15 	stw	r4,-16(fp)
    887c:	e17ffd15 	stw	r5,-12(fp)
    8880:	e1bffe15 	stw	r6,-8(fp)
    8884:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8888:	e0bffc17 	ldw	r2,-16(fp)
    888c:	10800017 	ldw	r2,0(r2)
    8890:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    8894:	e0bffe17 	ldw	r2,-8(fp)
    8898:	e0fffd17 	ldw	r3,-12(fp)
    889c:	1885883a 	add	r2,r3,r2
    88a0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    88a4:	00000e06 	br	88e0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    88a8:	e0bffa17 	ldw	r2,-24(fp)
    88ac:	10800104 	addi	r2,r2,4
    88b0:	10800037 	ldwio	r2,0(r2)
    88b4:	10bfffec 	andhi	r2,r2,65535
    88b8:	10000926 	beq	r2,zero,88e0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    88bc:	e0fffa17 	ldw	r3,-24(fp)
    88c0:	e0bffd17 	ldw	r2,-12(fp)
    88c4:	11000044 	addi	r4,r2,1
    88c8:	e13ffd15 	stw	r4,-12(fp)
    88cc:	10800003 	ldbu	r2,0(r2)
    88d0:	10803fcc 	andi	r2,r2,255
    88d4:	1080201c 	xori	r2,r2,128
    88d8:	10bfe004 	addi	r2,r2,-128
    88dc:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    88e0:	e0fffd17 	ldw	r3,-12(fp)
    88e4:	e0bffb17 	ldw	r2,-20(fp)
    88e8:	18bfef36 	bltu	r3,r2,88a8 <_gp+0xffff75d8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    88ec:	e0bffe17 	ldw	r2,-8(fp)
}
    88f0:	e037883a 	mov	sp,fp
    88f4:	df000017 	ldw	fp,0(sp)
    88f8:	dec00104 	addi	sp,sp,4
    88fc:	f800283a 	ret

00008900 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8900:	defffa04 	addi	sp,sp,-24
    8904:	dfc00515 	stw	ra,20(sp)
    8908:	df000415 	stw	fp,16(sp)
    890c:	df000404 	addi	fp,sp,16
    8910:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    8914:	00800244 	movi	r2,9
    8918:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    891c:	014003f4 	movhi	r5,15
    8920:	29509004 	addi	r5,r5,16960
    8924:	e13ffd17 	ldw	r4,-12(fp)
    8928:	0008ef40 	call	8ef4 <__mulsi3>
    892c:	100b883a 	mov	r5,r2
    8930:	0100bef4 	movhi	r4,763
    8934:	213c2004 	addi	r4,r4,-3968
    8938:	0008e380 	call	8e38 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    893c:	100b883a 	mov	r5,r2
    8940:	01200034 	movhi	r4,32768
    8944:	213fffc4 	addi	r4,r4,-1
    8948:	0008e380 	call	8e38 <__udivsi3>
    894c:	100b883a 	mov	r5,r2
    8950:	e13fff17 	ldw	r4,-4(fp)
    8954:	0008e380 	call	8e38 <__udivsi3>
    8958:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    895c:	e0bffe17 	ldw	r2,-8(fp)
    8960:	10002a26 	beq	r2,zero,8a0c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    8964:	e03ffc15 	stw	zero,-16(fp)
    8968:	00001706 	br	89c8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    896c:	00a00034 	movhi	r2,32768
    8970:	10bfffc4 	addi	r2,r2,-1
    8974:	10bfffc4 	addi	r2,r2,-1
    8978:	103ffe1e 	bne	r2,zero,8974 <_gp+0xffff76a4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    897c:	014003f4 	movhi	r5,15
    8980:	29509004 	addi	r5,r5,16960
    8984:	e13ffd17 	ldw	r4,-12(fp)
    8988:	0008ef40 	call	8ef4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    898c:	100b883a 	mov	r5,r2
    8990:	0100bef4 	movhi	r4,763
    8994:	213c2004 	addi	r4,r4,-3968
    8998:	0008e380 	call	8e38 <__udivsi3>
    899c:	100b883a 	mov	r5,r2
    89a0:	01200034 	movhi	r4,32768
    89a4:	213fffc4 	addi	r4,r4,-1
    89a8:	0008e380 	call	8e38 <__udivsi3>
    89ac:	1007883a 	mov	r3,r2
    89b0:	e0bfff17 	ldw	r2,-4(fp)
    89b4:	10c5c83a 	sub	r2,r2,r3
    89b8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    89bc:	e0bffc17 	ldw	r2,-16(fp)
    89c0:	10800044 	addi	r2,r2,1
    89c4:	e0bffc15 	stw	r2,-16(fp)
    89c8:	e0fffc17 	ldw	r3,-16(fp)
    89cc:	e0bffe17 	ldw	r2,-8(fp)
    89d0:	18bfe616 	blt	r3,r2,896c <_gp+0xffff769c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    89d4:	014003f4 	movhi	r5,15
    89d8:	29509004 	addi	r5,r5,16960
    89dc:	e13ffd17 	ldw	r4,-12(fp)
    89e0:	0008ef40 	call	8ef4 <__mulsi3>
    89e4:	100b883a 	mov	r5,r2
    89e8:	0100bef4 	movhi	r4,763
    89ec:	213c2004 	addi	r4,r4,-3968
    89f0:	0008e380 	call	8e38 <__udivsi3>
    89f4:	e17fff17 	ldw	r5,-4(fp)
    89f8:	1009883a 	mov	r4,r2
    89fc:	0008ef40 	call	8ef4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8a00:	10bfffc4 	addi	r2,r2,-1
    8a04:	103ffe1e 	bne	r2,zero,8a00 <_gp+0xffff7730>
    8a08:	00000d06 	br	8a40 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    8a0c:	014003f4 	movhi	r5,15
    8a10:	29509004 	addi	r5,r5,16960
    8a14:	e13ffd17 	ldw	r4,-12(fp)
    8a18:	0008ef40 	call	8ef4 <__mulsi3>
    8a1c:	100b883a 	mov	r5,r2
    8a20:	0100bef4 	movhi	r4,763
    8a24:	213c2004 	addi	r4,r4,-3968
    8a28:	0008e380 	call	8e38 <__udivsi3>
    8a2c:	e17fff17 	ldw	r5,-4(fp)
    8a30:	1009883a 	mov	r4,r2
    8a34:	0008ef40 	call	8ef4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8a38:	10bfffc4 	addi	r2,r2,-1
    8a3c:	00bffe16 	blt	zero,r2,8a38 <_gp+0xffff7768>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    8a40:	0005883a 	mov	r2,zero
}
    8a44:	e037883a 	mov	sp,fp
    8a48:	dfc00117 	ldw	ra,4(sp)
    8a4c:	df000017 	ldw	fp,0(sp)
    8a50:	dec00204 	addi	sp,sp,8
    8a54:	f800283a 	ret

00008a58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8a58:	defffe04 	addi	sp,sp,-8
    8a5c:	dfc00115 	stw	ra,4(sp)
    8a60:	df000015 	stw	fp,0(sp)
    8a64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8a68:	00800074 	movhi	r2,1
    8a6c:	10a4ba04 	addi	r2,r2,-27928
    8a70:	10800017 	ldw	r2,0(r2)
    8a74:	10000526 	beq	r2,zero,8a8c <alt_get_errno+0x34>
    8a78:	00800074 	movhi	r2,1
    8a7c:	10a4ba04 	addi	r2,r2,-27928
    8a80:	10800017 	ldw	r2,0(r2)
    8a84:	103ee83a 	callr	r2
    8a88:	00000206 	br	8a94 <alt_get_errno+0x3c>
    8a8c:	00800074 	movhi	r2,1
    8a90:	10a56b04 	addi	r2,r2,-27220
}
    8a94:	e037883a 	mov	sp,fp
    8a98:	dfc00117 	ldw	ra,4(sp)
    8a9c:	df000017 	ldw	fp,0(sp)
    8aa0:	dec00204 	addi	sp,sp,8
    8aa4:	f800283a 	ret

00008aa8 <close>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
    8aa8:	defffd04 	addi	sp,sp,-12
    8aac:	dfc00215 	stw	ra,8(sp)
    8ab0:	df000115 	stw	fp,4(sp)
    8ab4:	df000104 	addi	fp,sp,4
    8ab8:	e13fff15 	stw	r4,-4(fp)
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
    8abc:	0008a580 	call	8a58 <alt_get_errno>
    8ac0:	1007883a 	mov	r3,r2
    8ac4:	00801604 	movi	r2,88
    8ac8:	18800015 	stw	r2,0(r3)
  return -1;
    8acc:	00bfffc4 	movi	r2,-1
}
    8ad0:	e037883a 	mov	sp,fp
    8ad4:	dfc00117 	ldw	ra,4(sp)
    8ad8:	df000017 	ldw	fp,0(sp)
    8adc:	dec00204 	addi	sp,sp,8
    8ae0:	f800283a 	ret

00008ae4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8ae4:	deffff04 	addi	sp,sp,-4
    8ae8:	df000015 	stw	fp,0(sp)
    8aec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8af0:	0001883a 	nop
    8af4:	e037883a 	mov	sp,fp
    8af8:	df000017 	ldw	fp,0(sp)
    8afc:	dec00104 	addi	sp,sp,4
    8b00:	f800283a 	ret

00008b04 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8b04:	defffc04 	addi	sp,sp,-16
    8b08:	df000315 	stw	fp,12(sp)
    8b0c:	df000304 	addi	fp,sp,12
    8b10:	e13ffd15 	stw	r4,-12(fp)
    8b14:	e17ffe15 	stw	r5,-8(fp)
    8b18:	e1bfff15 	stw	r6,-4(fp)
  return len;
    8b1c:	e0bfff17 	ldw	r2,-4(fp)
}
    8b20:	e037883a 	mov	sp,fp
    8b24:	df000017 	ldw	fp,0(sp)
    8b28:	dec00104 	addi	sp,sp,4
    8b2c:	f800283a 	ret

00008b30 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8b30:	deffff04 	addi	sp,sp,-4
    8b34:	df000015 	stw	fp,0(sp)
    8b38:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8b3c:	0001883a 	nop
    8b40:	e037883a 	mov	sp,fp
    8b44:	df000017 	ldw	fp,0(sp)
    8b48:	dec00104 	addi	sp,sp,4
    8b4c:	f800283a 	ret

00008b50 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    8b50:	deffff04 	addi	sp,sp,-4
    8b54:	df000015 	stw	fp,0(sp)
    8b58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    8b5c:	000170fa 	wrctl	ienable,zero
}
    8b60:	0001883a 	nop
    8b64:	e037883a 	mov	sp,fp
    8b68:	df000017 	ldw	fp,0(sp)
    8b6c:	dec00104 	addi	sp,sp,4
    8b70:	f800283a 	ret

00008b74 <exit>:
    8b74:	defffe04 	addi	sp,sp,-8
    8b78:	000b883a 	mov	r5,zero
    8b7c:	dc000015 	stw	r16,0(sp)
    8b80:	dfc00115 	stw	ra,4(sp)
    8b84:	2021883a 	mov	r16,r4
    8b88:	0008bb00 	call	8bb0 <__call_exitprocs>
    8b8c:	8009883a 	mov	r4,r16
    8b90:	0008f1c0 	call	8f1c <_exit>

00008b94 <strlen>:
    8b94:	2005883a 	mov	r2,r4
    8b98:	10c00007 	ldb	r3,0(r2)
    8b9c:	18000226 	beq	r3,zero,8ba8 <strlen+0x14>
    8ba0:	10800044 	addi	r2,r2,1
    8ba4:	003ffc06 	br	8b98 <_gp+0xffff78c8>
    8ba8:	1105c83a 	sub	r2,r2,r4
    8bac:	f800283a 	ret

00008bb0 <__call_exitprocs>:
    8bb0:	defff504 	addi	sp,sp,-44
    8bb4:	dd000515 	stw	r20,20(sp)
    8bb8:	05000074 	movhi	r20,1
    8bbc:	dc800315 	stw	r18,12(sp)
    8bc0:	dfc00a15 	stw	ra,40(sp)
    8bc4:	df000915 	stw	fp,36(sp)
    8bc8:	ddc00815 	stw	r23,32(sp)
    8bcc:	dd800715 	stw	r22,28(sp)
    8bd0:	dd400615 	stw	r21,24(sp)
    8bd4:	dcc00415 	stw	r19,16(sp)
    8bd8:	dc400215 	stw	r17,8(sp)
    8bdc:	dc000115 	stw	r16,4(sp)
    8be0:	d9000015 	stw	r4,0(sp)
    8be4:	2825883a 	mov	r18,r5
    8be8:	a524bb04 	addi	r20,r20,-27924
    8bec:	a4400017 	ldw	r17,0(r20)
    8bf0:	8cc00c17 	ldw	r19,48(r17)
    8bf4:	8c400c04 	addi	r17,r17,48
    8bf8:	98004526 	beq	r19,zero,8d10 <__call_exitprocs+0x160>
    8bfc:	9c000117 	ldw	r16,4(r19)
    8c00:	00900034 	movhi	r2,16384
    8c04:	10bfffc4 	addi	r2,r2,-1
    8c08:	9d402217 	ldw	r21,136(r19)
    8c0c:	85bfffc4 	addi	r22,r16,-1
    8c10:	80a1883a 	add	r16,r16,r2
    8c14:	8421883a 	add	r16,r16,r16
    8c18:	8421883a 	add	r16,r16,r16
    8c1c:	ac2f883a 	add	r23,r21,r16
    8c20:	84000204 	addi	r16,r16,8
    8c24:	9c21883a 	add	r16,r19,r16
    8c28:	b0002716 	blt	r22,zero,8cc8 <__call_exitprocs+0x118>
    8c2c:	90000726 	beq	r18,zero,8c4c <__call_exitprocs+0x9c>
    8c30:	a800041e 	bne	r21,zero,8c44 <__call_exitprocs+0x94>
    8c34:	b5bfffc4 	addi	r22,r22,-1
    8c38:	bdffff04 	addi	r23,r23,-4
    8c3c:	843fff04 	addi	r16,r16,-4
    8c40:	003ff906 	br	8c28 <_gp+0xffff7958>
    8c44:	b9002017 	ldw	r4,128(r23)
    8c48:	913ffa1e 	bne	r18,r4,8c34 <_gp+0xffff7964>
    8c4c:	99000117 	ldw	r4,4(r19)
    8c50:	82000017 	ldw	r8,0(r16)
    8c54:	213fffc4 	addi	r4,r4,-1
    8c58:	b100021e 	bne	r22,r4,8c64 <__call_exitprocs+0xb4>
    8c5c:	9d800115 	stw	r22,4(r19)
    8c60:	00000106 	br	8c68 <__call_exitprocs+0xb8>
    8c64:	80000015 	stw	zero,0(r16)
    8c68:	403ff226 	beq	r8,zero,8c34 <_gp+0xffff7964>
    8c6c:	9f000117 	ldw	fp,4(r19)
    8c70:	a8000526 	beq	r21,zero,8c88 <__call_exitprocs+0xd8>
    8c74:	00800044 	movi	r2,1
    8c78:	1592983a 	sll	r9,r2,r22
    8c7c:	a9404017 	ldw	r5,256(r21)
    8c80:	494a703a 	and	r5,r9,r5
    8c84:	2800021e 	bne	r5,zero,8c90 <__call_exitprocs+0xe0>
    8c88:	403ee83a 	callr	r8
    8c8c:	00000906 	br	8cb4 <__call_exitprocs+0x104>
    8c90:	a9004117 	ldw	r4,260(r21)
    8c94:	4908703a 	and	r4,r9,r4
    8c98:	2000041e 	bne	r4,zero,8cac <__call_exitprocs+0xfc>
    8c9c:	b9400017 	ldw	r5,0(r23)
    8ca0:	d9000017 	ldw	r4,0(sp)
    8ca4:	403ee83a 	callr	r8
    8ca8:	00000206 	br	8cb4 <__call_exitprocs+0x104>
    8cac:	b9000017 	ldw	r4,0(r23)
    8cb0:	403ee83a 	callr	r8
    8cb4:	99000117 	ldw	r4,4(r19)
    8cb8:	e13fcc1e 	bne	fp,r4,8bec <_gp+0xffff791c>
    8cbc:	89000017 	ldw	r4,0(r17)
    8cc0:	993fdc26 	beq	r19,r4,8c34 <_gp+0xffff7964>
    8cc4:	003fc906 	br	8bec <_gp+0xffff791c>
    8cc8:	00800034 	movhi	r2,0
    8ccc:	10800004 	addi	r2,r2,0
    8cd0:	10000f26 	beq	r2,zero,8d10 <__call_exitprocs+0x160>
    8cd4:	99400117 	ldw	r5,4(r19)
    8cd8:	99000017 	ldw	r4,0(r19)
    8cdc:	2800091e 	bne	r5,zero,8d04 <__call_exitprocs+0x154>
    8ce0:	20000826 	beq	r4,zero,8d04 <__call_exitprocs+0x154>
    8ce4:	89000015 	stw	r4,0(r17)
    8ce8:	a8000226 	beq	r21,zero,8cf4 <__call_exitprocs+0x144>
    8cec:	a809883a 	mov	r4,r21
    8cf0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    8cf4:	9809883a 	mov	r4,r19
    8cf8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    8cfc:	8cc00017 	ldw	r19,0(r17)
    8d00:	003fbd06 	br	8bf8 <_gp+0xffff7928>
    8d04:	9823883a 	mov	r17,r19
    8d08:	2027883a 	mov	r19,r4
    8d0c:	003fba06 	br	8bf8 <_gp+0xffff7928>
    8d10:	dfc00a17 	ldw	ra,40(sp)
    8d14:	df000917 	ldw	fp,36(sp)
    8d18:	ddc00817 	ldw	r23,32(sp)
    8d1c:	dd800717 	ldw	r22,28(sp)
    8d20:	dd400617 	ldw	r21,24(sp)
    8d24:	dd000517 	ldw	r20,20(sp)
    8d28:	dcc00417 	ldw	r19,16(sp)
    8d2c:	dc800317 	ldw	r18,12(sp)
    8d30:	dc400217 	ldw	r17,8(sp)
    8d34:	dc000117 	ldw	r16,4(sp)
    8d38:	dec00b04 	addi	sp,sp,44
    8d3c:	f800283a 	ret

00008d40 <__divsi3>:
    8d40:	20001b16 	blt	r4,zero,8db0 <__divsi3+0x70>
    8d44:	000f883a 	mov	r7,zero
    8d48:	28001616 	blt	r5,zero,8da4 <__divsi3+0x64>
    8d4c:	200d883a 	mov	r6,r4
    8d50:	29001a2e 	bgeu	r5,r4,8dbc <__divsi3+0x7c>
    8d54:	00800804 	movi	r2,32
    8d58:	00c00044 	movi	r3,1
    8d5c:	00000106 	br	8d64 <__divsi3+0x24>
    8d60:	10000d26 	beq	r2,zero,8d98 <__divsi3+0x58>
    8d64:	294b883a 	add	r5,r5,r5
    8d68:	10bfffc4 	addi	r2,r2,-1
    8d6c:	18c7883a 	add	r3,r3,r3
    8d70:	293ffb36 	bltu	r5,r4,8d60 <_gp+0xffff7a90>
    8d74:	0005883a 	mov	r2,zero
    8d78:	18000726 	beq	r3,zero,8d98 <__divsi3+0x58>
    8d7c:	0005883a 	mov	r2,zero
    8d80:	31400236 	bltu	r6,r5,8d8c <__divsi3+0x4c>
    8d84:	314dc83a 	sub	r6,r6,r5
    8d88:	10c4b03a 	or	r2,r2,r3
    8d8c:	1806d07a 	srli	r3,r3,1
    8d90:	280ad07a 	srli	r5,r5,1
    8d94:	183ffa1e 	bne	r3,zero,8d80 <_gp+0xffff7ab0>
    8d98:	38000126 	beq	r7,zero,8da0 <__divsi3+0x60>
    8d9c:	0085c83a 	sub	r2,zero,r2
    8da0:	f800283a 	ret
    8da4:	014bc83a 	sub	r5,zero,r5
    8da8:	39c0005c 	xori	r7,r7,1
    8dac:	003fe706 	br	8d4c <_gp+0xffff7a7c>
    8db0:	0109c83a 	sub	r4,zero,r4
    8db4:	01c00044 	movi	r7,1
    8db8:	003fe306 	br	8d48 <_gp+0xffff7a78>
    8dbc:	00c00044 	movi	r3,1
    8dc0:	003fee06 	br	8d7c <_gp+0xffff7aac>

00008dc4 <__modsi3>:
    8dc4:	20001716 	blt	r4,zero,8e24 <__modsi3+0x60>
    8dc8:	000f883a 	mov	r7,zero
    8dcc:	2005883a 	mov	r2,r4
    8dd0:	28001216 	blt	r5,zero,8e1c <__modsi3+0x58>
    8dd4:	2900162e 	bgeu	r5,r4,8e30 <__modsi3+0x6c>
    8dd8:	01800804 	movi	r6,32
    8ddc:	00c00044 	movi	r3,1
    8de0:	00000106 	br	8de8 <__modsi3+0x24>
    8de4:	30000a26 	beq	r6,zero,8e10 <__modsi3+0x4c>
    8de8:	294b883a 	add	r5,r5,r5
    8dec:	31bfffc4 	addi	r6,r6,-1
    8df0:	18c7883a 	add	r3,r3,r3
    8df4:	293ffb36 	bltu	r5,r4,8de4 <_gp+0xffff7b14>
    8df8:	18000526 	beq	r3,zero,8e10 <__modsi3+0x4c>
    8dfc:	1806d07a 	srli	r3,r3,1
    8e00:	11400136 	bltu	r2,r5,8e08 <__modsi3+0x44>
    8e04:	1145c83a 	sub	r2,r2,r5
    8e08:	280ad07a 	srli	r5,r5,1
    8e0c:	183ffb1e 	bne	r3,zero,8dfc <_gp+0xffff7b2c>
    8e10:	38000126 	beq	r7,zero,8e18 <__modsi3+0x54>
    8e14:	0085c83a 	sub	r2,zero,r2
    8e18:	f800283a 	ret
    8e1c:	014bc83a 	sub	r5,zero,r5
    8e20:	003fec06 	br	8dd4 <_gp+0xffff7b04>
    8e24:	0109c83a 	sub	r4,zero,r4
    8e28:	01c00044 	movi	r7,1
    8e2c:	003fe706 	br	8dcc <_gp+0xffff7afc>
    8e30:	00c00044 	movi	r3,1
    8e34:	003ff106 	br	8dfc <_gp+0xffff7b2c>

00008e38 <__udivsi3>:
    8e38:	200d883a 	mov	r6,r4
    8e3c:	2900152e 	bgeu	r5,r4,8e94 <__udivsi3+0x5c>
    8e40:	28001416 	blt	r5,zero,8e94 <__udivsi3+0x5c>
    8e44:	00800804 	movi	r2,32
    8e48:	00c00044 	movi	r3,1
    8e4c:	00000206 	br	8e58 <__udivsi3+0x20>
    8e50:	10000e26 	beq	r2,zero,8e8c <__udivsi3+0x54>
    8e54:	28000516 	blt	r5,zero,8e6c <__udivsi3+0x34>
    8e58:	294b883a 	add	r5,r5,r5
    8e5c:	10bfffc4 	addi	r2,r2,-1
    8e60:	18c7883a 	add	r3,r3,r3
    8e64:	293ffa36 	bltu	r5,r4,8e50 <_gp+0xffff7b80>
    8e68:	18000826 	beq	r3,zero,8e8c <__udivsi3+0x54>
    8e6c:	0005883a 	mov	r2,zero
    8e70:	31400236 	bltu	r6,r5,8e7c <__udivsi3+0x44>
    8e74:	314dc83a 	sub	r6,r6,r5
    8e78:	10c4b03a 	or	r2,r2,r3
    8e7c:	1806d07a 	srli	r3,r3,1
    8e80:	280ad07a 	srli	r5,r5,1
    8e84:	183ffa1e 	bne	r3,zero,8e70 <_gp+0xffff7ba0>
    8e88:	f800283a 	ret
    8e8c:	0005883a 	mov	r2,zero
    8e90:	f800283a 	ret
    8e94:	00c00044 	movi	r3,1
    8e98:	003ff406 	br	8e6c <_gp+0xffff7b9c>

00008e9c <__umodsi3>:
    8e9c:	2005883a 	mov	r2,r4
    8ea0:	2900122e 	bgeu	r5,r4,8eec <__umodsi3+0x50>
    8ea4:	28001116 	blt	r5,zero,8eec <__umodsi3+0x50>
    8ea8:	01800804 	movi	r6,32
    8eac:	00c00044 	movi	r3,1
    8eb0:	00000206 	br	8ebc <__umodsi3+0x20>
    8eb4:	30000c26 	beq	r6,zero,8ee8 <__umodsi3+0x4c>
    8eb8:	28000516 	blt	r5,zero,8ed0 <__umodsi3+0x34>
    8ebc:	294b883a 	add	r5,r5,r5
    8ec0:	31bfffc4 	addi	r6,r6,-1
    8ec4:	18c7883a 	add	r3,r3,r3
    8ec8:	293ffa36 	bltu	r5,r4,8eb4 <_gp+0xffff7be4>
    8ecc:	18000626 	beq	r3,zero,8ee8 <__umodsi3+0x4c>
    8ed0:	1806d07a 	srli	r3,r3,1
    8ed4:	11400136 	bltu	r2,r5,8edc <__umodsi3+0x40>
    8ed8:	1145c83a 	sub	r2,r2,r5
    8edc:	280ad07a 	srli	r5,r5,1
    8ee0:	183ffb1e 	bne	r3,zero,8ed0 <_gp+0xffff7c00>
    8ee4:	f800283a 	ret
    8ee8:	f800283a 	ret
    8eec:	00c00044 	movi	r3,1
    8ef0:	003ff706 	br	8ed0 <_gp+0xffff7c00>

00008ef4 <__mulsi3>:
    8ef4:	0005883a 	mov	r2,zero
    8ef8:	20000726 	beq	r4,zero,8f18 <__mulsi3+0x24>
    8efc:	20c0004c 	andi	r3,r4,1
    8f00:	2008d07a 	srli	r4,r4,1
    8f04:	18000126 	beq	r3,zero,8f0c <__mulsi3+0x18>
    8f08:	1145883a 	add	r2,r2,r5
    8f0c:	294b883a 	add	r5,r5,r5
    8f10:	203ffa1e 	bne	r4,zero,8efc <_gp+0xffff7c2c>
    8f14:	f800283a 	ret
    8f18:	f800283a 	ret

00008f1c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    8f1c:	defffd04 	addi	sp,sp,-12
    8f20:	df000215 	stw	fp,8(sp)
    8f24:	df000204 	addi	fp,sp,8
    8f28:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    8f2c:	0001883a 	nop
    8f30:	e0bfff17 	ldw	r2,-4(fp)
    8f34:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    8f38:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    8f3c:	10000226 	beq	r2,zero,8f48 <_exit+0x2c>
    ALT_SIM_FAIL();
    8f40:	002af070 	cmpltui	zero,zero,43969
    8f44:	00000106 	br	8f4c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    8f48:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    8f4c:	003fff06 	br	8f4c <_gp+0xffff7c7c>
